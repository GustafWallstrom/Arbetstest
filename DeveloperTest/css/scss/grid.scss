@function convert-number-to-word($num) {
    $count: 1;

    @each $word in c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11, c12,c13,c14,c15,c16,c17,c18,c19, c20,c21,c22,c23,c24 {
        @if ($count == $num) {
            @return $word;
        }

        $count: $count + 1;
    }

    @return "invalid";
}

@function gridCalc($colNumber, $totalclms) {
    @return percentage(($colNumber / $totalclms));
}

@mixin clearfix() {
    *zoom: 1;

    &:before, &:after {
        content: "";
        display: table;
    }

    &:after {
        clear: both;
    }
}



.row {
    width: $rowWidth;
    max-width: 100%;
    min-width: $screenSmall;
    margin: $pagemargin;

    .row {
        width: auto;
        max-width: none;
        min-width: 0;
        margin: 0 (-($clmGutter));
    }

    &.collapse {
        .clm, .clms {
            padding: 0;
        }
    }

    .row {
        width: auto;
        max-width: none;
        min-width: 0;
        margin: 0 (-($clmGutter));

        &.collapse {
            margin: 0;
        }
    }
}

.clm, .clms {
    float: left;
    padding: 0 $clmGutter;
    position: relative;

    &.centered {
        float: none;
        margin: 0 auto;
    }
}

[class*="clm"] + [class*="clm"]:last-child {
    float: right;
}

[class*="clm"] + [class*="clm"].end {
    float: left;
}


// Creating .row-# classes
@for $i from 1 through $totalclms {
    .row {
        .#{convert-number-to-word($i)} {
            @extend .#{convert-number-to-word($i)};
        }
    }
}

// Creating .row .offset-by-# classes
@for $i from 1 through $totalclms - 2 {
    .row {
        .offset-by-#{convert-number-to-word($i)} {
            margin-left: gridCalc($i, $totalclms);
        }
    }
}

// Creating .row .push-# classes
@for $i from 2 through $totalclms - 2 {
    .push-#{convert-number-to-word($i)} {
        left: gridCalc($i, $totalclms);
    }

    .pull-#{convert-number-to-word($i)} {
        right: gridCalc($i, $totalclms);
    }
}

form {
    img, object, embed {
        max-width: 100%;
        height: auto;
    }

    object, embed {
        height: 100%;
    }
}

img {
    -ms-interpolation-mode: bicubic;
}

#map_canvas img, .map_canvas img {
    max-width: none !important;
}

/* Nicolas Gallagher's micro clearfix */
.row {
    @include clearfix();
}

@media only screen and (min-width: 768px) {
    // Creating clm classes
    @for $i from 1 through $totalclms {
        .#{convert-number-to-word($i)} {
            width: gridCalc($i, $totalclms);
            flex-basis: gridCalc($i, $totalclms);
            max-width: gridCalc($i, $totalclms);
        }
    }

    .flex {
        .row {
            display: -ms-flexbox;
            display: -webkit-flex;
            display: flex;
            -ms-flex-direction: row;
            flex-direction: row;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
            -ms-flex-pack: start;
            justify-content: flex-start;
            -ms-flex-line-pack: stretch;
            align-content: stretch;
        }

        .clms {
            -ms-flex-order: 0;
            order: 0;
            -ms-flex: 0 1 auto;
            flex: 0 1 auto;
            -ms-flex-item-align: auto;
            float: none;
        }
    }
}
/* Mobile Grid and Overrides ---------------------- */

@media only screen and (max-width: 767px) {
    // Creating clm classes
    @for $i from 1 through $totalclms {
        .#{convert-number-to-word($i)} {
            width: gridCalc($i, $totalclms);
        }
    }

    bbody { -webkit-text-size-adjust: none; -ms-text-size-adjust: none; width: 100%; min-width: 0; margin-left: 0; margin-right: 0; padding-left: 0; padding-right: 0; }

    .row { width: auto; min-width: 0; margin-left: 0; margin-right: 0; }
    .clm, .clms { width: auto !important; float: none;  }
    
    .clm:last-child, .clms:last-child { float: none; }
    [class*="clm"] + [class*="clm"]:last-child { float: none; }
    .clm:before, .clms:before, .clm:after, .clms:after { content:""; display:table; }
    .clm:after, .clms:after { clear: both; }

    // Placeholder classes for mobile grid overrides
    
    

    @for $i from 1 through $totalclms - 2 {
      .offset-by-#{convert-number-to-word($i)} {margin-left: 0 !important;}
    }
    @for $i from 2 through $totalclms - 2 {
      .push-#{convert-number-to-word($i)} { left: auto; }
      .pull-#{convert-number-to-word($i)} { right: auto; }
    }

    /* Mobile 4-clm Grid */
    @for $i from 1 through $mobileTotalclms {
      .row {
        .mobile-#{convert-number-to-word($i)} { width: gridCalc($i, $mobileTotalclms) !important; float: left; padding: 0 ($clmGutter/2);
          &:last-child { float: right; }
        }
        &.collapse {
          .mobile-#{convert-number-to-word($i)} { padding: 0; }
        }
      }
    }
    @for $i from 1 through $mobileTotalclms - 1 {
      .push-#{convert-number-to-word($i)}-mobile { left: gridCalc($i, $mobileTotalclms); }
      .pull-#{convert-number-to-word($i)}-mobile { right: gridCalc($i, $mobileTotalclms); }
    }
}

@media print {
    .row {
        width: 100%;
    }

    .row .print-width {
        float: none;
        width: auto;
    }
}
