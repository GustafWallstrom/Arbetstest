<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core</name>
    </assembly>
    <members>
        <member name="F:Core.Admin.GoogleServiceAccount.removeButton">
            <summary>
            removeButton control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Admin.GoogleServiceAccount.gFile">
            <summary>
            gFile control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Admin.GoogleServiceAccount.uploadButton">
            <summary>
            uploadButton control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Admin.GoogleServiceAccount.showAnalyticsWidget">
            <summary>
            showAnalyticsWidget control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Admin.GoogleServiceAccount.sawLabel">
            <summary>
            sawLabel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Admin.GoogleServiceAccount.ddlSitesLabel">
            <summary>
            ddlSitesLabel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Admin.GoogleServiceAccount.ddlSites">
            <summary>
            ddlSites control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Admin.GoogleServiceAccount.doSave">
            <summary>
            doSave control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Admin.GoogleHelper.gFile">
            <summary>
            gFile control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Admin.GoogleHelper.Button1">
            <summary>
            Button1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Admin.getexcel.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Licenses.exrepActivatedLicenses">
            <summary>
            exrepActivatedLicenses control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Licenses.exrepDeactivatedLicenses">
            <summary>
            exrepDeactivatedLicenses control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Licenses.exrepAvailible">
            <summary>
            exrepAvailible control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.LongRunningProcesses.pnl">
            <summary>
            pnl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.LogViewer.ddSelect">
            <summary>
            ddSelect control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.LogViewer.exErr2">
            <summary>
            exErr2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.LogViewer.box">
            <summary>
            box control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.LogViewer.rpt">
            <summary>
            rpt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Languages.lang">
            <summary>
            lang control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Languages.Button1">
            <summary>
            Button1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Languages.allLang">
            <summary>
            allLang control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Languages.newRoot">
            <summary>
            newRoot control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.btnShowImport">
            <summary>
            btnShowImport control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.exErr2">
            <summary>
            exErr2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.pnlredirects">
            <summary>
            pnlredirects control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.pnlerrors">
            <summary>
            pnlerrors control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.pnlimport">
            <summary>
            pnlimport control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.step1">
            <summary>
            step1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.lbuplxls">
            <summary>
            lbuplxls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.uplXls">
            <summary>
            uplXls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.btuplxls">
            <summary>
            btuplxls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.step2">
            <summary>
            step2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.lbImp">
            <summary>
            lbImp control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.ddImp">
            <summary>
            ddImp control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.step3">
            <summary>
            step3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.pnlImpXmlExample">
            <summary>
            pnlImpXmlExample control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.chkFirstRowHead">
            <summary>
            chkFirstRowHead control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.xlsexample">
            <summary>
            xlsexample control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.pnlImpMappings">
            <summary>
            pnlImpMappings control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.columnmappings">
            <summary>
            columnmappings control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Redirects.btImport">
            <summary>
            btImport control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.btnAdd">
            <summary>
            btnAdd control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.message">
            <summary>
            message control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.pnl3">
            <summary>
            pnl3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.lbTypes">
            <summary>
            lbTypes control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.ddTypes">
            <summary>
            ddTypes control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.lbName">
            <summary>
            lbName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.tbName">
            <summary>
            tbName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.lbStartDate">
            <summary>
            lbStartDate control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.tbStartDate">
            <summary>
            tbStartDate control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.lbScheduleType">
            <summary>
            lbScheduleType control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.ddScheduleType">
            <summary>
            ddScheduleType control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.views">
            <summary>
            views control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.viewInterval">
            <summary>
            viewInterval control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.lbInterval">
            <summary>
            lbInterval control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.tbInterval">
            <summary>
            tbInterval control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.viewScheduled">
            <summary>
            viewScheduled control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.lbDays">
            <summary>
            lbDays control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.selDays">
            <summary>
            selDays control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.lbStartTime">
            <summary>
            lbStartTime control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.tbStartTime">
            <summary>
            tbStartTime control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.viewOneTime">
            <summary>
            viewOneTime control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.cbActive">
            <summary>
            cbActive control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.btSaveTask">
            <summary>
            btSaveTask control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.btCancelAddTask">
            <summary>
            btCancelAddTask control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.pnl">
            <summary>
            pnl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.items">
            <summary>
            items control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.upcomingonetime">
            <summary>
            upcomingonetime control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.onetimejob">
            <summary>
            onetimejob control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.oldonetime">
            <summary>
            oldonetime control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.ScheduleManager.oldonetimerpt">
            <summary>
            oldonetimerpt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Translations.exLangs">
            <summary>
            exLangs control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Translations.ShowPaid">
            <summary>
            ShowPaid control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Controls.Translations.pnl">
            <summary>
            pnl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ServerTable.top">
            <summary>
            top control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ServerTable.exErr2">
            <summary>
            exErr2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Co.top">
            <summary>
            top control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Co.exErr2">
            <summary>
            exErr2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Co.btns">
            <summary>
            btns control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Co.cfg">
            <summary>
            cfg control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.ddEdit">
            <summary>
            ddEdit control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.btnAdd">
            <summary>
            btnAdd control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.exErr2">
            <summary>
            exErr2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.box2">
            <summary>
            box2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.ltCurrentTemplate2">
            <summary>
            ltCurrentTemplate2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.ltCurrentTemplate">
            <summary>
            ltCurrentTemplate control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.box3">
            <summary>
            box3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.lbNewName">
            <summary>
            lbNewName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.tbNewName">
            <summary>
            tbNewName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.reqNewName">
            <summary>
            reqNewName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.cvonlyone">
            <summary>
            cvonlyone control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.lbInherit">
            <summary>
            lbInherit control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.ddInherit">
            <summary>
            ddInherit control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.cbIsMasterPage">
            <summary>
            cbIsMasterPage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.EmailSettings.btCreateTemplate">
            <summary>
            btCreateTemplate control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.exErr2">
            <summary>
            exErr2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.step1">
            <summary>
            step1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.lbuplxls">
            <summary>
            lbuplxls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.uplXls">
            <summary>
            uplXls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.btuplxls">
            <summary>
            btuplxls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.step2">
            <summary>
            step2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.lbImp">
            <summary>
            lbImp control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.ddImp">
            <summary>
            ddImp control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.step3">
            <summary>
            step3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.templates">
            <summary>
            templates control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.pParentId">
            <summary>
            pParentId control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.lbParentId">
            <summary>
            lbParentId control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.tbParentId">
            <summary>
            tbParentId control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.cpPublishPages">
            <summary>
            cpPublishPages control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportPages.btImport">
            <summary>
            btImport control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.exErr2">
            <summary>
            exErr2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.step1">
            <summary>
            step1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.lbuplxls">
            <summary>
            lbuplxls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.uplXls">
            <summary>
            uplXls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.btuplxls">
            <summary>
            btuplxls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.step2">
            <summary>
            step2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.lbImp">
            <summary>
            lbImp control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.ddImp">
            <summary>
            ddImp control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.step3">
            <summary>
            step3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.pnlImpXmlExample">
            <summary>
            pnlImpXmlExample control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.chkFirstRowHead">
            <summary>
            chkFirstRowHead control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.xlsexample">
            <summary>
            xlsexample control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.pnlImpMappings">
            <summary>
            pnlImpMappings control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.columnmappings">
            <summary>
            columnmappings control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.rolespanel">
            <summary>
            rolespanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.rolecolumn">
            <summary>
            rolecolumn control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.roles">
            <summary>
            roles control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.uppnl">
            <summary>
            uppnl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.lbPasswordType">
            <summary>
            lbPasswordType control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.rblPassword">
            <summary>
            rblPassword control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.pPassword">
            <summary>
            pPassword control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.lbPassword">
            <summary>
            lbPassword control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.tbPassword">
            <summary>
            tbPassword control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.cbOverwrite">
            <summary>
            cbOverwrite control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.pnlOverwritePassword">
            <summary>
            pnlOverwritePassword control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.cbOverwritePassword">
            <summary>
            cbOverwritePassword control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.cbExportExcel">
            <summary>
            cbExportExcel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.cbSendEmail">
            <summary>
            cbSendEmail control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.errorSummary">
            <summary>
            errorSummary control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.ImportUsers.btImport">
            <summary>
            btImport control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.top">
            <summary>
            top control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.msg">
            <summary>
            msg control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.implstpnl">
            <summary>
            implstpnl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.imppnl1">
            <summary>
            imppnl1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.lbuplxls">
            <summary>
            lbuplxls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.uplXls">
            <summary>
            uplXls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.btuplxls">
            <summary>
            btuplxls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.imppnl3">
            <summary>
            imppnl3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.existingcontainer">
            <summary>
            existingcontainer control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.existing">
            <summary>
            existing control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.mapper">
            <summary>
            mapper control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.settingsPanel">
            <summary>
            settingsPanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.valsum">
            <summary>
            valsum control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.exdoimport">
            <summary>
            exdoimport control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.customHolder">
            <summary>
            customHolder control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.litAddCustom">
            <summary>
            litAddCustom control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.lbCustomId">
            <summary>
            lbCustomId control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.tbCustomId">
            <summary>
            tbCustomId control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.lbCustomName">
            <summary>
            lbCustomName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.tbCustomName">
            <summary>
            tbCustomName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.customColIdx">
            <summary>
            customColIdx control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.Importer.addCustom">
            <summary>
            addCustom control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="M:Core.ControlPanel.ImportControlPanelItem.CustomValidate(Core.ControlPanel.Import.MapperSettings,Core.Interfaces.IImportSettings,System.String@)">
            <summary>
            Validate data input, if invalid return false
            </summary>
            <param name="mapping"></param>
            <param name="settings"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Core.ControlPanel.ImportControlPanelItem.OnImportFinished">
            <summary>
            Return message to show for user
            </summary>
            <returns></returns>
        </member>
        <member name="P:Core.ControlPanel.ControlPanelCategoryBase.Id">
            <summary>
            Unique ID for the category, 0-9 is used by the system, please use an Id above 10. This ID is used by the system to see if the category is unique
            </summary>
        </member>
        <member name="F:Core.ControlPanel.SelectUser.filter">
            <summary>
            filter control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.SelectUser.tbFind">
            <summary>
            tbFind control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.SelectUser.rUsers">
            <summary>
            rUsers control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanel.SelectUser.phPaging">
            <summary>
            phPaging control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="M:Core.ControlPanel.ControlPanelItem.Translate(System.String)">
            <summary>
            Use to translate
            If name is requested it want's name of the plugin. Use systemlanguage to get correct 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Core.ControlPanel.ControlPanelItemContainer.Equals(System.Object)">
            <summary>
            Compares 
            </summary>
            <param name="obj">Compared object</param>
            <returns></returns>
        </member>
        <member name="M:Core.ControlPanel.ControlPanelItemContainer.#ctor(System.Type)">
            <summary>
            Creates an instance of a supplied type
            </summary>
            <param name="loadType">type to create the instance from...</param>
        </member>
        <member name="P:Core.ControlPanel.ControlPanelItemContainer.Name">
            <summary>
            Name of the controlpanel item
            </summary>
        </member>
        <member name="P:Core.ControlPanel.ControlPanelItemContainer.RequiredRole">
            <summary>
            Required role of the controlpanel item
            </summary>
        </member>
        <member name="P:Core.ControlPanel.ControlPanelItemContainer.IconUrl">
            <summary>
            Icon of the controlpanel item.
            If left null it uses the category icon.
            </summary>
        </member>
        <member name="P:Core.ControlPanel.ControlPanelItemContainer.Filename">
            <summary>
            Filename of the associated .aspx file
            </summary>
        </member>
        <member name="P:Core.ControlPanel.ControlPanelItemContainer.SortOrder">
            <summary>
            Sortorder of the controlpanel item.
            </summary>
        </member>
        <member name="P:Core.ControlPanel.ControlPanelItemContainer.Category">
            <summary>
            Which category the plugin belongs in
            </summary>
        </member>
        <member name="P:Core.ControlPanel.ControlPanelItemContainer.IsVisible">
            <summary>
            If the control is visible in the current instance of the application
            </summary>
        </member>
        <member name="F:Core.ControlPanelControls.Triggers.allTriggers">
            <summary>
            allTriggers control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanelControls.Triggers.matchingActions">
            <summary>
            matchingActions control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanelControls.Triggers.customGui">
            <summary>
            customGui control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanelControls.Triggers.bBind">
            <summary>
            bBind control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanelControls.Triggers.lbExisting">
            <summary>
            lbExisting control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanelControls.Triggers.customEditGui">
            <summary>
            customEditGui control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanelControls.Triggers.bSave">
            <summary>
            bSave control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanelControls.Triggers.bDelete">
            <summary>
            bDelete control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanelControls.Cache.noObjs">
            <summary>
            noObjs control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanelControls.Cache.noMB">
            <summary>
            noMB control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="M:Core.Base.Comment.GetLatestGlobalComments(System.Boolean,System.Int32)">
            <summary>
            Return latest comments, newest first, looks back 3 months
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Base.StaticCommon.Compute(System.String,System.String)">
            <summary>
            Compute the distance between two strings.
            </summary>
        </member>
        <member name="M:Core.Base.StaticCommon.GetStringValue``1(``0)">
            <summary>
            Get enum string value from <see cref="T:System.Runtime.Serialization.EnumMemberAttribute" /> or fallback to <code>ToString()</code>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The enum to get the value from.</param>
        </member>
        <member name="T:Core.Base.Common">
            <summary>
            Common functions for pages and properties
            </summary>
        </member>
        <member name="M:Core.Base.Common.ClearTemp">
            <summary>
            Clears temporary image files
            </summary>
        </member>
        <member name="M:Core.Base.Common.GoogleMap(System.String,System.Xml.XmlNode,System.Int32,System.Int32)">
            <summary>
             Gets the Google xml map.
            </summary>
            <param name="prefix"></param>
            <param name="root"></param>
            <param name="parentId"></param>
        </member>
        <member name="M:Core.Base.Common.FindVirtualPage(System.String)">
            <summary>
            Finds the corresponding url for a virutal url
            </summary>
            <param name="url">The Virtual url</param>
            <returns>The corresponding url</returns>
        </member>
        <member name="M:Core.Base.Common.IsValid(System.String)">
            <summary>
            Checks the admin string if its valid for this server
            </summary>
            <param name="reg">Registration string</param>
            <returns>If the site is trial</returns>
        </member>
        <member name="M:Core.Base.Common.HasRights(System.String,System.String)">
            <summary>
            Checks for rights
            </summary>
            <param name="ByUser">For this user</param>
            <param name="Roles">The role/roles (spitted by ',')</param>
            <returns>If the user has the rights</returns>
        </member>
        <member name="M:Core.Base.Common.HasRights(System.String)">
            <summary>
            Checks for rights for current user
            </summary>
            <param name="roles">The role/roles (spitted by ',')</param>
            <returns>If the user has the rights</returns>
        </member>
        <member name="M:Core.Base.Common.GenerateFileStructure(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Generate file structure to XML
            </summary>
            <param name="node">Node to att files to</param>
            <param name="Path">Path responding to current node</param>
            <param name="mask">Masking for filetypes or filenames</param>
        </member>
        <member name="M:Core.Base.Common.MenuPath(System.Int32)">
            <summary>
            Get the search path from a specific page
            </summary>
            <param name="pageId">Id for the childpage to search from</param>
            <returns>List of pages index 0 is first childpage</returns>
        </member>
        <member name="M:Core.Base.Common.FixRoles">
            <summary>
            Set up the required roles
            </summary>
        </member>
        <member name="M:Core.Base.Common.CheckSign(System.String)">
            <summary>
            Check if user is loggedin
            </summary>
            <param name="sign">Sign string</param>
            <returns>Is user registerd in the last 20min</returns>
        </member>
        <member name="M:Core.Base.Common.CreateSign">
            <summary>
            Creates a new sign
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Base.Common.GetPageChildren(System.Int32,System.String,System.Int32)">
            <summary>
            List page children
            </summary>
            <param name="pId">Page Id to start from</param>
            <param name="orderBy"> </param>
            <param name="count"> </param>
            <returns>List of pages</returns>
        </member>
        <member name="M:Core.Base.Common.GetPageChildren(System.Int32[],System.String,System.Int32)">
            <summary>
            Get pages from multiple parents
            </summary>
            <param name="pIds">Page Id to start from</param>
            <param name="orderBy"> </param>
            <param name="count"> </param>
            <returns>List of pages</returns>
        </member>
        <member name="M:Core.Base.Common.GetChildIds(System.Int32[],System.String)">
            <summary>
            Get ids from multiple parents
            </summary>
            <param name="pIds"></param>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Base.Common.GetPageChildrenByTemplate(System.Int32,System.String)">
            <summary>
            List page children
            </summary>
            <param name="pId">Page Id to start from</param>
            <param name="page"> </param>
            <returns>List of pages</returns>
        </member>
        <member name="M:Core.Base.Common.GetPageChildrenByTemplate(System.Int32,System.String,System.String)">
            <summary>
            List page children
            </summary>
            <param name="pId">Page Id to start from</param>
            <param name="page"></param>
            <param name="orderBy"></param>
            <returns>List of pages</returns>
        </member>
        <member name="M:Core.Base.Common.GetLevel(System.Int32,System.Int32)">
            <summary>
            List page children
            </summary>
            <param name="pId">Page Id to start from</param>
            <returns>List of pages</returns>
        </member>
        <member name="M:Core.Base.Common.GetAllPages">
            <summary>
            List all pages on site
            </summary>
            <returns>List of pages</returns>
        </member>
        <member name="M:Core.Base.Common.IsSelected(System.Int32,System.Int32)">
            <summary>
            Checks if the page is selected
            </summary>
            <param name="currentPageId">Page Id for the top page in hirarcy</param>
            <param name="pageId">PageId for the page to check</param>
            <returns>If page is selected</returns>
        </member>
        <member name="M:Core.Base.Common.GetFakeIngress(System.String,System.Int32,System.String)">
            <summary>
            Finds the first part of the text, removes the html and returns it as plaintags
            </summary>
            <param name="html">The input text</param>
            <param name="len">maxlength of the returning string</param>
            <param name="addText">text to add at the end</param>
            <returns>Transformed string</returns>
        </member>
        <member name="M:Core.Base.Common.GetFakeIngress(System.String,System.Int32,System.String,System.String[])">
            <summary>
            Finds the first part of the text, removes the html and returns it as plaintags
            </summary>
            <param name="html">The input text</param>
            <param name="len">maxlength of the returning string</param>
            <param name="addText">text to add at the end</param>
            <param name="acceptableTags">tags that should be saved in the html, such as a or img</param>
            <returns>Transformed string</returns>
        </member>
        <member name="M:Core.Base.Common.IsValidEmailExtended(System.String)">
            <summary>
            Slower but more safe...
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Base.Common.GetAllTags">
            <summary>
            Returns all tags of published pages in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Base.Common.CheckIfSameLanguageNode(Core.Interfaces.ICustomPage,Core.Interfaces.ICustomPage)">
            <summary>
            Returns true if anyone of the pages isn't associated with a language
            </summary>
            <param name="cp1"></param>
            <param name="cp2"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Base.Common.CheckIfFileExists(System.String)">
            <summary>
            
            </summary>
            <param name="file">Relative file name</param>
            <returns></returns>
        </member>
        <member name="M:Core.Base.DynamicControl.Save">
            <summary>
            Saves the current row to the database
            </summary>
            <returns>Id value</returns>
        </member>
        <member name="M:Core.Base.Template.GetTemplates(System.Boolean)">
            <summary>
            Returns all templates the current user can access
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Base.FormFixingHtmlWriter.#ctor(System.IO.TextWriter,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sw"></param>
            <param name="newaction"></param>
        </member>
        <member name="T:Core.Base.CustomPage">
            <summary>
            The page class, holds all information about a page, including properties.
            </summary>
            <example>
            	<para>To fetch properties for page ?pId=13</para>
            	<code lang="CS">
            CustomPage cp = CustomPage.Get(13); 
                </code>
            </example>
            <remarks>This is the class to use for all Page actions.</remarks>
        </member>
        <member name="T:Core.Base.CustomPage.PageAction">
            <summary>
            Deligate for pageevents
            </summary>
            <param name="cp">Page event was fired from</param>
        </member>
        <member name="M:Core.Base.CustomPage.#ctor">
            <summary>
            Create a new page
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.FirstChildPage">
            <summary>
            The first, for the user, accessible child page, ordered by sortposition
            Will return whe first page even if it is hidden, it only respects requiredroles
            Returns it self if no childpages exists
            </summary>
        </member>
        <member name="M:Core.Base.CustomPage.#ctor(System.Data.IDataRecord)">
            <summary>
            Loads a page from DataRow
            </summary>
            <param name="myrow">Page datarow</param>
        </member>
        <member name="P:Core.Base.CustomPage.IsEditing">
            <summary>
            If page is in edit mode
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.PageLink">
            <summary>
            Href link to this page
            </summary>
            
        </member>
        <member name="P:Core.Base.CustomPage.LanguageId">
            <summary>
            Current language for this page
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.Relevance">
            <summary>
            Relevanse for this page, (just a tag)
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.Tag">
            <summary>
            Extra data used to pass f.ex. ActionDate
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.ParentPage">
            <summary>Dynamically loaded parent page</summary>
            <value>The Parent page as CustomPage</value>
            <example>
            	<para>To get the Title of parent page</para>
            	<code>Response.Write(CurrentPage.ParentPage.Title);</code>
            </example>
        </member>
        <member name="P:Core.Base.CustomPage.ParentPageId">
            <summary>
            Page parent PageId
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.CacheDomain">
            <summary>
            The domain for Total page Caching. change this in separate sections of webpage,
            like forums.
            </summary>
            <value>The current Cache domain</value>
        </member>
        <member name="P:Core.Base.CustomPage.PageId">
            <summary>
            Current PageId
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.PublishDate">
            <summary>
            Date when the page should be published
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.LastPublish">
            <summary>
            Last time the page is published
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.UnPublishDate">
            <summary>
            Date when the page should be unpublished
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.Edited">
            <summary>
            Indicates if the page has been modified and should have the properties reloaded
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.RequiredRole">
            <summary>
            Role required to view the page
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.Metadata">
            <summary>
            Metadata in head for search optimizing
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.Name">
            <summary>
            Name(Title) of the page
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.CreatedBy">
            <summary>
            User that created the page
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.Created">
            <summary>
            Date when the page was created
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.LastEdited">
            <summary>
            When the page was last edited
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.SortPosition">
            <summary>
            Sortposition in this level
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.EditRole">
            <summary>
            Role required for editing the page
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.PublishRole">
            <summary>
            Role required for publishing the page
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.Published">
            <summary>
            Indicated if the page is published
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.ReadyForPublish">
            <summary>
            Indicated if the page is ready to be published
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.EditedBy">
            <summary>
            Last user to edit the page
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.Hidden">
            <summary>
            Indicated if the page id hidden in the menu
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.Description">
            <summary>
            Page description, also used for the head - title
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.Page">
            <summary>Template to use for this page</summary>
            <value>Path to current template</value>
            <example>
            CurrentPage.Page = "/Default.aspx"
            </example>
        </member>
        <member name="P:Core.Base.CustomPage.MasterPage">
            <summary>Masterpage to use with this page</summary>
            <value>Current Masterpage name</value>
        </member>
        <member name="P:Core.Base.CustomPage.Theme">
            <summary>
            Theme that this page uses, if not supplited the default theme from config will be
            used
            </summary>
            <value>The current Theme</value>
        </member>
        <member name="P:Core.Base.CustomPage.CssTheme">
            <summary>
            CSS theme file
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.VirtualUrl">
            <summary>
            Virtual url for redirection
            </summary>
        </member>
        <member name="P:Core.Base.CustomPage.Item(System.String)">
            <summary>
            Direct access to the pageproperties, returns the value of the property, f.ex. for DataBindings (can't return null).
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Core.Base.CustomPage.Item(System.String,System.String)">
            <summary>
            Direct access to the pageproperties, returns the value of the property, f.ex. for DataBindings (can't return null).
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Base.CustomPage.PagesToBePublished(System.DateTime)">
            <summary>
            Find a specific property
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Base.CustomPage.PagesToBeUnPublished(System.DateTime)">
            <summary>
            Lists all pages that should be unpublished next time
            </summary>
            <param name="when">for date</param>
            <returns>PageId's</returns>
        </member>
        <member name="M:Core.Base.CustomPage.Publish(System.String)">
            <summary>
            Publishes the page
            </summary>
            <param name="ByUser">User that published tha page</param>
        </member>
        <member name="M:Core.Base.CustomPage.GetPropertyValue(System.String,System.String)">
            <summary>
            Gets a value from properties on the page, if the property does not exist, it returns a empty string
            </summary>
            <param name="prop">Propery name</param>
            <returns></returns>
        </member>
        <member name="M:Core.Base.CustomPage.GetPropertyValue(System.String)">
            <summary>
            Gets a value from properties on the page, if the property does not exist, it returns a empty string
            </summary>
            <param name="prop">Propery name</param>
            <returns></returns>
        </member>
        <member name="M:Core.Base.CustomPage.UpdatePropertyValue(System.String,System.String,System.Int32)">
            <summary>
            Updates a property on this page, and if the property does not exist it is created, and saved
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value to set</param>
            <param name="LangId">Language id</param>
        </member>
        <member name="M:Core.Base.CustomPage.UpdatePropertyValue(System.String,System.String,System.String,System.Int32)">
            <summary>
            Updates a property on this page, and if the property does not exist it is created, and saved
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value to set</param>
            <param name="LangId">Language id</param>
        </member>
        <member name="M:Core.Base.CustomPage.UpdatePropertyValueModify(System.String,System.String,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Use this if you dont want to trigger modify on page
            </summary>
            <param name="control"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="triggerModify"></param>
            <param name="username"></param>
            <param name="langId"></param>
        </member>
        <member name="M:Core.Base.CustomPage.UpdatePropertyValue(System.String,System.String,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Use this if you dont want to trigger history on page
            </summary>
            <param name="control"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="useHistory"></param>
            <param name="username"></param>
            <param name="langId"></param>
            <returns>True if value changed</returns>
        </member>
        <member name="M:Core.Base.CustomPage.Save">
            <summary>
            Store the page to database, and clear cache
            </summary>
            <returns>the Id for the saved field</returns>
        </member>
        <member name="M:Core.Base.CustomPage.GetPageDS(System.Int32)">
            <summary>
            Gets a page in DataSet format
            </summary>
            <param name="PageId">PageId</param>
            <returns>The page in DataSet</returns>
        </member>
        <member name="M:Core.Base.CustomPage.DeleteSubPages(System.Int32)">
            <summary>
            Deletes all the child pages
            </summary>
            <param name="PageId"></param>
        </member>
        <member name="M:Core.Base.CustomPage.Delete">
            <summary>
            Deletes a page and it's properties, and childnodes, but first thru the archive.
            </summary>
        </member>
        <member name="M:Core.Base.CustomPage.Delete(System.Boolean)">
            <summary>
            Overloaded delete function that can override the archive
            </summary>
            <param name="DoDelete">Delete directry</param>
        </member>
        <member name="M:Core.Base.CustomPage.ClearStaticPageCache(System.Int32)">
            <summary>
            Clear all static page cache for the selected language
            </summary>
            <param name="langId">Language id</param>
        </member>
        <member name="M:Core.Base.CustomPage.SortUp">
            <summary>
            Change sortorder
            </summary>
        </member>
        <member name="M:Core.Base.CustomPage.SortDown">
            <summary>
            Change sortorder
            </summary>
        </member>
        <member name="M:Core.Base.CustomPage.GetChildren">
            <summary>
            List all childpages
            </summary>
            <returns>List of child pages</returns>
        </member>
        <member name="M:Core.Base.CustomPage.GetAccessibleChildren">
            <summary>
            Get childpages that a user can access, and hides unpublished and hidden pages
            </summary>
            <returns>List of accessible childpages</returns>
        </member>
        <member name="M:Core.Base.CustomPage.TriggerVisit(System.Int32)">
            <summary>
            Trigger visit for page, use the webservice to trigger this async!
            </summary>
            <param name="pageId">PageId</param>
        </member>
        <member name="M:Core.Base.CustomPage.NoVisits">
            <summary>
            No cache, don't use if you don't have to!
            </summary>
        </member>
        <member name="M:Core.Base.CustomPage.GetChildren(System.String)">
            <summary>
            List all childpages
            </summary>
            <param name="sort">Sort by database column id</param>
            <returns></returns>
        </member>
        <member name="M:Core.Base.CustomPage.Copy(System.Int32,System.Boolean,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Makes a copy of the current page, and inherits the essensial properties
            </summary>
            <returns>The new page</returns>
        </member>
        <member name="T:Core.Base.Handlers.CacheFilter">
            <summary>
            Stream filter for pagecache
            </summary>
        </member>
        <member name="M:Core.Base.Handlers.CacheFilter.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes the stream to override a existing stream
            </summary>
            <param name="FilterStream">the Context.Response.Stream</param>
        </member>
        <member name="F:Core.Base.Handlers.CacheFilter.copy">
            <summary>
            The textstream to copy
            </summary>
        </member>
        <member name="F:Core.Base.Handlers.CacheFilter.PageLink">
            <summary>
            Stored pageid for this stream
            </summary>
        </member>
        <member name="M:Core.ResourceCache.Generate(System.String,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Generate a file path with a hashed query string of the file content.
             Tries to get generated file path if <paramref name="useCache"/> is enabled.
             </summary>
            
             <param name="file">File path to hash.</param>
             <param name="useCache">Store generated hashed file paths in cache.</param>
             <param name="cacheTime">Cache time to store hashed file path.</param>
        </member>
        <member name="M:Core.ResourceCache.ClearCache">
            <summary>
            Clear all cached hashed file paths.
            </summary>
        </member>
        <member name="M:Core.ResourceCache.ClearCache(System.String)">
            <summary>
            Clear a cached hashed file path.
            </summary>
            <param name="file">File path.</param>
        </member>
        <member name="M:Core.Controls.PageBase.T(System.String)">
            <summary>
            Translate static string to current language
            </summary>
            <param name="entry">XPath to langentry in xml</param>
            <returns>The translated string</returns>
        </member>
        <member name="M:Core.Controls.PageBase.TInt(System.String)">
            <summary>
            Tries to parse a translation string into a int, returns 0 if it fails.
            </summary>
            <param name="entry">translation name</param>
            <returns>int, 0 if it fails to parse</returns>
        </member>
        <member name="P:Core.Controls.PageBase.GlobalLanguageId">
            <summary>
            GlobalLanguageId set in a cookie
            </summary>
        </member>
        <member name="F:Core.Controls.PageService._CurrentPage">
            <summary>
            Information about the currentpage, like name, description, metadata
            </summary>
        </member>
        <member name="P:Core.Controls.PageService.CurrentPage">
            <summary>
            Holds information about the current page
            </summary>
        </member>
        <member name="T:Core.Controls.PageExtender">
            <summary>
            The pageextender, use this instead of System.Web.UI.Page to add functionality to the page
            </summary>
        </member>
        <member name="P:Core.Controls.PageExtender.MasterExtender">
            <summary>
            Link to the Master Page Extender, to get current page och default theme.
            </summary>
        </member>
        <member name="M:Core.Controls.PageExtender.OnPreInit(System.EventArgs)">
            <summary>
            Set up default settings for the page
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Core.Controls.FieldVisibilityDependency">
            <summary>
            Use to only show if other setting is true
            </summary>
        </member>
        <member name="M:Core.Controls.FieldVisibilityDependency.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName">propertyname of boolean in the same setting</param>
        </member>
        <member name="P:Core.Controls.FieldDefEventArgs.Data">
            <summary>
            May be null
            </summary>
        </member>
        <member name="E:Core.Controls.FieldDef.ValueChanged">
            <summary>
            Only viable to checkboxes and dropdownlists, remember set autopostback = true!
            </summary>
        </member>
        <member name="F:Core.Controls.Upload.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Controls.Upload.exStatus">
            <summary>
            exStatus control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Controls.Upload.exFileup">
            <summary>
            exFileup control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Controls.Upload.bUpload">
            <summary>
            bUpload control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Controls.AdminDefault.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Controls.AdminDefault.username">
            <summary>
            username control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Controls.AdminDefault.password">
            <summary>
            password control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Controls.AdminDefault.bLogin">
            <summary>
            bLogin control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Controls.AdminDefault.FailureText">
            <summary>
            FailureText control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.Controls.AdminDefault.lblostpassword">
            <summary>
            lblostpassword control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:Core.Controls.MasterPageExtenderV2">
            <summary>
            Masterpage extender, use this to extend the functions of a regular MasterPage
            </summary>
        </member>
        <member name="P:Core.Controls.MasterPageExtenderV2.PageId">
            <summary>
            Current PageId
            </summary>
        </member>
        <member name="M:Core.Controls.WebControlExtender.T(System.String)">
            <summary>
            Translate static string to current language
            </summary>
            <param name="entry">XPath to langentry in xml</param>
            <returns>The translated string</returns>
        </member>
        <member name="M:Core.Controls.WebControlExtender.TInt(System.String)">
            <summary>
            Tries to parse a translation string into a int, returns 0 if it fails.
            </summary>
            <param name="entry">translation name</param>
            <returns>int, 0 if it fails to parse</returns>
        </member>
        <member name="T:Core.Controls.form">
            <summary>
            The replacement form, to use when a virtual url is doing a postback
            </summary>
        </member>
        <member name="M:Core.Controls.UserControlExtender.T(System.String)">
            <summary>
            Translate static string to current language
            </summary>
            <param name="entry">XPath to langentry in xml</param>
            <returns>The translated string</returns>
        </member>
        <member name="M:Core.Controls.UserControlExtender.TInt(System.String)">
            <summary>
            Tries to parse a translation string into a int, returns 0 if it fails.
            </summary>
            <param name="entry">translation name</param>
            <returns>int, 0 if it fails to parse</returns>
        </member>
        <member name="T:Core.Controls.MasterPageExtender">
            <summary>
            Masterpage extender, use this to extend the functions of a regular MasterPage
            </summary>
        </member>
        <member name="P:Core.Controls.MasterPageExtender.PageId">
            <summary>
            Current PageId
            </summary>
        </member>
        <member name="P:Core.Controls.MasterPageExtender.CurrentPage">
            <summary>
            Holds information about the current page
            </summary>
        </member>
        <member name="P:Core.Controls.MasterPageExtender.XmlLang">
            <summary>
            lang for the html-tag
            </summary>
        </member>
        <member name="M:Core.Controls.MasterPageExtender.T(System.String)">
            <summary>
            Translate static string to current language
            </summary>
            <param name="entry">XPath to langentry in xml</param>
            <returns>The translated string</returns>
        </member>
        <member name="M:Core.Controls.MasterPageExtender.TInt(System.String)">
            <summary>
            Tries to parse a translation string into a int, returns 0 if it fails.
            </summary>
            <param name="entry">translation name</param>
            <returns>int, 0 if it fails to parse</returns>
        </member>
        <member name="P:Core.Controls.MasterPageExtender.GlobalLanguageId">
            <summary>
            GlobalLanguageId set in a cookie
            </summary>
        </member>
        <member name="T:Core.Controls.OldPageExtender">
            <summary>
            The pageextender, use this instead of System.Web.UI.Page to add functionality to the page
            </summary>
        </member>
        <member name="P:Core.Controls.OldPageExtender.MasterExtender">
            <summary>
            Link to the Master Page Extender, to get current page och default theme.
            </summary>
        </member>
        <member name="M:Core.Controls.OldPageExtender.T(System.String)">
            <summary>
            Translate static string to current language
            </summary>
            <param name="entry">XPath to langentry in xml</param>
            <returns>The translated string</returns>
        </member>
        <member name="M:Core.Controls.OldPageExtender.TInt(System.String)">
            <summary>
            Tries to parse a translation string into a int, returns 0 if it fails.
            </summary>
            <param name="entry">translation name</param>
            <returns>int, 0 if it fails to parse</returns>
        </member>
        <member name="P:Core.Controls.OldPageExtender.GlobalLanguageId">
            <summary>
            GlobalLanguageId set in a cookie
            </summary>
        </member>
        <member name="P:Core.Controls.OldPageExtender.InEditMode">
            <summary>
            Checks if editmode is available
            </summary>
        </member>
        <member name="F:Core.Controls.OldPageExtender._CurrentPage">
            <summary>
            Information about the currentpage, like name, description, metadata
            </summary>
        </member>
        <member name="P:Core.Controls.OldPageExtender.CurrentPage">
            <summary>
            Holds information about the current page
            </summary>
        </member>
        <member name="M:Core.Controls.OldPageExtender.OnPreInit(System.EventArgs)">
            <summary>
            Set up default settings for the page
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Core.GlobalSearch.IndexedDbBase">
            <summary>
            An indexed <see cref="T:Core.Interfaces.GlobalSearch.ISearchable"/> <see cref="T:Core.DAL.dbBase"/> that will update the global search index on save and delete.
            </summary>
        </member>
        <member name="P:Core.GlobalSearch.IndexedDbBase.IndexedId">
            <summary>
            Indexed id for this instance. Used by global search index fetchers.
            </summary>
            <seealso cref="T:Core.Interfaces.GlobalSearch.ISearchFetcher`1"/>
        </member>
        <member name="M:Core.GlobalSearch.IndexedDbBase.AddUpdateToIndex">
            <summary>
            Add or update this instance to the global search index.
            </summary>
        </member>
        <member name="M:Core.GlobalSearch.IndexedDbBase.RemoveFromIndex">
            <summary>
            Remove this instance from the global search index.
            </summary>
        </member>
        <member name="M:Core.GlobalSearch.Search.Add(System.Collections.Generic.IEnumerable{Core.Interfaces.GlobalSearch.ISearchable},System.Type,System.String)">
            <summary>
            Add searchable items to a new or existing search index.
            </summary>
            <param name="items">Items to add to a new search index.</param>
            <param name="type">The type of the <see cref="T:Core.Interfaces.GlobalSearch.ISearchable"/> type.</param>
            <param name="otherName">Specify an other name than the type name for the index identifier.</param>
        </member>
        <member name="M:Core.GlobalSearch.Search.Add(Core.Interfaces.GlobalSearch.ISearchable,System.Type,System.String)">
            <summary>
            Add a searchable item to a new or existing search index.
            </summary>
            <param name="item">Item to add to a new or existing search index.</param>
            <param name="type">The type of the <see cref="T:Core.Interfaces.GlobalSearch.ISearchable"/> type.</param>
            <param name="otherName">Specify an other name than the type name for the index identifier.</param>
        </member>
        <member name="M:Core.GlobalSearch.Search.Add``1(System.Collections.Generic.IEnumerable{Core.Interfaces.GlobalSearch.ISearchable},System.String)">
            <summary>
            Add searchable items to a new or existing search index.
            </summary>
            <typeparam name="T">The type of searchable item to add. The name of this type will be the index identifier.</typeparam>
            <param name="items">Items to add to a new search index.</param>
            <param name="otherName">Specify an other name than the type name for the index identifier.</param>
        </member>
        <member name="M:Core.GlobalSearch.Search.Add``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Cast and add searchable items to a new search index.
            </summary>
            <typeparam name="T">The type of searchable item to add. The name of this type will be the index identifier.</typeparam>
            <param name="items">Items to add to a new search index.</param>
            <param name="otherName">Specify an other name than the type name for the index identifier.</param>
        </member>
        <member name="M:Core.GlobalSearch.Search.Add``1(Core.DAL.TypeHolder{Core.Interfaces.GlobalSearch.ISearchable})">
            <summary>
            Add a <see cref="T:Core.DAL.TypeHolder`1"/> with searchable items to a new search index.
            </summary>
            <typeparam name="T">The type of searchable item to add. The name of this type will be the index identifier.</typeparam>
            <param name="item"><see cref="T:Core.DAL.TypeHolder`1"/> with items to add to a new search index.</param>
        </member>
        <member name="M:Core.GlobalSearch.Search.Add``1(Core.DAL.TypeHolder{``0})">
            <summary>
            Cast and add a <see cref="T:Core.DAL.TypeHolder`1"/> with searchable items to a new search index.
            </summary>
            <typeparam name="T">The type of searchable item to add. The name of this type will be the index identifier.</typeparam>
            <param name="item"><see cref="T:Core.DAL.TypeHolder`1"/> with items to add to a new search index.</param>
        </member>
        <member name="M:Core.GlobalSearch.Search.Add``1(``0,System.String)">
            <summary>
            Add a searchable item to a new or existing search index.
            </summary>
            <typeparam name="T">The type of the searchable item to add. The name of this type will be the index identifier.</typeparam>
            <param name="item">Item to add to a new or existing search index.</param>
            <param name="otherName">Specify an other name than the type name for the index identifier.</param>
        </member>
        <member name="M:Core.GlobalSearch.Search.Add(Core.Interfaces.GlobalSearch.ISearchable,System.String)">
            <summary>
            Add a searchable item to a new or existing search index.
            </summary>
            <param name="item">Item to add to a new or existing search index.</param>
            <param name="otherName">Specify an other name than the type name for the index identifier.</param>
        </member>
        <member name="M:Core.GlobalSearch.Search.Remove``1(System.Int32,System.String)">
            <summary>
            Remove an added item from its search index.
            </summary>
            <typeparam name="T">The type of searchable item to remove. The name of this type will be the index identifier.</typeparam>
            <param name="id">The <see cref="P:Core.Interfaces.GlobalSearch.ISearchable.IndexedId"/> of the item to remove.</param>
            <param name="otherName">Specify an other name than the type name for the index identifier.</param>
        </member>
        <member name="M:Core.GlobalSearch.Search.Remove(System.Int32,System.Type,System.String)">
            <summary>
            Remove an added item from its search index.
            </summary>
            <param name="id">The <see cref="P:Core.Interfaces.GlobalSearch.ISearchable.IndexedId"/> of the item to remove.</param>
            <param name="type"></param>
            <param name="otherName">Specify an other name than the type name for the index identifier.</param>
        </member>
        <member name="M:Core.GlobalSearch.Search.ClearAll">
            <summary>
            Clear all search indices.
            </summary>
            <returns>true if succesful.</returns>
        </member>
        <member name="M:Core.GlobalSearch.Search.Clear``1(System.String)">
            <summary>
            Clear a specific index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Specify an other name than the type name for the index identifier.</param>
            <returns>true if succesful.</returns>
        </member>
        <member name="M:Core.GlobalSearch.Search.Find(System.String,Core.GlobalSearch.SearchParams)">
            <summary>
            Search all existing indices with given search term.
            </summary>
            <param name="term">Search term.</param>
            <param name="param">Optional search parameters.</param>
            <returns>A list of found search results from each index.</returns>
        </member>
        <member name="M:Core.GlobalSearch.Search.Find``1(System.String,System.String,Core.GlobalSearch.SearchParams)">
            <summary>
            Search a single index with given search term.
            </summary>
            <typeparam name="T">The type of searchable item(s) to find. The name of this type will be the index identifier.</typeparam>
            <param name="term">Search term.</param>
            <param name="otherName">Specify an other name than the type name for the index identifier.</param>
            <param name="param">Optional search parameters.</param>
            <returns>A list of searchable items.</returns>
        </member>
        <member name="M:Core.GlobalSearch.Search.GetInfo">
            <summary>
            Get information about each search index.
            </summary>
        </member>
        <member name="P:Core.Handlers.NoRightsEventArgs.ReturnUrl">
            <summary>
            Return url that will be included in redirect-url
            </summary>
        </member>
        <member name="P:Core.Handlers.NoRightsEventArgs.RedirectUrl">
            <summary>
            If set the user will be redirected to this Url. Don't add ReturnUrl yourself, if you do, make sure to empty property ReturnUrl
            </summary>
        </member>
        <member name="E:Core.Handlers.GlobalEventHandler.GetRolesForUser">
            <summary>
            To fetch custom roles for user. Roles in eventargs is returned
            </summary>
        </member>
        <member name="E:Core.Handlers.GlobalEventHandler.SecureDirectoryListing">
            <summary>
            The result is cached!
            </summary>
        </member>
        <member name="M:Core.Handlers.GlobalEventHandler.OnFileDelete(System.String)">
            <summary>
            Returns the cancelevent
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Handlers.OSResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Core.Handlers.OSResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Core.Handlers.OSResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Core.Handlers.OSResource.AdminDefault_ShowInfo_">
            <summary>
              Looks up a localized string similar to &lt;div class=&quot;error info nobind&quot;&gt;.
            </summary>
        </member>
        <member name="P:Core.Handlers.OSResource.OSDescription">
             <summary>
               Looks up a localized string similar to &lt;OpenSearchDescription xmlns=&quot;http://a9.com/-/spec/opensearch/1.1/&quot;&gt;
            &lt;ShortName&gt;{0}&lt;/ShortName&gt;
            &lt;Description&gt;{1}&lt;/Description&gt;
            &lt;Tags&gt;example site search&lt;/Tags&gt;
            {5}
            &lt;Contact&gt;{2}&lt;/Contact&gt;
            &lt;Url type=&quot;application/rss+xml&quot; template=&quot;{3}/search.rss?q={{searchTerms}}&amp;amp;pw={{startPage?}}&amp;amp;format=rss&quot;/&gt;
            &lt;Url type=&quot;text/html&quot; template=&quot;{4}?q={{searchTerms}}&amp;amp;pw={{startPage?}}&amp;amp;format=html&quot;/&gt;
             &lt;/OpenSearchDescription&gt;.
             </summary>
        </member>
        <member name="P:Core.Handlers.OSResource.OSHtml">
             <summary>
               Looks up a localized string similar to &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
            &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
            &lt;head&gt;&lt;title&gt;
            	{0}
            &lt;/title&gt;
            &lt;style type=&quot;text/css&quot;&gt;
                    body, html, form
                    {{
                        margin: 0;
                        padding: 0;
                        width: 100%;
                        font: 11px Arial;
                    }}
            	body
            	{{
            		background-image:url(/admin/bg.gif);
            background-position:0px 80px;
            background-repeat:repeat-x;
            	}}
                    h2
                [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="F:Core.Handlers.VirtualThemeProvider.VirtualThemeDirectory._directories">
            <summary>
            Stores the directories that exist in the theme and global directories.
            </summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:Core.Handlers.VirtualThemeProvider.VirtualThemeDirectory._files">
            <summary>
            Stores the files that exist in the theme and global directories.
            </summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:Core.Handlers.VirtualThemeProvider.VirtualThemeDirectory._children">
            <summary>
            Stores the files and directories that exist in the theme and global directories.
            </summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:Core.Handlers.ScriptHandlerFactory">
            <summary>
            A web service handler factory that discovers what external assembly, file or factory to use.
            </summary>
        </member>
        <member name="M:Core.Handlers.ScriptHandlerFactory.GetServiceType(System.String)">
            <summary>
            Searches all Services and tries to find a class with the specified name
            </summary>
        </member>
        <member name="F:Core.Handlers.ScriptHandlerFactory._ajaxAssembly">
            <summary>
            Use one of the visible attributes in the assembly to get a reference to the "System.Web.Extentions" Library.
            </summary>
        </member>
        <member name="M:Core.Handlers.ScriptHandlerFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            Checks the request type and returns the corresponding httpd handler or factory
            </summary>
        </member>
        <member name="M:Core.Handlers.ScriptHandlerFactory.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            Release the handler in the used factory
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Core.Handlers.ScriptHandlerFactoryAsmx.GetServiceType(System.String)">
            <summary>
            Searches all Services and tries to find a class with the specified name
            </summary>
        </member>
        <member name="F:Core.Handlers.ScriptHandlerFactoryAsmx._ajaxAssembly">
            <summary>
            Use one of the visible attributes in the assembly to get a reference to the "System.Web.Extentions" Library.
            </summary>
        </member>
        <member name="M:Core.Handlers.ScriptHandlerFactoryAsmx.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            Checks the request type and returns the corresponding httpd handler or factory
            </summary>
        </member>
        <member name="M:Core.Handlers.ScriptHandlerFactoryAsmx.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            Release the handler in the used factory
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:Core.Handlers.JavascriptProxyHandler">
            <summary>
            A custom handler to deliver the generated Javascript.
            </summary>
        </member>
        <member name="P:Core.Helpers.Country.CurrencyCode">
            <summary>
            Enligt ISO 4217
            http://www.xe.com/iso4217.php
            </summary>
        </member>
        <member name="M:Core.Helpers.JsDataTableHelper.Helper.HandleResult(System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{Core.Helpers.JsDataTableHelper.Column},System.Collections.Generic.IList{Core.Helpers.JsDataTableHelper.SortColumn},System.Int32,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Tar inte hänsyn till regex än!
            </summary>
            <param name="lst"></param>
            <param name="columns"></param>
            <param name="sortOrder"></param>
            <param name="iDisplayStart"></param>
            <param name="iDisplayLength"></param>
            <param name="sSearch"></param>
            <param name="bRegex"></param>
            <param name="sEcho"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Helpers.NVelocityHelper.GenerateFromTemplate(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="templateFolder">Must be relative, eg. ~/App_Data/mailtemplates</param>
            <param name="templateName"></param>
            <param name="masterTemplateName"></param>
            <param name="hostUrl"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Helpers.NVelocityHelper.GenerateFromTemplate(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="templateFolder">Must be relative, eg. ~/App_Data/mailtemplates</param>
            <param name="templateName"></param>
            <param name="masterTemplateName"></param>
            <param name="hostUrl">will be auto set if empty</param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Helpers.ValueList.Sort(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="order">New order, only keys</param>
            <returns></returns>
        </member>
        <member name="M:Core.Helpers.SimpleListItem.Sort(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="order">New order, only keys</param>
            <returns></returns>
        </member>
        <member name="M:Core.Helpers.GZipResponse.IsGZipSupported">
            <summary>
            Determines if GZip is supported
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Helpers.StopWords.GetWords(Core.Base.Language)">
            <summary>
            Returns stopwords for language. If language is null it returns default stopwords (swe)
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Helpers.StopWords.GetWordsAsString(Core.Base.Language)">
            <summary>
            Returns stopwords for language as a comma separated list. If language is null it returns default stopwords (swe)
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Indexing.FileIndexerHelper.AddFolderToWatch(System.String,System.Boolean)">
            <summary>
            Returns true if added (if not added it already exists)
            </summary>
            <param name="relativePath"></param>
            <param name="parseSubFolder"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Indexing.LuceneSuggestion.SuggestTermsFor(System.String)">
            <summary>
            Returns suggestions-word (auto complete= for supplied word
            </summary>
            <param name="word">Word to generate suggestions from</param>
            <returns></returns>
        </member>
        <member name="M:Core.Indexing.LuceneSuggestion.SuggestTerms(System.String)">
            <summary>
            Returns suggestions-word (auto complete= for supplied word
            Same as the non-static method SuggestTermsFor
            </summary>
            <param name="word">Word to generate suggestions from</param>
            <returns></returns>
        </member>
        <member name="P:Core.Indexing.IndexedDocumentUpdatedEventArgs.ApplicationName">
            <summary>
            This is empty if it is the main application that updates
            </summary>
        </member>
        <member name="P:Core.Indexing.IndexedDocumentDeletedEventArgs.ApplicationName">
            <summary>
            This is empty if it is the main application that updates
            </summary>
        </member>
        <member name="E:Core.Indexing.Indexer.PageUpdated">
            <summary>
            A page is added or updated
            </summary>
        </member>
        <member name="E:Core.Indexing.Indexer.DocumentUpdated">
            <summary>
            Handles all types of document changes
            </summary>
        </member>
        <member name="E:Core.Indexing.Indexer.DocumentDeleted">
            <summary>
            Handles all types of deleted changes
            </summary>
        </member>
        <member name="P:Core.Indexing.Indexer.ProcessedPages">
            <summary>
            Returns how many pages that's been processed by the rebuilding thread
            Returns 0 if IsRebuilding is false
            </summary>
        </member>
        <member name="P:Core.Indexing.Indexer.TotalPages">
            <summary>
            Returns how many pages that's going to be processed by the rebuildning thread
            Returns 0 if IsRebuilding is false
            </summary>
        </member>
        <member name="P:Core.Indexing.Indexer.ProcessedFiles">
            <summary>
            Returns how many files that's been processed by the rebuilding thread
            Returns 0 if IsRebuilding is false
            </summary>
        </member>
        <member name="P:Core.Indexing.Indexer.TotalDocuments">
            <summary>
            Returns 0 if IsRebuilding is true
            </summary>
        </member>
        <member name="M:Core.Indexing.Indexer.ExecuteCommand">
            <summary>
            Only use if you know what you're doing :)
            </summary>
        </member>
        <member name="M:Core.Indexing.Indexer.UpdatePage(Core.Base.CustomPage)">
            <summary>
            Adds or updates page in index
            </summary>
            <param name="p">Page to index</param>
        </member>
        <member name="M:Core.Indexing.Indexer.DeletePage(System.Int32)">
            <summary>
            Deletes page from index
            </summary>
            <param name="id">id to delete</param>
        </member>
        <member name="M:Core.Indexing.Indexer.ClearCache">
            <summary>
            Clears search cache
            </summary>
        </member>
        <member name="T:Core.Indexing.RebuildThread">
            <summary>
            This is only to use by the system
            </summary>
        </member>
        <member name="M:Core.License.LicenseHelper.AddLicense(System.Int32)">
            TODO: Fixa riktig logik här
            
        </member>
        <member name="F:Core.Modules.EmporiHttpModule.CachedStream">
            <summary>
            The stream that is going to be saved in the cache
            </summary>
        </member>
        <member name="M:Core.Modules.Forms.ExportToExcel(System.Boolean)">
            <summary>
            Exports all forms
            </summary>
            <param name="printSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Modules.Forms.OutputToResponse(System.Web.HttpResponse,System.IO.MemoryStream,System.String)">
            <summary>
            Outputs the excelfile to the user (response) and ends the response.
            </summary>
            <param name="response">Current HttpResponse</param>
            <param name="stream">The Excel-file as a stream</param>
            <param name="filename">name of the file, usually export.xls</param>
        </member>
        <member name="M:Core.Modules.Forms.MoveNodesToCorrectParentNode">
            <summary>
            Finds form entries thats been placed in wrong parentnode.
            </summary>
        </member>
        <member name="M:Core.Feeds.Cavagent.ProductFeed.LoadFromUrl(System.String)">
            <summary>
            returns empty object if rss-fetching failed
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="P:Core.Feeds.Feed.Copyright">
            <summary>
            rights field in Atom, copyright in RSS
            </summary>
        </member>
        <member name="P:Core.Feeds.Feed.Updated">
            <summary>
            Updated field in Atom, LastBuildField in RSS
            </summary>
        </member>
        <member name="P:Core.Feeds.Feed.Description">
            <summary>
            subtitle in Atom, description in RSS
            </summary>
        </member>
        <member name="M:Core.Feeds.Feed.LoadFeed(System.String)">
            <summary>
            Doesn't use cache
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Feeds.Feed.GetFeed(System.String)">
            <summary>
            Using Cache
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="P:Core.Feeds.FeedItem.PublishDate">
            <summary>
            Publishdate in RSS and published in Atom
            </summary>
        </member>
        <member name="T:Core.Security.MySqlCoreMembership7Cache">
            <summary>
            MembershipProvider for cache and default roles and users
            </summary>
        </member>
        <member name="T:Core.Security.MySqlCoreRoles7Cache">
            <summary>
            Roleprovider for cacheability and default rights and roles
            </summary>
        </member>
        <member name="P:Core.Security.MySqlCoreRoles7Cache.ApplicationName">
            <summary>
            Overridden applicationname set to the sitename in WebDoc/Site
            </summary>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles7Cache.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Overridden for cache
            </summary>
            <param name="usernames">see SqlRoleProvider</param>
            <param name="roleNames">see SqlRoleProvider</param>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles7Cache.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Overridden for cache
            </summary>
            <param name="usernames">see SqlRoleProvider</param>
            <param name="roleNames">see SqlRoleProvider</param>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles7Cache.GetRolesForUser(System.String)">
            <summary>
            Overridden for cache
            </summary>
            <param name="username">see SqlRoleProvider</param>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles7Cache.GetAllRoles">
            <summary>
            Overridden for cache
            </summary>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles7Cache.IsUserInRole(System.String,System.String)">
            <summary>
            Overridden for cache
            </summary>
            <param name="username">see SqlRoleProvider</param>
            <param name="roleName">see SqlRoleProvider</param>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="T:Core.Security.ADMembership">
            <summary>
            MembershipProvider for cache and default roles and users
            </summary>
        </member>
        <member name="T:Core.Security.ADRoles">
            <summary>
            Roleprovider for cacheability and default rights and roles
            </summary>
        </member>
        <member name="P:Core.Security.ADRoles.ApplicationName">
            <summary>
            Overridden applicationname set to the sitename in WebDoc/Site
            </summary>
        </member>
        <member name="M:Core.Security.ADRoles.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Overridden for cache
            </summary>
            <param name="usernames">see SqlRoleProvider</param>
            <param name="roleNames">see SqlRoleProvider</param>
        </member>
        <member name="M:Core.Security.ADRoles.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Overridden for cache
            </summary>
            <param name="usernames">see SqlRoleProvider</param>
            <param name="roleNames">see SqlRoleProvider</param>
        </member>
        <member name="M:Core.Security.ADRoles.GetRolesForUser(System.String)">
            <summary>
            Overridden for cache
            </summary>
            <param name="username">see SqlRoleProvider</param>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="M:Core.Security.ADRoles.GetAllRoles">
            <summary>
            Overridden for cache
            </summary>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="M:Core.Security.ADRoles.IsUserInRole(System.String,System.String)">
            <summary>
            Overridden for cache
            </summary>
            <param name="username">see SqlRoleProvider</param>
            <param name="roleName">see SqlRoleProvider</param>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="T:Core.Security.MySqlCoreMembership7">
            <summary>
            MembershipProvider for cache and default roles and users
            </summary>
        </member>
        <member name="T:Core.Security.MySqlCoreRoles7">
            <summary>
            Roleprovider for cacheability and default rights and roles
            </summary>
        </member>
        <member name="P:Core.Security.MySqlCoreRoles7.ApplicationName">
            <summary>
            Overridden applicationname set to the sitename in WebDoc/Site
            </summary>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles7.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Overridden for cache
            </summary>
            <param name="usernames">see SqlRoleProvider</param>
            <param name="roleNames">see SqlRoleProvider</param>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles7.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Overridden for cache
            </summary>
            <param name="usernames">see SqlRoleProvider</param>
            <param name="roleNames">see SqlRoleProvider</param>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles7.GetRolesForUser(System.String)">
            <summary>
            Overridden for cache
            </summary>
            <param name="username">see SqlRoleProvider</param>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles7.GetAllRoles">
            <summary>
            Overridden for cache
            </summary>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles7.IsUserInRole(System.String,System.String)">
            <summary>
            Overridden for cache
            </summary>
            <param name="username">see SqlRoleProvider</param>
            <param name="roleName">see SqlRoleProvider</param>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="T:Core.Security.MySqlCoreRoles">
            <summary>
            Roleprovider for cacheability and default rights and roles
            </summary>
        </member>
        <member name="P:Core.Security.MySqlCoreRoles.ApplicationName">
            <summary>
            Overridden applicationname set to the sitename in WebDoc/Site
            </summary>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Overridden for cache
            </summary>
            <param name="usernames">see SqlRoleProvider</param>
            <param name="roleNames">see SqlRoleProvider</param>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Overridden for cache
            </summary>
            <param name="usernames">see SqlRoleProvider</param>
            <param name="roleNames">see SqlRoleProvider</param>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles.GetRolesForUser(System.String)">
            <summary>
            Overridden for cache
            </summary>
            <param name="username">see SqlRoleProvider</param>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles.GetAllRoles">
            <summary>
            Overridden for cache
            </summary>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="M:Core.Security.MySqlCoreRoles.IsUserInRole(System.String,System.String)">
            <summary>
            Overridden for cache
            </summary>
            <param name="username">see SqlRoleProvider</param>
            <param name="roleName">see SqlRoleProvider</param>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="T:Core.Security.MySqlCoreMembership">
            <summary>
            MembershipProvider for cache and default roles and users
            </summary>
        </member>
        <member name="T:Core.Security.CoreMembership">
            <summary>
            MembershipProvider for cache and default roles and users
            </summary>
        </member>
        <member name="T:Core.Security.CoreRoles">
            <summary>
            Roleprovider for cacheability and default rights and roles
            </summary>
        </member>
        <member name="P:Core.Security.CoreRoles.ApplicationName">
            <summary>
            Overridden applicationname set to the sitename in WebDoc/Site
            </summary>
        </member>
        <member name="M:Core.Security.CoreRoles.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Overridden for cache
            </summary>
            <param name="usernames">see SqlRoleProvider</param>
            <param name="roleNames">see SqlRoleProvider</param>
        </member>
        <member name="M:Core.Security.CoreRoles.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Overridden for cache
            </summary>
            <param name="usernames">see SqlRoleProvider</param>
            <param name="roleNames">see SqlRoleProvider</param>
        </member>
        <member name="M:Core.Security.CoreRoles.GetRolesForUser(System.String)">
            <summary>
            Overridden for cache
            </summary>
            <param name="username">see SqlRoleProvider</param>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="M:Core.Security.CoreRoles.GetAllRoles">
            <summary>
            Overridden for cache
            </summary>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="M:Core.Security.CoreRoles.IsUserInRole(System.String,System.String)">
            <summary>
            Overridden for cache
            </summary>
            <param name="username">see SqlRoleProvider</param>
            <param name="roleName">see SqlRoleProvider</param>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="T:Core.Security.CoreSmsRoles">
            <summary>
            Roleprovider for cacheability and default rights and roles
            </summary>
        </member>
        <member name="M:Core.Security.CoreSmsRoles.GetRolesForUser(System.String)">
            <summary>
            Overridden for cache
            </summary>
            <param name="username">see SqlRoleProvider</param>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="M:Core.Security.CoreMySqlSmsRoles.GetRolesForUser(System.String)">
            <summary>
            Overridden for cache
            </summary>
            <param name="username">see SqlRoleProvider</param>
            <returns>see SqlRoleProvider</returns>
        </member>
        <member name="F:Core.ControlPanelPage.leftchooser.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Core.ControlPanelPage.leftchooser.menu">
            <summary>
            menu control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="M:Core.CustomDataSource.CustomDataSource.DeserializeObject(System.String,System.Type)">
            <summary>
            Method to reconstruct an Object from XML string
            </summary>
            <param name="pXmlizedString"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Cache">
            <summary>
            Cache class for handling caching of item frequently used
            </summary>
        </member>
        <member name="M:Core.Cache.Request``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan})">
            <summary>
            Get or add a cached object if not found.
            </summary>
            <typeparam name="T">Type of cached object.</typeparam>
            <param name="key">Key of cached object.</param>
            <param name="addCallback">Called when key is not found in cache. Returned value will be added to cache with given key.</param>
            <param name="life">Lifetime of new cached object or <see cref="F:Core.Cache.DefaultLife"/> if none is given.</param>
            <returns>Cached object.</returns>
        </member>
        <member name="M:Core.Cache.Request``1(System.String,System.String,System.Func{``0},System.TimeSpan,System.TimeSpan)">
            <summary>
            Get or add a cached object if not found.
            </summary>
            <typeparam name="T">Type of cached object.</typeparam>
            <param name="namespc">Namespace for cached object.</param>
            <param name="key">Key of cached object.</param>
            <param name="addCallback">Called when key in namespace is not found in cache. Returned value will be added to cache with given key.</param>
            <param name="life">Lifetime of new cached object.</param>
            <param name="lifeCache">Expire time for redis.</param>
            <returns>Cached object.</returns>
        </member>
        <member name="T:Core.Plugin.Loader">
            <summary>
            Plugin loader, and handler
            </summary>
        </member>
        <member name="M:Core.Plugin.Loader.LoadType``1">
            <summary>
            Load plugins by type
            </summary>
            <typeparam name="IType">The type to load</typeparam>
            <returns>List of existing types</returns>
        </member>
        <member name="M:Core.Plugin.Loader.LoadType``1(System.String)">
            <summary>
            Load a specific plugin, by name
            </summary>
            <typeparam name="IType">Type to find</typeparam>
            <param name="targetAttr">Name of specific plugin, set by attribute PluginName</param>
            <returns></returns>
        </member>
        <member name="M:Core.Plugin.Loader.ListType``1">
            <summary>
            </summary>
            <typeparam name="IType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Core.Plugin.Loader.ListTypeFromAll``1">
            <summary>
            </summary>
            <typeparam name="IType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Core.Logger.AddLine``1(System.Exception,System.String,System.String,System.Int32)">
            <typeparam name="T">Type name for log file</typeparam>
            <param name="ex">Exception to log</param>
            <param name="callerName">Is automatically given by <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/></param>
            <param name="sourceFilePath">Is automatically given by <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/></param>
            <param name="sourceLineNumber">Is automatically given by <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute"/></param>
        </member>
        <member name="M:Core.Logger.AddLine``1(System.String,Core.LogType,System.String,System.String,System.Int32)">
            <typeparam name="T">Type name for log file</typeparam>
            <param name="message">Message to log</param>
            <param name="logType">Log severity</param>
            <param name="callerName">Is automatically given by <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/></param>
            <param name="sourceFilePath">Is automatically given by <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/></param>
            <param name="sourceLineNumber">Is automatically given by <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute"/></param>
        </member>
        <member name="M:Core.Mail.MailSetting.GenerateMail(System.Net.Mail.MailAddress,System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            
            </summary>
            <param name="to"></param>
            <param name="baseUrl">Will be set auto set if it is empty</param>
            <param name="languageId"></param>
            <param name="objects"></param>
            <param name="addBaseUrlToLinks">If links that starts with / should be prepended with the baseUrl </param>
            <returns></returns>
        </member>
        <member name="T:Core.OnPageEditor.DefaultEditor">
            <summary>
            </summary>
        </member>
        <member name="M:Core.OnPageEditor.DefaultEditor.RegisterControl(System.Web.UI.Control)">
            <summary>
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Core.OnPageEditor.DefaultEditor.JavaScriptReturn">
            *
        </member>
        <member name="M:Core.PropertyHandler.PropertyHandler.SetDesignProperties(System.Web.UI.Control,System.String,Core.Interfaces.IDesignProperties)">
            <summary>
            Set proteries to a control from database
            </summary>
            <param name="control">Control to set properties to</param>
            <param name="PageProperties">Properties that contain information about the control</param>
            <param name="EditMode">The properties for editmode or viewmode</param>
        </member>
        <member name="M:Core.PropertyHandler.PropertyHandler.SetPropertiesToControls(System.Web.UI.ControlCollection,Core.Interfaces.IDesignProperties)">
            <summary>
            Recrusive set properties to controls
            </summary>
            <param name="Editor">The current editor</param>
            <param name="c">Control collection to start from</param>
            <param name="PageProperties">Properties for the current section</param>
            <param name="EditMode">In edit mode or not?</param>
        </member>
        <member name="T:Core.PdfGen.pdfgen">
            <remarks/>
        </member>
        <member name="M:Core.PdfGen.pdfgen.#ctor">
            <remarks/>
        </member>
        <member name="E:Core.PdfGen.pdfgen.GetPDFFromHtmlCompleted">
            <remarks/>
        </member>
        <member name="E:Core.PdfGen.pdfgen.SendPDFFromHtmlCompleted">
            <remarks/>
        </member>
        <member name="E:Core.PdfGen.pdfgen.GetPDFFromUrlCompleted">
            <remarks/>
        </member>
        <member name="M:Core.PdfGen.pdfgen.GetPDFFromHtml(System.String)">
            <remarks/>
        </member>
        <member name="M:Core.PdfGen.pdfgen.GetPDFFromHtmlAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Core.PdfGen.pdfgen.GetPDFFromHtmlAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.PdfGen.pdfgen.SendPDFFromHtml(System.String,System.String,System.String,System.String,System.String,System.String[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.PdfGen.pdfgen.SendPDFFromHtmlAsync(System.String,System.String,System.String,System.String,System.String,System.String[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.PdfGen.pdfgen.SendPDFFromHtmlAsync(System.String,System.String,System.String,System.String,System.String,System.String[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.PdfGen.pdfgen.GetPDFFromUrl(System.String)">
            <remarks/>
        </member>
        <member name="M:Core.PdfGen.pdfgen.GetPDFFromUrlAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Core.PdfGen.pdfgen.GetPDFFromUrlAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.PdfGen.pdfgen.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:Core.PdfGen.GetPDFFromHtmlCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.PdfGen.GetPDFFromHtmlCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.PdfGen.GetPDFFromHtmlCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.PdfGen.SendPDFFromHtmlCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.PdfGen.SendPDFFromHtmlCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.PdfGen.SendPDFFromHtmlCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.PdfGen.GetPDFFromUrlCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.PdfGen.GetPDFFromUrlCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.PdfGen.GetPDFFromUrlCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="M:Core.SSO.EncryptionHelper.Encrypt(System.String)">
            <summary>
            Encrypts a string 
            </summary>
            <param name="input">encrypted string</param>
            <returns>decrypted string</returns>
        </member>
        <member name="M:Core.SSO.EncryptionHelper.Decrypt(System.String)">
            <summary>
            Decrypts a string 
            </summary>
            <param name="input">encrypted string</param>
            <returns>decrypted string</returns>
        </member>
        <member name="M:Core.SSO.SSOServerHandler.GetTicket(System.String)">
            <summary>
            Gets ticketinformation about specified ticket
            </summary>
            <param name="ticketGuid">ticket from PreValidate function</param>
            <returns>Complete ticketinformation</returns>
        </member>
        <member name="M:Core.SSO.SSOServerHandler.ValidateTicket(System.String)">
            <summary>
            Performs a validation of a ticket
            </summary>
            <param name="ticketGuid">ticket from PreValidate function</param>
        </member>
        <member name="M:Core.SSO.SSOServerHandler.LoginByTicket(System.String)">
            <summary>
            Performs a validation and login using formsauthentication
            </summary>
            <param name="ticketGuid">ticket from PreValidate function</param>
        </member>
        <member name="M:Core.SSO.SSOServerHandler.PreValidateEncrypted(System.String,System.String)">
            <summary>
            Validates username and encrypted password and creates a ticket for use with SSO
            </summary>
            <param name="username">username to validate</param>
            <param name="encryptedPassword">enqrypted password</param>
            <returns></returns>
        </member>
        <member name="M:Core.SSO.SSOServerHandler.PreValidate(System.String,System.String)">
            <summary>
            Validates username and creates a ticket for use with SSO
            </summary>
            <param name="username">username</param>
            <param name="decryptedPassword">password in readable format</param>
            <returns></returns>
        </member>
        <member name="P:Core.Threading.SimpleLongRunningProcess.Instance">
            <summary>
            Use singleton, must return the same instance every time
            </summary>
        </member>
        <member name="M:Core.Threading.ThreadRunner.Start">
            <summary>
            Starts 
            </summary>
        </member>
        <member name="M:Core.Threading.ThreadRunner.Abort(System.Boolean)">
            <summary>
            Cancels all the threads...
            </summary>
            <param name="isDisposed">if true it won't trigger OnAborted</param>
        </member>
        <member name="M:Core.Threading.ThreadRunner.Dispose">
            <summary>
            Almoste the same as Abort, but it won't trigger Aborted
            </summary>
        </member>
        <member name="M:Core.Tools.MailFetcher.MailFetchRunner.Run">
            <summary>
            
            </summary>
            <returns>true if started</returns>
        </member>
        <member name="M:Core.Tools.RssFetcher.RssFetchRunner.Run">
            <summary>
            
            </summary>
            <returns>true if started</returns>
        </member>
        <member name="M:Core.Tools.RssFetcher.RssFetchRunner.ParseRssFeed(System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Parses a given feed and creates pages of all items, please use events PagePublish and PageCreated for extra work on items
            </summary>
            <param name="feedUrl"></param>
            <param name="parentPageId"></param>
            <param name="template"></param>
            <param name="publishUser"></param>
            <param name="autoPublish"></param>
            <param name="cleanHtml"></param>
            <returns>number of new pages</returns>
        </member>
        <member name="P:Core.Tools.BrokenLinks.BrokenLinkRunner.LatestResultsNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Core.Tools.BrokenLinks.BrokenLinkRunner.ParsedPages">
            <summary>
            Is only valid when IsRunning is true
            </summary>
        </member>
        <member name="P:Core.Tools.BrokenLinks.BrokenLinkRunner.TotalPages">
            <summary>
            Is only valid when IsRunning is true
            </summary>
        </member>
        <member name="P:Core.Tools.BrokenLinks.BrokenLinkRunner.BrokenLinks">
            <summary>
            Is only valid when IsRunning is true
            </summary>
        </member>
        <member name="P:Core.Tools.BrokenLinks.BrokenLinkRunner.Progress">
            <summary>
            Is only valid when IsRunning is true
            </summary>
        </member>
        <member name="T:Core.LicenseServer.Service">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.#ctor">
            <remarks/>
        </member>
        <member name="E:Core.LicenseServer.Service.RegisterSiteCompleted">
            <remarks/>
        </member>
        <member name="E:Core.LicenseServer.Service.RegisterFolderSizeCompleted">
            <remarks/>
        </member>
        <member name="E:Core.LicenseServer.Service.RegisterUserCountsCompleted">
            <remarks/>
        </member>
        <member name="E:Core.LicenseServer.Service.RegisterModulesCompleted">
            <remarks/>
        </member>
        <member name="E:Core.LicenseServer.Service.RegisterModuleCompleted">
            <remarks/>
        </member>
        <member name="E:Core.LicenseServer.Service.AddSystemTranslationCompleted">
            <remarks/>
        </member>
        <member name="E:Core.LicenseServer.Service.AddUserTranslationCompleted">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterSite(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterSiteAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterSiteAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterFolderSize(System.String,System.String,System.Double)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterFolderSizeAsync(System.String,System.String,System.Double)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterFolderSizeAsync(System.String,System.String,System.Double,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterUserCounts(System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterUserCountsAsync(System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterUserCountsAsync(System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterModules(System.String,System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterModulesAsync(System.String,System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterModulesAsync(System.String,System.String,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterModule(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterModuleAsync(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.RegisterModuleAsync(System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.AddSystemTranslation(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.AddSystemTranslationAsync(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.AddSystemTranslationAsync(System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.AddUserTranslation(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.AddUserTranslationAsync(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.AddUserTranslationAsync(System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.LicenseServer.Service.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.LicenseResult">
            <remarks/>
        </member>
        <member name="P:Core.LicenseServer.LicenseResult.SiteId">
            <remarks/>
        </member>
        <member name="P:Core.LicenseServer.LicenseResult.SecretKey">
            <remarks/>
        </member>
        <member name="P:Core.LicenseServer.LicenseResult.AdminName">
            <remarks/>
        </member>
        <member name="P:Core.LicenseServer.LicenseResult.AdminPass">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.RegisterSiteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.RegisterSiteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.LicenseServer.RegisterSiteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.RegisterFolderSizeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.RegisterFolderSizeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.LicenseServer.RegisterFolderSizeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.RegisterUserCountsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.RegisterUserCountsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.LicenseServer.RegisterUserCountsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.RegisterModulesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.RegisterModulesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.LicenseServer.RegisterModulesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.RegisterModuleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.RegisterModuleCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.LicenseServer.RegisterModuleCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.AddSystemTranslationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.AddUserTranslationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.LicenseServer.AddUserTranslationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.LicenseServer.AddUserTranslationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.SiteAdmin">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.#ctor">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.AddSiteCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.AddSite2Completed">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.AddSite3Completed">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.AddSiteWithFTPCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.AddSiteWithFTP2Completed">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.DeleteSiteCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.DeleteSiteByNameCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.GetAllSitesCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.GetAllSites2Completed">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.GetRequestedSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.GetSiteCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.GetSite2Completed">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.GetSitesForServerCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.GetSitesForServer2Completed">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.GetSiteStatusCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.MoveSiteCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.MoveSite2Completed">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.SetRequestedSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.UpdateSiteCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.UpdateSite2Completed">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsAdmin.SiteAdmin.UpdateSite3Completed">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSite(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSiteAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSiteAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSite2(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSite2Async(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSite2Async(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSite3(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,Core.SmarterStatsAdmin.ConfigLogLocation[],System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSite3Async(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,Core.SmarterStatsAdmin.ConfigLogLocation[],System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSite3Async(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,Core.SmarterStatsAdmin.ConfigLogLocation[],System.String,System.Int32,System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSiteWithFTP(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSiteWithFTPAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSiteWithFTPAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSiteWithFTP2(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSiteWithFTP2Async(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.AddSiteWithFTP2Async(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.DeleteSite(System.String,System.String,System.Int32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.DeleteSiteAsync(System.String,System.String,System.Int32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.DeleteSiteAsync(System.String,System.String,System.Int32,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.DeleteSiteByName(System.String,System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.DeleteSiteByNameAsync(System.String,System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.DeleteSiteByNameAsync(System.String,System.String,System.String,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetAllSites(System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetAllSitesAsync(System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetAllSitesAsync(System.String,System.String,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetAllSites2(System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetAllSites2Async(System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetAllSites2Async(System.String,System.String,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetRequestedSettings(System.String,System.String,System.Int32,System.String[],System.String[]@)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetRequestedSettingsAsync(System.String,System.String,System.Int32,System.String[])">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetRequestedSettingsAsync(System.String,System.String,System.Int32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSite(System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSiteAsync(System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSiteAsync(System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSite2(System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSite2Async(System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSite2Async(System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSitesForServer(System.String,System.String,System.Int32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSitesForServerAsync(System.String,System.String,System.Int32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSitesForServerAsync(System.String,System.String,System.Int32,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSitesForServer2(System.String,System.String,System.Int32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSitesForServer2Async(System.String,System.String,System.Int32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSitesForServer2Async(System.String,System.String,System.Int32,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSiteStatus(System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSiteStatusAsync(System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.GetSiteStatusAsync(System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.MoveSite(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.MoveSiteAsync(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.MoveSiteAsync(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.MoveSite2(System.String,System.String,System.Int32,System.Int32,System.String,Core.SmarterStatsAdmin.ConfigLogLocation[],System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.MoveSite2Async(System.String,System.String,System.Int32,System.Int32,System.String,Core.SmarterStatsAdmin.ConfigLogLocation[],System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.MoveSite2Async(System.String,System.String,System.Int32,System.Int32,System.String,Core.SmarterStatsAdmin.ConfigLogLocation[],System.String,System.String,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.SetRequestedSettings(System.String,System.String,System.Int32,System.String[])">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.SetRequestedSettingsAsync(System.String,System.String,System.Int32,System.String[])">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.SetRequestedSettingsAsync(System.String,System.String,System.Int32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.UpdateSite(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.UpdateSiteAsync(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.UpdateSiteAsync(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.UpdateSite2(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.UpdateSite2Async(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.UpdateSite2Async(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.UpdateSite3(System.String,System.String,System.Int32,System.String,System.String,Core.SmarterStatsAdmin.ConfigLogLocation[],System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.UpdateSite3Async(System.String,System.String,System.Int32,System.String,System.String,Core.SmarterStatsAdmin.ConfigLogLocation[],System.String,System.Int32,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.UpdateSite3Async(System.String,System.String,System.Int32,System.String,System.String,Core.SmarterStatsAdmin.ConfigLogLocation[],System.String,System.Int32,System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsAdmin.SiteAdmin.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GenericResult">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.GenericResult.Result">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.GenericResult.ResultCode">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.GenericResult.Message">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.SiteSettingInfoResult">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfoResult.Result">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfoResult.ResultCode">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfoResult.Message">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfoResult.Site">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.SiteSettingInfo">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ServerID">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.SiteID">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.DomainName">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.LogFormat">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.SmarterLogDirectory">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.SmarterLogMonthsBeforeDelete">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ExportPath">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ExportPathURL">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.TimeZoneIndex">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.LogLocations">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.SiteStatus">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_Enabled">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_Server">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_port">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_Username">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_Password">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_Interval">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_Directory">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_LogWildcard">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_LogMaxDays">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_ProxyType">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_ProxyAddress">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_ProxyPort">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_ProxyUsername">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfo.ftp_ProxyPassword">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.ConfigLogLocation">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.ConfigLogLocation.LocationGuid">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.ConfigLogLocation.FileWildcard">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.ConfigLogLocation.MaxDays">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.ConfigLogLocation.IncludeArchiveFiles">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.ConfigLogLocation.FilePath">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.SiteInfoResult">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfoResult.Result">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfoResult.ResultCode">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfoResult.Message">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfoResult.Site">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.SiteInfo">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ServerID">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.SiteID">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.DomainName">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.LogDirectory">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.LogFormat">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.LogWildcard">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.LogDaysBeforeDelete">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.SmarterLogDirectory">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.SmarterLogMonthsBeforeDelete">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ExportPath">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ExportPathURL">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.TimeZoneIndex">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.SiteStatus">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ftp_Enabled">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ftp_Server">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ftp_port">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ftp_Username">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ftp_Password">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ftp_Interval">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ftp_Directory">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ftp_ProxyType">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ftp_ProxyAddress">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ftp_ProxyPort">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ftp_ProxyUsername">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfo.ftp_ProxyPassword">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.SiteSettingInfoArrayResult">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfoArrayResult.Result">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfoArrayResult.ResultCode">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfoArrayResult.Message">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteSettingInfoArrayResult.Sites">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.SiteInfoArrayResult">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfoArrayResult.Result">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfoArrayResult.ResultCode">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfoArrayResult.Message">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SiteInfoArrayResult.Sites">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.AddSiteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.AddSiteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.AddSiteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.AddSite2CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.AddSite2CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.AddSite2CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.AddSite3CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.AddSite3CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.AddSite3CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.AddSiteWithFTPCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.AddSiteWithFTPCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.AddSiteWithFTPCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.AddSiteWithFTP2CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.AddSiteWithFTP2CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.AddSiteWithFTP2CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.DeleteSiteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.DeleteSiteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.DeleteSiteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.DeleteSiteByNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.DeleteSiteByNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.DeleteSiteByNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetAllSitesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetAllSitesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.GetAllSitesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetAllSites2CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetAllSites2CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.GetAllSites2CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetRequestedSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetRequestedSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.GetRequestedSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.GetRequestedSettingsCompletedEventArgs.values">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetSiteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetSiteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.GetSiteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetSite2CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetSite2CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.GetSite2CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetSitesForServerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetSitesForServerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.GetSitesForServerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetSitesForServer2CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetSitesForServer2CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.GetSitesForServer2CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetSiteStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.GetSiteStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.GetSiteStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.MoveSiteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.MoveSiteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.MoveSiteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.MoveSite2CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.MoveSite2CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.MoveSite2CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.SetRequestedSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.SetRequestedSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.SetRequestedSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.UpdateSiteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.UpdateSiteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.UpdateSiteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.UpdateSite2CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.UpdateSite2CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.UpdateSite2CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.UpdateSite3CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsAdmin.UpdateSite3CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsAdmin.UpdateSite3CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.Statistics">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.#ctor">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsStatistics.Statistics.GetActivityForServerCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsStatistics.Statistics.GetActivityForSiteCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsStatistics.Statistics.GetActivityForSiteGroupedCompleted">
            <remarks/>
        </member>
        <member name="E:Core.SmarterStatsStatistics.Statistics.GetVisitsForSiteCompleted">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.GetActivityForServer(System.String,System.String,System.Int32,System.DateTime,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.GetActivityForServerAsync(System.String,System.String,System.Int32,System.DateTime,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.GetActivityForServerAsync(System.String,System.String,System.Int32,System.DateTime,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.GetActivityForSite(System.String,System.String,System.Int32,System.DateTime,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.GetActivityForSiteAsync(System.String,System.String,System.Int32,System.DateTime,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.GetActivityForSiteAsync(System.String,System.String,System.Int32,System.DateTime,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.GetActivityForSiteGrouped(System.String,System.String,System.Int32,System.DateTime,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.GetActivityForSiteGroupedAsync(System.String,System.String,System.Int32,System.DateTime,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.GetActivityForSiteGroupedAsync(System.String,System.String,System.Int32,System.DateTime,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.GetVisitsForSite(System.String,System.String,System.Int32,System.DateTime,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.GetVisitsForSiteAsync(System.String,System.String,System.Int32,System.DateTime,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.GetVisitsForSiteAsync(System.String,System.String,System.Int32,System.DateTime,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.SmarterStatsStatistics.Statistics.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.ActivityResultGroup">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityResultGroup.Result">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityResultGroup.ResultCode">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityResultGroup.Items">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityResultGroup.Message">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.ActivityResult">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityResult.SiteID">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityResult.SiteName">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityResult.Hits">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityResult.Views">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityResult.Visits">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityResult.BandwidthBytes">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityResult.RawBandwidthBytes">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.VisitsItem">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.VisitsItem.Date">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.VisitsItem.SiteID">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.VisitsItem.SiteName">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.VisitsItem.Visits">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.VisitsItem.UniqueVisits">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.VisitsItem.NewVisits">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.VisitsItem.ReturningVisits">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.VisitsItemResult">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.VisitsItemResult.Result">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.VisitsItemResult.ResultCode">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.VisitsItemResult.Message">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.VisitsItemResult.Items">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.ActivityItem">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityItem.Date">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityItem.SiteID">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityItem.SiteName">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityItem.Hits">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityItem.Views">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityItem.Visits">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityItem.BandwidthBytes">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityItem.RawBandwidthBytes">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.ActivityItemResult">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityItemResult.Result">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityItemResult.ResultCode">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityItemResult.Items">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.ActivityItemResult.Message">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.GetActivityForServerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.GetActivityForServerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.GetActivityForServerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.GetActivityForSiteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.GetActivityForSiteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.GetActivityForSiteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.GetActivityForSiteGroupedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.GetActivityForSiteGroupedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.GetActivityForSiteGroupedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.GetVisitsForSiteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.SmarterStatsStatistics.GetVisitsForSiteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.SmarterStatsStatistics.GetVisitsForSiteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Core.WebServices.DataTableHelper">
            <summary>
            Common AJAX functions
            </summary>
        </member>
        <member name="M:Core.WebServices.jsTreeRef.ConvertStart(Core.Base.CustomPage,System.Boolean)">
            <summary></summary>
            <param name="pcp"></param>
            <returns></returns>
        </member>
        <member name="T:Core.WebServices.Map">
            <summary>
            Summary description for WebService
            </summary>
        </member>
        <member name="M:Core.WebServices.Map.#ctor">
            <summary>
            Initializes this control
            </summary>
        </member>
        <member name="T:Core.WebServices.Admin">
            <summary>
            Summary description for WebService
            </summary>
        </member>
        <member name="T:Core.WebServices.Dashboard">
            <summary>
            Dashboard AJAX functions
            </summary>
        </member>
        <member name="T:Core.WebServices.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.ActivePages">
            <summary>
              Looks up a localized string similar to Aktiva sidor.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.Archive">
            <summary>
              Looks up a localized string similar to Arkiv.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.ClearArchive">
            <summary>
              Looks up a localized string similar to Töm.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.ClearImgCache">
            <summary>
              Looks up a localized string similar to Rensa omskalade bilder.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.Close">
            <summary>
              Looks up a localized string similar to Stäng.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.CreateDir">
            <summary>
              Looks up a localized string similar to Skapa ny katalog.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.Edit">
            <summary>
              Looks up a localized string similar to Edit mode.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.EditIcon">
            <summary>
              Looks up a localized string similar to Egenskaps ikon.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fCheck">
            <summary>
              Looks up a localized string similar to Kontrollera om filen används.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fDelete">
            <summary>
              Looks up a localized string similar to Radera.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fDownload">
            <summary>
              Looks up a localized string similar to Ladda ner.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fEdit">
            <summary>
              Looks up a localized string similar to Redigera.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fFileInfo">
            <summary>
              Looks up a localized string similar to Filinformation.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fHeight">
            <summary>
              Looks up a localized string similar to Höjd:.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.FileDelete">
            <summary>
              Looks up a localized string similar to Radera filer.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.FileUpload">
            <summary>
              Looks up a localized string similar to Ladda upp.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fImgProp">
            <summary>
              Looks up a localized string similar to Bildegenskaper.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fOpen">
            <summary>
              Looks up a localized string similar to Öppna.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fProp">
            <summary>
              Looks up a localized string similar to Egenskaper.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fReadonly">
            <summary>
              Looks up a localized string similar to Filen är skrivskyddad.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fSize">
            <summary>
              Looks up a localized string similar to Storlek:.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fUploadTime">
            <summary>
              Looks up a localized string similar to Uppladdad:.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fUse">
            <summary>
              Looks up a localized string similar to Använd.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.fWidth">
            <summary>
              Looks up a localized string similar to Bredd:.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.hCrop">
            <summary>
              Looks up a localized string similar to Beskärning.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.hImageUrl">
            <summary>
              Looks up a localized string similar to Bildkälla.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.hLink">
            <summary>
              Looks up a localized string similar to HTTP länk.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.hOther">
            <summary>
              Looks up a localized string similar to Övrigt.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.hProp">
            <summary>
              Looks up a localized string similar to Egenskap.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.hRot">
            <summary>
              Looks up a localized string similar to Rotation.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.hSh">
            <summary>
              Looks up a localized string similar to Storlek höjd.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.hSw">
            <summary>
              Looks up a localized string similar to Storlek bredd.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.hTags">
            <summary>
              Looks up a localized string similar to Taggar.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.hText">
            <summary>
              Looks up a localized string similar to Text.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.hTime">
            <summary>
              Looks up a localized string similar to Tidpunkt.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.hUser">
            <summary>
              Looks up a localized string similar to Användare.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.hValue">
            <summary>
              Looks up a localized string similar to Värde.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.Languages">
            <summary>
              Looks up a localized string similar to Språk.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.Logout">
            <summary>
              Looks up a localized string similar to Logga ut.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.NextPage">
            <summary>
              Looks up a localized string similar to Nästa sida.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.NoProps">
            <summary>
              Looks up a localized string similar to Inga egenskaper.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.PageProperties">
            <summary>
              Looks up a localized string similar to Sid egenskaper.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.PrevFolder">
            <summary>
              Looks up a localized string similar to Föregående mapp.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.Preview">
            <summary>
              Looks up a localized string similar to Preview mode.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.PrevPage">
            <summary>
              Looks up a localized string similar to Föregående sida.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.Settings">
            <summary>
              Looks up a localized string similar to Inställningar.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.ToggleFC">
            <summary>
              Looks up a localized string similar to Göm verktygsfältet.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.UploadImagesUrl">
            <summary>
              Looks up a localized string similar to Ladda hem bilder från Url.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.UploadUrl">
            <summary>
              Looks up a localized string similar to Ladda hem fil från Url.
            </summary>
        </member>
        <member name="P:Core.WebServices.Resources.UseCache">
            <summary>
              Looks up a localized string similar to Använd ej bild cachen.
            </summary>
        </member>
        <member name="T:Core.WebServices.Common">
            <summary>
            Common AJAX functions
            </summary>
        </member>
        <member name="M:Core.WebServices.Common.S(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Searches the index for pages
            </summary>
            <param name="query">string to search for</param>
            <param name="page">page of hits to return</param>
            <returns></returns>
        </member>
        <member name="M:Core.WebServices.Common.SearchPaged(System.String,System.Int32,System.Int32)">
            <summary>
            Searches the index for pages
            </summary>
            <param name="query">string to search for</param>
            <param name="page">page of hits to return</param>
            <param name="nohits">number of this to return</param>
            <returns></returns>
        </member>
        <member name="T:Core.Requirements.CommonResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Core.Requirements.CommonResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Core.Requirements.CommonResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Core.Requirements.CommonResource.CookieInfo">
            <summary>
              Looks up a localized string similar to Här kommer info om cookies.
            </summary>
        </member>
        <member name="P:Core.Requirements.CommonResource.Cookies">
            <summary>
              Looks up a localized string similar to Cookies.
            </summary>
        </member>
        <member name="P:Core.Requirements.CommonResource.FailText">
            <summary>
              Looks up a localized string similar to Din inloggning misslyckades&lt;br/&gt;Var god försök igen.
            </summary>
        </member>
        <member name="P:Core.Requirements.CommonResource.Password">
            <summary>
              Looks up a localized string similar to Lösenord.
            </summary>
        </member>
        <member name="P:Core.Requirements.CommonResource.Username">
            <summary>
              Looks up a localized string similar to Användarnamn.
            </summary>
        </member>
        <member name="T:Core.Viewstate.CacheViewState">
            <summary>
            Class for handling server viewstate
            </summary>
        </member>
        <member name="M:Core.OAuth.OAuthConsumer.GetOAuthRequestToken(System.String,System.String,System.String,System.String,System.String,Core.OAuth.SignatureMethod)">
            <summary>
            Step 1 of the oAuth protocol process
            Make a request with the provider for a <see cref="T:Core.OAuth.RequestToken"/>
            </summary>
            <param name="requestTokenEndpoint">The url (as per the provider) to use for making a requet for a token</param>
            <param name="realm">Typically the url of Your "application" or website</param>
            <param name="consumerKey">The Consumer Key given to you by the provider</param>
            <param name="consumerSecret">The Consumer Secret given to you by the provider</param>
            <param name="callback">The url you'd like the provider to call you back on</param>
            <param name="signatureMethod">defaults to HMAC-SHA1 - the only signature method currently supported</param>
            <returns>An instance of a <see cref="T:Core.OAuth.RequestToken" /> class</returns>
        </member>
        <member name="M:Core.OAuth.OAuthConsumer.GetOAuthAccessToken(System.String,System.String,System.String,System.String,System.String,System.String,System.String,Core.OAuth.SignatureMethod)">
            <summary>
            Step 3 of the oAuth protocol process
            Make a request on the provider to Exchange a <see cref="!:RequesToken"/> for an <see cref="T:Core.OAuth.AccessToken"/>
            (Step 2 is a simple redirect and so there is no method for it in this class)
            </summary>
            <param name="accessTokenEndpoint">The url (as per the provider) to use for making a requet to Exchange a request token for an access token</param>
            <param name="realm">Typically the url of Your "application" or website</param>
            <param name="consumerKey">The Consumer Key given to you by the provider</param>
            <param name="consumerSecret">The Consumer Secret given to you by the provider</param>
            <param name="token">The token you got at the end of Step 1 or Step 2</param>
            <param name="verifier">The verifier you got at the end of step 2</param>
            <param name="tokenSecret">The tokenSecret you got at the end of step 1</param>
            <param name="signatureMethod">defaults to HMAC-SHA1 - the only signature method currently supported</param>
            <returns>An instance of a <see cref="T:Core.OAuth.AccessToken"/> class</returns>
        </member>
        <member name="T:Core.smsgateway.Sms">
            <remarks/>
        </member>
        <member name="M:Core.smsgateway.Sms.#ctor">
            <remarks/>
        </member>
        <member name="E:Core.smsgateway.Sms.SendSmsCompleted">
            <remarks/>
        </member>
        <member name="M:Core.smsgateway.Sms.SendSms(System.String[],System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.smsgateway.Sms.SendSmsAsync(System.String[],System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Core.smsgateway.Sms.SendSmsAsync(System.String[],System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Core.smsgateway.Sms.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:Core.smsgateway.SendSmsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Core.smsgateway.SendSmsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Core.smsgateway.SendSmsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Lucene.Net.Search.Similar.MoreLikeThis">
            <summary> Generate "more like this" similarity queries. 
            Based on this mail:
            <pre>
            Lucene does let you access the document frequency of terms, with IndexReader.DocFreq().
            Term frequencies can be computed by re-tokenizing the text, which, for a single document,
            is usually fast enough.  But looking up the DocFreq() of every term in the document is
            probably too slow.
            
            You can use some heuristics to prune the set of terms, to avoid calling DocFreq() too much,
            or at all.  Since you're trying to maximize a tf*idf score, you're probably most interested
            in terms with a high tf. Choosing a tf threshold even as low as two or three will radically
            reduce the number of terms under consideration.  Another heuristic is that terms with a
            high idf (i.e., a low df) tend to be longer.  So you could threshold the terms by the
            number of characters, not selecting anything less than, e.g., six or seven characters.
            With these sorts of heuristics you can usually find small set of, e.g., ten or fewer terms
            that do a pretty good job of characterizing a document.
            
            It all depends on what you're trying to do.  If you're trying to eek out that last percent
            of precision and recall regardless of computational difficulty so that you can win a TREC
            competition, then the techniques I mention above are useless.  But if you're trying to
            provide a "more like this" button on a search results page that does a decent job and has
            good performance, such techniques might be useful.
            
            An efficient, effective "more-like-this" query generator would be a great contribution, if
            anyone's interested.  I'd imagine that it would take a Reader or a String (the document's
            text), analyzer Analyzer, and return a set of representative terms using heuristics like those
            above.  The frequency and length thresholds could be parameters, etc.
            
            Doug
            </pre>
            
            <h3>Initial Usage</h3>
            
            This class has lots of options to try to make it efficient and flexible.
            See the body of <see cref="!:Main"/> below in the source for real code, or
            if you want pseudo code, the simplest possible usage is as follows. The bold
            fragment is specific to this class.
            
            <pre>
            
            IndexReader ir = ...
            IndexSearcher is = ...
            <b>
            MoreLikeThis mlt = new MoreLikeThis(ir);
            Reader target = ... </b><em>// orig source of doc you want to find similarities to</em><b>
            Query query = mlt.Like( target);
            </b>
            Hits hits = is.Search(query);
            <em>// now the usual iteration thru 'hits' - the only thing to watch for is to make sure
            you ignore the doc if it matches your 'target' document, as it should be similar to itself </em>
            
            </pre>
            
            Thus you:
            <ol>
            <li> do your normal, Lucene setup for searching,</li>
            <li> create a MoreLikeThis,</li>
            <li> get the text of the doc you want to find similarities to</li>
            <li> then call one of the Like() calls to generate a similarity query</li>
            <li> call the searcher to find the similar docs</li>
            </ol>
            
            <h3>More Advanced Usage</h3>
            
            You may want to use <see cref="M:Lucene.Net.Search.Similar.MoreLikeThis.SetFieldNames(System.String[])"/> so you can examine
            multiple fields (e.g. body and title) for similarity.
            Depending on the size of your index and the size and makeup of your documents you
            may want to call the other set methods to control how the similarity queries are
            generated:
            <ul>
            <li> <see cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MinTermFreq"/> </li>
            <li> <see cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MinDocFreq"/> </li>
            <li> <see cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxDocFreq"/></li>
            <li> <see cref="M:Lucene.Net.Search.Similar.MoreLikeThis.SetMaxDocFreqPct(System.Int32)"/></li>
            <li> <see cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MinWordLen"/> </li>
            <li> <see cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxWordLen"/></li>
            <li> <see cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxQueryTerms"/></li>
            <li> <see cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxNumTokensParsed"/></li>
            <li> <see cref="M:Lucene.Net.Search.Similar.MoreLikeThis.SetStopWords(System.Collections.Generic.ISet{System.String})"/> </li>
            </ul> 
            
            <hr/>
            <pre>
            Changes: Mark Harwood 29/02/04
            Some bugfixing, some refactoring, some optimization.
            - bugfix: retrieveTerms(int docNum) was not working for indexes without a termvector -added missing code
            - bugfix: No significant terms being created for fields with a termvector - because 
            was only counting one occurrence per term/field pair in calculations(ie not including frequency info from TermVector) 
            - refactor: moved common code into isNoiseWord()
            - optimize: when no termvector support available - used maxNumTermsParsed to limit amount of tokenization
            </pre>
            </summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED">
            <summary> Default maximum number of tokens to parse in each example doc field that is not stored with TermVector support.</summary>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxNumTokensParsed">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_ANALYZER">
            <summary> Default analyzer to parse source doc with.</summary>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.Analyzer">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MIN_TERM_FREQ">
            <summary> Ignore terms with less than this frequency in the source doc.</summary>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MinTermFreq">
            </seealso>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MinTermFreq">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MIN_DOC_FREQ">
            <summary> Ignore words which do not occur in at least this many docs.</summary>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MinDocFreq">
            </seealso>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MinDocFreq">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MAX_DOC_FREQ">
            <summary>
            Ignore words wich occur in more than this many docs
            </summary>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxDocFreq"/>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxDocFreq"/>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_BOOST">
            <summary> Boost terms in query based on score.</summary>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.Boost">
            </seealso>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.Boost">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_FIELD_NAMES">
            <summary> Default field names. Null is used to specify that the field names should be looked
            up at runtime from the provided reader.
            </summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MIN_WORD_LENGTH">
            <summary> Ignore words less than this length or if 0 then this has no effect.</summary>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MinWordLen">
            </seealso>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MinWordLen">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MAX_WORD_LENGTH">
            <summary> Ignore words greater than this length or if 0 then this has no effect.</summary>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxWordLen">
            </seealso>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxWordLen">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_STOP_WORDS">
            <summary> Default set of stopwords.
            If null means to allow stop words.
            
            </summary>
            <seealso cref="M:Lucene.Net.Search.Similar.MoreLikeThis.SetStopWords(System.Collections.Generic.ISet{System.String})">
            </seealso>
            <seealso cref="M:Lucene.Net.Search.Similar.MoreLikeThis.GetStopWords">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.stopWords">
            <summary> Current set of stop words.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MAX_QUERY_TERMS">
            <summary> Return a Query with no more than this many terms.
            
            </summary>
            <seealso cref="P:Lucene.Net.Search.BooleanQuery.MaxClauseCount">
            </seealso>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxQueryTerms">
            </seealso>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxQueryTerms">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.analyzer">
            <summary> Analyzer that will be used to parse the doc.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.minTermFreq">
            <summary> Ignore words less frequent that this.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.minDocFreq">
            <summary> Ignore words which do not occur in at least this many docs.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.maxDocfreq">
            <summary>
            Ignore words which occur in more than this many docs.
            </summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.boost">
            <summary> Should we apply a boost to the Query based on the scores?</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.fieldNames">
            <summary> Field name we'll analyze.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.maxNumTokensParsed">
            <summary> The maximum number of tokens to parse in each example doc field that is not stored with TermVector support</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.minWordLen">
            <summary> Ignore words if less than this len.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.maxWordLen">
            <summary> Ignore words if greater than this len.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.maxQueryTerms">
            <summary> Don't return a query longer than this.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.similarity">
            <summary> For idf() calculations.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.ir">
            <summary> IndexReader to use</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.boostFactor">
            <summary> Boost factor to use when boosting the terms </summary>
        </member>
        <member name="P:Lucene.Net.Search.Similar.MoreLikeThis.BoostFactor">
            <summary>
            Gets or sets the boost factor used when boosting terms
            </summary>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.#ctor(Lucene.Net.Index.IndexReader)">
            <summary> Constructor requiring an IndexReader.</summary>
        </member>
        <member name="P:Lucene.Net.Search.Similar.MoreLikeThis.Analyzer">
            <summary> Gets or sets the analyzer used to parse source doc with. The default analyzer
            is the <see cref="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_ANALYZER"/>.
            <para />
            An analyzer is not required for generating a query with the
            <see cref="M:Lucene.Net.Search.Similar.MoreLikeThis.Like(System.Int32)"/> method, all other 'like' methods require an analyzer.
            </summary>
            <value> the analyzer that will be used to parse source doc with. </value>
            <seealso cref="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_ANALYZER">
            </seealso>
        </member>
        <member name="P:Lucene.Net.Search.Similar.MoreLikeThis.MinTermFreq">
            <summary>
            Gets or sets the frequency below which terms will be ignored in the source doc. The default
            frequency is the <see cref="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MIN_TERM_FREQ"/>.
            </summary>
        </member>
        <member name="P:Lucene.Net.Search.Similar.MoreLikeThis.MinDocFreq">
            <summary>
            Gets or sets the frequency at which words will be ignored which do not occur in at least this
            many docs. The default frequency is <see cref="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MIN_DOC_FREQ"/>.
            </summary>
        </member>
        <member name="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxDocFreq">
            <summary>
            Gets or sets the maximum frequency in which words may still appear. 
            Words that appear in more than this many docs will be ignored. The default frequency is 
            <see cref="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MAX_DOC_FREQ"/>
            </summary>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetMaxDocFreqPct(System.Int32)">
            <summary>
            Set the maximum percentage in which words may still appear. Words that appear
            in more than this many percent of all docs will be ignored.
            </summary>
            <param name="maxPercentage">
            the maximum percentage of documents (0-100) that a term may appear 
            in to be still considered relevant
            </param>
        </member>
        <member name="P:Lucene.Net.Search.Similar.MoreLikeThis.Boost">
            <summary> Gets or sets a boolean indicating whether to boost terms in query based 
            on "score" or not. The default is <see cref="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_BOOST"/>.
            </summary>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.GetFieldNames">
            <summary> Returns the field names that will be used when generating the 'More Like This' query.
            The default field names that will be used is <see cref="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_FIELD_NAMES"/>.
            
            </summary>
            <returns> the field names that will be used when generating the 'More Like This' query.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetFieldNames(System.String[])">
            <summary> Sets the field names that will be used when generating the 'More Like This' query.
            Set this to null for the field names to be determined at runtime from the IndexReader
            provided in the constructor.
            
            </summary>
            <param name="fieldNames">the field names that will be used when generating the 'More Like This'
            query.
            </param>
        </member>
        <member name="P:Lucene.Net.Search.Similar.MoreLikeThis.MinWordLen">
            <summary>
            Gets or sets the minimum word length below which words will be ignored. 
            Set this to 0 for no minimum word length. The default is <see cref="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MIN_WORD_LENGTH"/>.
            </summary>
        </member>
        <member name="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxWordLen">
            <summary>
            Gets or sets the maximum word length above which words will be ignored. Set this to 0 for no
            maximum word length. The default is <see cref="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MAX_WORD_LENGTH"/>.
            </summary>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetStopWords(System.Collections.Generic.ISet{System.String})">
            <summary> Set the set of stopwords.
            Any word in this set is considered "uninteresting" and ignored.
            Even if your Analyzer allows stopwords, you might want to tell the MoreLikeThis code to ignore them, as
            for the purposes of document similarity it seems reasonable to assume that "a stop word is never interesting".
            
            </summary>
            <param name="stopWords">set of stopwords, if null it means to allow stop words
            
            </param>
            <seealso cref="M:Lucene.Net.Analysis.StopFilter.MakeStopSet(System.String[])">
            </seealso>
            <seealso cref="M:Lucene.Net.Search.Similar.MoreLikeThis.GetStopWords">
            </seealso>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.GetStopWords">
            <summary> Get the current stop words being used.</summary>
            <seealso cref="M:Lucene.Net.Search.Similar.MoreLikeThis.SetStopWords(System.Collections.Generic.ISet{System.String})">
            </seealso>
        </member>
        <member name="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxQueryTerms">
            <summary>
            Gets or sets the maximum number of query terms that will be included in any generated query.
            The default is <see cref="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MAX_QUERY_TERMS"/>.
            </summary>
        </member>
        <member name="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxNumTokensParsed">
            <summary>
            Gets or sets the maximum number of tokens to parse in each example doc
            field that is not stored with TermVector support
            </summary>
            <seealso cref="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED" />
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.Like(System.Int32)">
            <summary>Return a query that will return docs like the passed lucene document ID.</summary>
            <param name="docNum">the documentID of the lucene doc to generate the 'More Like This" query for.</param>
            <returns> a query that will return docs like the passed lucene document ID.</returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.Like(System.IO.FileInfo)">
            <summary> Return a query that will return docs like the passed file.
            
            </summary>
            <returns> a query that will return docs like the passed file.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.Like(System.Uri)">
            <summary> Return a query that will return docs like the passed URL.
            
            </summary>
            <returns> a query that will return docs like the passed URL.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.Like(System.IO.Stream)">
            <summary> Return a query that will return docs like the passed stream.
            
            </summary>
            <returns> a query that will return docs like the passed stream.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.Like(System.IO.TextReader)">
            <summary> Return a query that will return docs like the passed Reader.
            
            </summary>
            <returns> a query that will return docs like the passed Reader.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.CreateQuery(Lucene.Net.Util.PriorityQueue{System.Object[]})">
            <summary> Create the More like query from a PriorityQueue</summary>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.CreateQueue(System.Collections.Generic.IDictionary{System.String,Lucene.Net.Search.Similar.MoreLikeThis.Int})">
            <summary> Create a PriorityQueue from a word->tf map.
            
            </summary>
            <param name="words">a map of words keyed on the word(String) with Int objects as the values.
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.DescribeParams">
            <summary> Describe the parameters that control how the "more like this" query is formed.</summary>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.RetrieveTerms(System.Int32)">
            <summary> Find words for a more-like-this query former.
            
            </summary>
            <param name="docNum">the id of the lucene document from which to find terms
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.AddTermFrequencies(System.Collections.Generic.IDictionary{System.String,Lucene.Net.Search.Similar.MoreLikeThis.Int},Lucene.Net.Index.ITermFreqVector)">
            <summary> Adds terms and frequencies found in vector into the Map termFreqMap</summary>
            <param name="termFreqMap">a Map of terms and their frequencies
            </param>
            <param name="vector">List of terms and their frequencies for a doc/field
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.AddTermFrequencies(System.IO.TextReader,System.Collections.Generic.IDictionary{System.String,Lucene.Net.Search.Similar.MoreLikeThis.Int},System.String)">
            <summary> Adds term frequencies found by tokenizing text from reader into the Map words</summary>
            <param name="r">a source of text to be tokenized
            </param>
            <param name="termFreqMap">a Map of terms and their frequencies
            </param>
            <param name="fieldName">Used by analyzer for any special per-field analysis
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.IsNoiseWord(System.String)">
            <summary>determines if the passed term is likely to be of interest in "more like" comparisons 
            
            </summary>
            <param name="term">The word being considered
            </param>
            <returns> true if should be ignored, false if should be used in further analysis
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.RetrieveTerms(System.IO.TextReader)">
            <summary> Find words for a more-like-this query former.
            The result is a priority queue of arrays with one entry for <b>every word</b> in the document.
            Each array has 6 elements.
            The elements are:
            <ol>
            <li> The word (String)</li>
            <li> The top field that this word comes from (String)</li>
            <li> The score for this word (Float)</li>
            <li> The IDF value (Float)</li>
            <li> The frequency of this word in the index (Integer)</li>
            <li> The frequency of this word in the source document (Integer)</li>
            </ol>
            This is a somewhat "advanced" routine, and in general only the 1st entry in the array is of interest.
            This method is exposed so that you can identify the "interesting words" in a document.
            For an easier method to call see <see cref="M:Lucene.Net.Search.Similar.MoreLikeThis.RetrieveInterestingTerms(System.IO.TextReader)"/>.
            
            </summary>
            <param name="r">the reader that has the content of the document
            </param>
            <returns> the most intresting words in the document ordered by score, with the highest scoring, or best entry, first
            
            </returns>
            <seealso cref="M:Lucene.Net.Search.Similar.MoreLikeThis.RetrieveInterestingTerms(System.IO.TextReader)">
            </seealso>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.RetrieveInterestingTerms(System.IO.TextReader)">
            <summary> Convenience routine to make it easy to return the most interesting words in a document.
            More advanced users will call <see cref="M:Lucene.Net.Search.Similar.MoreLikeThis.RetrieveTerms(System.IO.TextReader)"/> directly.
            </summary>
            <param name="r">the source document
            </param>
            <returns> the most interesting words in the document
            
            </returns>
            <seealso cref="M:Lucene.Net.Search.Similar.MoreLikeThis.RetrieveTerms(System.IO.TextReader)">
            </seealso>
            <seealso cref="P:Lucene.Net.Search.Similar.MoreLikeThis.MaxQueryTerms">
            </seealso>
        </member>
        <member name="T:Lucene.Net.Search.Similar.MoreLikeThis.FreqQ">
            <summary> PriorityQueue that orders words by score.</summary>
        </member>
        <member name="T:Lucene.Net.Search.Similar.MoreLikeThis.Int">
            <summary> Use for frequencies and to avoid renewing Integers.</summary>
        </member>
        <member name="T:Lucene.Net.Analysis.NGram.Side">
            <summary>
            Specifies which side of the input the n-gram should be generated from
            </summary>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.Dictionary">
            <summary> A simple interface representing a Dictionary</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.Dictionary.GetWordsIterator">
            <summary> return all the words present in the dictionary</summary>
            <returns> Iterator
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.JaroWinklerDistance.SetThreshold(System.Single)">
             <summary>
            Sets the threshold used to deterMine when Winkler bonus should be used.
             Set to a negative value to get the Jaro distance.
             </summary>
             <param name="threshold">the new value of the threshold</param>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.JaroWinklerDistance.GetThreshold">
            <summary>
            Returns the current value of the threshold used for adding the Winkler bonus.
            The default value is 0.7.
            </summary>
            <returns>the current value of the threshold</returns>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.LevenshteinDistance">
            <summary>
            Levenshtein edit distance
            </summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.LevenshteinDistance.GetDistance(System.String,System.String)">
            <summary>
            Returns a float between 0 and 1 based on how similar the specified strings are to one another.  
            Returning a value of 1 means the specified strings are identical and 0 means the
            string are maximally different.
            </summary>
            <param name="target">The first string.</param>
            <param name="other">The second string.</param>
            <returns>a float between 0 and 1 based on how similar the specified strings are to one another.</returns>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.LuceneDictionary">
            <summary> Lucene Dictionary
            
            </summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.NGramDistance.#ctor(System.Int32)">
            <summary>
            Creates an N-Gram distance measure using n-grams of the specified size.
            </summary>
            <param name="size">The size of the n-gram to be used to compute the string distance.</param>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.NGramDistance.#ctor">
            <summary>
            Creates an N-Gram distance measure using n-grams of size 2.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SpellChecker.Net.Search.Spell.PlainTextDictionary" -->
        <!-- Badly formed XML comment ignored for member "T:SpellChecker.Net.Search.Spell.SpellChecker" -->
        <member name="F:SpellChecker.Net.Search.Spell.SpellChecker.F_WORD">
            <summary> Field name for each word in the ngram index.</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SpellChecker.spellindex">
            <summary> the spell index</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SpellChecker.bStart">
            <summary> Boost value for start and end grams</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SpellChecker.searcherLock">
            <summary>
            this locks all modifications to the current searcher. 
            </summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.#ctor(Lucene.Net.Store.Directory,SpellChecker.Net.Search.Spell.StringDistance)">
            <summary>
            Use the given directory as a spell checker index. The directory
            is created if it doesn't exist yet.
            </summary>
            <param name="gramIndex">the spell index directory</param>
            <param name="sd">the {@link StringDistance} measurement to use </param>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.#ctor(Lucene.Net.Store.Directory)">
            <summary>
            Use the given directory as a spell checker index with a
            {@link LevensteinDistance} as the default {@link StringDistance}. The
            directory is created if it doesn't exist yet.
            </summary>
            <param name="gramIndex">the spell index directory</param>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.SetSpellIndex(Lucene.Net.Store.Directory)">
            <summary>
            Use a different index as the spell checker index or re-open
            the existing index if <code>spellIndex</code> is the same value
            as given in the constructor.
            </summary>
            <param name="spellIndexDir">spellIndexDir the spell directory to use </param>
            <throws>AlreadyClosedException if the Spellchecker is already closed</throws>
            <throws>IOException if spellchecker can not open the directory</throws>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.setStringDistance(SpellChecker.Net.Search.Spell.StringDistance)">
            <summary>
            Sets the {@link StringDistance} implementation for this
            {@link SpellChecker} instance.
            </summary>
            <param name="sd">the {@link StringDistance} implementation for this
            {@link SpellChecker} instance.</param>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.GetStringDistance">
            <summary>
            Returns the {@link StringDistance} instance used by this
            {@link SpellChecker} instance.
            </summary>
            <returns>
            Returns the {@link StringDistance} instance used by this
            {@link SpellChecker} instance.
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.SetAccuracy(System.Single)">
            <summary>  Set the accuracy 0 &lt; min &lt; 1; default 0.5</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.SuggestSimilar(System.String,System.Int32)">
            <summary> Suggest similar words</summary>
            <param name="word">String the word you want a spell check done on
            </param>
            <param name="num_sug">int the number of suggest words
            </param>
            <throws>  IOException </throws>
            <returns> String[]
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.SuggestSimilar(System.String,System.Int32,Lucene.Net.Index.IndexReader,System.String,System.Boolean)">
            <summary> Suggest similar words (restricted or not to a field of a user index)</summary>
            <param name="word">String the word you want a spell check done on
            </param>
            <param name="numSug">int the number of suggest words
            </param>
            <param name="ir">the indexReader of the user index (can be null see field param)
            </param>
            <param name="field">String the field of the user index: if field is not null, the suggested
            words are restricted to the words present in this field.
            </param>
            <param name="morePopular">boolean return only the suggest words that are more frequent than the searched word
            (only if restricted mode = (indexReader!=null and field!=null)
            </param>
            <throws>  IOException </throws>
            <returns> String[] the sorted list of the suggest words with this 2 criteria:
            first criteria: the edit distance, second criteria (only if restricted mode): the popularity
            of the suggest words in the field of the user index
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.Add(Lucene.Net.Search.BooleanQuery,System.String,System.String,System.Single)">
            <summary> Add a clause to a boolean query.</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.Add(Lucene.Net.Search.BooleanQuery,System.String,System.String)">
            <summary> Add a clause to a boolean query.</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.FormGrams(System.String,System.Int32)">
            <summary> Form all ngrams for a given word.</summary>
            <param name="text">the word to parse
            </param>
            <param name="ng">the ngram length e.g. 3
            </param>
            <returns> an array of all ngrams in the word and note that duplicates are not removed
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.ClearIndex">
            <summary>
            Removes all terms from the spell check index.
            </summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.Exist(System.String)">
            <summary> Check whether the word exists in the index.</summary>
            <param name="word">String
            </param>
            <throws>  IOException </throws>
            <returns> true iff the word exists in the index
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.IndexDictionary(SpellChecker.Net.Search.Spell.Dictionary,System.Int32,System.Int32)">
            <summary> Index a Dictionary</summary>
            <param name="dict">the dictionary to index</param>
            <param name="mergeFactor">mergeFactor to use when indexing</param>
            <param name="ramMB">the max amount or memory in MB to use</param>
            <throws>  IOException </throws>
            <throws>AlreadyClosedException if the Spellchecker is already closed</throws>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.IndexDictionary(SpellChecker.Net.Search.Spell.Dictionary)">
            <summary>
            Indexes the data from the given {@link Dictionary}.
            </summary>
            <param name="dict">dict the dictionary to index</param>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.CreateSearcher(Lucene.Net.Store.Directory)">
            <summary>
            Creates a new read-only IndexSearcher (for testing purposes)
            </summary>
            <param name="dir">dir the directory used to open the searcher</param>
            <returns>a new read-only IndexSearcher. (throws IOException f there is a low-level IO error)</returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.IsClosed">
             <summary>
             Returns <code>true</code> if and only if the {@link SpellChecker} is
             closed, otherwise <code>false</code>.
             </summary>
             <returns><code>true</code> if and only if the {@link SpellChecker} is
                     closed, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.StringDistance">
            <summary>
            Interface for string distances.
            </summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.StringDistance.GetDistance(System.String,System.String)">
            <summary>
            Returns a float between 0 and 1 based on how similar the specified strings are to one another.  
            Returning a value of 1 means the specified strings are identical and 0 means the
            string are maximally different.
            </summary>
            <param name="s1">The first string.</param>
            <param name="s2">The second string.</param>
            <returns>a float between 0 and 1 based on how similar the specified strings are to one another.</returns>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.SuggestWord">
            <summary>  SuggestWord Class, used in suggestSimilar method in SpellChecker class.
            
            </summary>
            <author>  Nicolas Maisonneuve
            </author>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SuggestWord.score">
            <summary> the score of the word</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SuggestWord.freq">
            <summary> The freq of the word</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SuggestWord.string_Renamed">
            <summary> the suggested word</summary>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.TRStringDistance">
            <summary> Edit distance  class</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.TRStringDistance.#ctor(System.String)">
            <summary> Optimized to run a bit faster than the static getDistance().
            In one benchmark times were 5.3sec using ctr vs 8.5sec w/ static method, thus 37% faster.
            </summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.TRStringDistance.Form(System.Int32,System.Int32)">
            <summary> </summary>
        </member>
        <member name="T:OpenPop.Common.Logging.DefaultLogger">
            <summary>
            This is the log that all logging will go trough.
            </summary>
        </member>
        <member name="P:OpenPop.Common.Logging.DefaultLogger.Log">
            <summary>
            This is the logger used by all logging methods in the assembly.<br/>
            You can override this if you want, to move logging to one of your own
            logging implementations.<br/>
            <br/>
            By default a <see cref="T:OpenPop.Common.Logging.DiagnosticsLogger"/> is used.
            </summary>
        </member>
        <member name="M:OpenPop.Common.Logging.DefaultLogger.SetLog(OpenPop.Common.Logging.ILog)">
            <summary>
            Changes the default logging to log to a new logger
            </summary>
            <param name="newLogger">The new logger to use to send log messages to</param>
            <exception cref="T:System.ArgumentNullException">
            Never set this to <see langword="null"/>.<br/>
            Instead you should implement a NullLogger which just does nothing.
            </exception>
        </member>
        <member name="T:OpenPop.Common.Logging.DiagnosticsLogger">
            <summary>
            This logging object writes application error and debug output using the
            <see cref="T:System.Diagnostics.Trace"/> facilities.
            </summary>
        </member>
        <member name="M:OpenPop.Common.Logging.DiagnosticsLogger.LogError(System.String)">
            <summary>
            Logs an error message to the System Trace facility
            </summary>
            <param name="message">This is the error message to log</param>
        </member>
        <member name="M:OpenPop.Common.Logging.DiagnosticsLogger.LogDebug(System.String)">
            <summary>
            Logs a debug message to the system Trace Facility
            </summary>
            <param name="message">This is the debug message to log</param>
        </member>
        <member name="T:OpenPop.Common.Logging.FileLogger">
            <summary>
            This logging object writes application error and debug output to a text file.
            </summary>
        </member>
        <member name="F:OpenPop.Common.Logging.FileLogger.LogLock">
            <summary>
            Lock object to prevent thread interactions
            </summary>
        </member>
        <member name="M:OpenPop.Common.Logging.FileLogger.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="P:OpenPop.Common.Logging.FileLogger.Enabled">
            <summary>
            Turns the logging on and off.
            </summary>
        </member>
        <member name="P:OpenPop.Common.Logging.FileLogger.Verbose">
            <summary>
            Enables or disables the output of Debug level log messages
            </summary>
        </member>
        <member name="P:OpenPop.Common.Logging.FileLogger.LogFile">
            <summary>
            The file to which log messages will be written
            </summary>
            <remarks>This property defaults to OpenPOP.log.</remarks>
        </member>
        <member name="M:OpenPop.Common.Logging.FileLogger.LogToFile(System.String)">
            <summary>
            Write a message to the log file
            </summary>
            <param name="text">The error text to log</param>
        </member>
        <member name="M:OpenPop.Common.Logging.FileLogger.LogError(System.String)">
            <summary>
            Logs an error message to the logs
            </summary>
            <param name="message">This is the error message to log</param>
        </member>
        <member name="M:OpenPop.Common.Logging.FileLogger.LogDebug(System.String)">
            <summary>
            Logs a debug message to the logs
            </summary>
            <param name="message">This is the debug message to log</param>
        </member>
        <member name="T:OpenPop.Common.Logging.ILog">
            <summary>
            Defines a logger for managing system logging output  
            </summary>
        </member>
        <member name="M:OpenPop.Common.Logging.ILog.LogError(System.String)">
            <summary>
            Logs an error message to the logs
            </summary>
            <param name="message">This is the error message to log</param>
        </member>
        <member name="M:OpenPop.Common.Logging.ILog.LogDebug(System.String)">
            <summary>
            Logs a debug message to the logs
            </summary>
            <param name="message">This is the debug message to log</param>
        </member>
        <member name="T:OpenPop.Common.StreamUtility">
            <summary>
            Utility to help reading bytes and strings of a <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="M:OpenPop.Common.StreamUtility.ReadLineAsBytes(System.IO.Stream)">
            <summary>
            Read a line from the stream.
            A line is interpreted as all the bytes read until a CRLF or LF is encountered.<br/>
            CRLF pair or LF is not included in the string.
            </summary>
            <param name="stream">The stream from which the line is to be read</param>
            <returns>A line read from the stream returned as a byte array or <see langword="null"/> if no bytes were readable from the stream</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Common.StreamUtility.ReadLineAsAscii(System.IO.Stream)">
            <summary>
            Read a line from the stream. <see cref="M:OpenPop.Common.StreamUtility.ReadLineAsBytes(System.IO.Stream)"/> for more documentation.
            </summary>
            <param name="stream">The stream to read from</param>
            <returns>A line read from the stream or <see langword="null"/> if nothing could be read from the stream</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/></exception>
        </member>
        <member name="T:OpenPop.Mime.Decode.Base64">
            <summary>
            Utility class for dealing with Base64 encoded strings
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Decode.Base64.Decode(System.String)">
            <summary>
            Decodes a base64 encoded string into the bytes it describes
            </summary>
            <param name="base64Encoded">The string to decode</param>
            <returns>A byte array that the base64 string described</returns>
        </member>
        <member name="M:OpenPop.Mime.Decode.Base64.Decode(System.String,System.Text.Encoding)">
            <summary>
            Decodes a Base64 encoded string using a specified <see cref="T:System.Text.Encoding"/> 
            </summary>
            <param name="base64Encoded">Source string to decode</param>
            <param name="encoding">The encoding to use for the decoded byte array that <paramref name="base64Encoded"/> describes</param>
            <returns>A decoded string</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="base64Encoded"/> or <paramref name="encoding"/> is <see langword="null"/></exception>
            <exception cref="T:System.FormatException">If <paramref name="base64Encoded"/> is not a valid base64 encoded string</exception>
        </member>
        <member name="T:OpenPop.Mime.Decode.EncodedWord">
            <summary>
            Utility class for dealing with encoded word strings<br/>
            <br/>
            EncodedWord encoded strings are only in ASCII, but can embed information
            about characters in other character sets.<br/>
            <br/>
            It is done by specifying the character set, an encoding that maps from ASCII to
            the correct bytes and the actual encoded string.<br/>
            <br/>
            It is specified in a format that is best summarized by a BNF:<br/>
            <c>"=?" character_set "?" encoding "?" encoded-text "?="</c><br/>
            </summary>
            <example>
            <c>=?ISO-8859-1?Q?=2D?=</c>
            Here <c>ISO-8859-1</c> is the character set.<br/>
            <c>Q</c> is the encoding method (quoted-printable). <c>B</c> is also supported (Base 64).<br/>
            The encoded text is the <c>=2D</c> part which is decoded to a space.
            </example>
        </member>
        <member name="M:OpenPop.Mime.Decode.EncodedWord.Decode(System.String)">
             <summary>
             Decode text that is encoded with the <see cref="T:OpenPop.Mime.Decode.EncodedWord"/> encoding.<br/>
            <br/>
             This method will decode any encoded-word found in the string.<br/>
             All parts which is not encoded will not be touched.<br/>
             <br/>
             From <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>:<br/>
             <code>
             Generally, an "encoded-word" is a sequence of printable ASCII
             characters that begins with "=?", ends with "?=", and has two "?"s in
             between.  It specifies a character set and an encoding method, and
             also includes the original text encoded as graphic ASCII characters,
             according to the rules for that encoding method.
             </code>
             Example:<br/>
             <c>=?ISO-8859-1?q?this=20is=20some=20text?= other text here</c>
             </summary>
             <remarks>See <a href="http://tools.ietf.org/html/rfc2047#section-2">RFC 2047 section 2</a> "Syntax of encoded-words" for more details</remarks>
             <param name="encodedWords">Source text. May be content which is not encoded.</param>
             <returns>Decoded text</returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="encodedWords"/> is <see langword="null"/></exception>
        </member>
        <member name="T:OpenPop.Mime.Decode.EncodingFinder">
            <summary>
            Utility class used by OpenPop for mapping from a characterSet to an <see cref="T:System.Text.Encoding"/>.<br/>
            <br/>
            The functionality of the class can be altered by adding mappings
            using <see cref="M:OpenPop.Mime.Decode.EncodingFinder.AddMapping(System.String,System.Text.Encoding)"/> and by adding a <see cref="P:OpenPop.Mime.Decode.EncodingFinder.FallbackDecoder"/>.<br/>
            <br/>
            Given a characterSet, it will try to find the Encoding as follows:
            <list type="number">
                <item>
                    <description>If a mapping for the characterSet was added, use the specified Encoding from there. Mappings can be added using <see cref="M:OpenPop.Mime.Decode.EncodingFinder.AddMapping(System.String,System.Text.Encoding)"/>.</description>
                </item>
                <item>
                    <description>Try to parse the characterSet and look it up using <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)"/> for codepages or <see cref="M:System.Text.Encoding.GetEncoding(System.String)"/> for named encodings.</description>
                </item>
                <item>
                    <description>If an encoding is not found yet, use the <see cref="P:OpenPop.Mime.Decode.EncodingFinder.FallbackDecoder"/> if defined. The <see cref="P:OpenPop.Mime.Decode.EncodingFinder.FallbackDecoder"/> is user defined.</description>
                </item>
            </list>
            </summary>
        </member>
        <member name="T:OpenPop.Mime.Decode.EncodingFinder.FallbackDecoderDelegate">
            <summary>
            Delegate that is used when the EncodingFinder is unable to find an encoding by
            using the <see cref="P:OpenPop.Mime.Decode.EncodingFinder.EncodingMap"/> or general code.<br/>
            This is used as a last resort and can be used for setting a default encoding or
            for finding an encoding on runtime for some <paramref name="characterSet"/>.
            </summary>
            <param name="characterSet">The character set to find an encoding for.</param>
            <returns>An encoding for the <paramref name="characterSet"/> or <see langword="null"/> if none could be found.</returns>
        </member>
        <member name="P:OpenPop.Mime.Decode.EncodingFinder.FallbackDecoder">
            <summary>
            Last resort decoder.
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Decode.EncodingFinder.EncodingMap">
            <summary>
            Mapping from charactersets to encodings.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Decode.EncodingFinder.#cctor">
            <summary>
            Initialize the EncodingFinder
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Decode.EncodingFinder.Reset">
            <summary>
            Used to reset this static class to facilite isolated unit testing.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Decode.EncodingFinder.FindEncoding(System.String)">
            <summary>
            Parses a character set into an encoding.
            </summary>
            <param name="characterSet">The character set to parse</param>
            <returns>An encoding which corresponds to the character set</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="characterSet"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Decode.EncodingFinder.AddMapping(System.String,System.Text.Encoding)">
            <summary>
            Puts a mapping from <paramref name="characterSet"/> to <paramref name="encoding"/>
            into the <see cref="T:OpenPop.Mime.Decode.EncodingFinder"/>'s internal mapping Dictionary.
            </summary>
            <param name="characterSet">The string that maps to the <paramref name="encoding"/></param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> that should be mapped from <paramref name="characterSet"/></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="characterSet"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="encoding"/> is <see langword="null"/></exception>
        </member>
        <member name="T:OpenPop.Mime.Decode.QuotedPrintable">
            <summary>
            Used for decoding Quoted-Printable text.<br/>
            This is a robust implementation of a Quoted-Printable decoder defined in <a href="http://tools.ietf.org/html/rfc2045">RFC 2045</a> and <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>.<br/>
            Every measurement has been taken to conform to the RFC.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Decode.QuotedPrintable.DecodeEncodedWord(System.String,System.Text.Encoding)">
            <summary>
            Decodes a Quoted-Printable string according to <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>.<br/>
            RFC 2047 is used for decoding Encoded-Word encoded strings.
            </summary>
            <param name="toDecode">Quoted-Printable encoded string</param>
            <param name="encoding">Specifies which encoding the returned string will be in</param>
            <returns>A decoded string in the correct encoding</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="toDecode"/> or <paramref name="encoding"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Decode.QuotedPrintable.DecodeContentTransferEncoding(System.String)">
            <summary>
            Decodes a Quoted-Printable string according to <a href="http://tools.ietf.org/html/rfc2045">RFC 2045</a>.<br/>
            RFC 2045 specifies the decoding of a body encoded with Content-Transfer-Encoding of quoted-printable.
            </summary>
            <param name="toDecode">Quoted-Printable encoded string</param>
            <returns>A decoded byte array that the Quoted-Printable encoded string described</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Decode.QuotedPrintable.Rfc2047QuotedPrintableDecode(System.String,System.Boolean)">
            <summary>
            This is the actual decoder.
            </summary>
            <param name="toDecode">The string to be decoded from Quoted-Printable</param>
            <param name="encodedWordVariant">
            If <see langword="true"/>, specifies that RFC 2047 quoted printable decoding is used.<br/>
            This is for quoted-printable encoded words<br/>
            <br/>
            If <see langword="false"/>, specifies that RFC 2045 quoted printable decoding is used.<br/>
            This is for quoted-printable Content-Transfer-Encoding
            </param>
            <returns>A decoded byte array that was described by <paramref name="toDecode"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
            <remarks>See <a href="http://tools.ietf.org/html/rfc2047#section-4.2">RFC 2047 section 4.2</a> for RFC details</remarks>
        </member>
        <member name="M:OpenPop.Mime.Decode.QuotedPrintable.WriteAllBytesToStream(System.IO.Stream,System.Byte[])">
            <summary>
            Writes all bytes in a byte array to a stream
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="toWrite">The bytes to write to the <paramref name="stream"/></param>
        </member>
        <member name="M:OpenPop.Mime.Decode.QuotedPrintable.RemoveIllegalControlCharacters(System.String)">
            <summary>
            RFC 2045 states about robustness:<br/>
            <code>
            Control characters other than TAB, or CR and LF as parts of CRLF pairs,
            must not appear. The same is true for octets with decimal values greater
            than 126.  If found in incoming quoted-printable data by a decoder, a
            robust implementation might exclude them from the decoded data and warn
            the user that illegal characters were discovered.
            </code>
            Control characters are defined in RFC 2396 as<br/>
            <c>control = US-ASCII coded characters 00-1F and 7F hexadecimal</c>
            </summary>
            <param name="input">String to be stripped from illegal control characters</param>
            <returns>A string with no illegal control characters</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Decode.QuotedPrintable.RemoveCarriageReturnAndNewLinewIfNotInPair(System.String)">
            <summary>
            This method will remove any \r and \n which is not paired as \r\n
            </summary>
            <param name="input">String to remove lonely \r and \n's from</param>
            <returns>A string without lonely \r and \n's</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Decode.QuotedPrintable.DecodeEqualSignNotLongEnough(System.String)">
            <summary>
            RFC 2045 says that a robust implementation should handle:<br/>
            <code>
            An "=" cannot be the ultimate or penultimate character in an encoded
            object. This could be handled as in case (2) above.
            </code>
            Case (2) is:<br/>
            <code>
            An "=" followed by a character that is neither a
            hexadecimal digit (including "abcdef") nor the CR character of a CRLF pair
            is illegal.  This case can be the result of US-ASCII text having been
            included in a quoted-printable part of a message without itself having
            been subjected to quoted-printable encoding.  A reasonable approach by a
            robust implementation might be to include the "=" character and the
            following character in the decoded data without any transformation and, if
            possible, indicate to the user that proper decoding was not possible at
            this point in the data.
            </code>
            </summary>
            <param name="decode">
            The string to decode which cannot have length above or equal to 3
            and must start with an equal sign.
            </param>
            <returns>A decoded byte array</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="decode"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">Thrown if a the <paramref name="decode"/> parameter has length above 2 or does not start with an equal sign.</exception>
        </member>
        <member name="M:OpenPop.Mime.Decode.QuotedPrintable.DecodeEqualSign(System.String)">
            <summary>
            This helper method will decode a string of the form "=XX" where X is any character.<br/>
            This method will never fail, unless an argument of length not equal to three is passed.
            </summary>
            <param name="decode">The length 3 character that needs to be decoded</param>
            <returns>A decoded byte array</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="decode"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">Thrown if a the <paramref name="decode"/> parameter does not have length 3 or does not start with an equal sign.</exception>
        </member>
        <member name="T:OpenPop.Mime.Decode.Rfc2231Decoder">
            <summary>
            This class is responsible for decoding parameters that has been encoded with:<br/>
            <list type="bullet">
            <item>
               <b>Continuation</b><br/>
               This is where a single parameter has such a long value that it could
               be wrapped while in transit. Instead multiple parameters is used on each line.<br/>
               <br/>
               <b>Example</b><br/>
               From: <c>Content-Type: text/html; boundary="someVeryLongStringHereWhichCouldBeWrappedInTransit"</c><br/>
               To: <c>Content-Type: text/html; boundary*0="someVeryLongStringHere" boundary*1="WhichCouldBeWrappedInTransit"</c><br/>
            </item>
            <item>
               <b>Encoding</b><br/>
               Sometimes other characters then ASCII characters are needed in parameters.<br/>
               The parameter is then given a different name to specify that it is encoded.<br/>
               <br/>
               <b>Example</b><br/>
               From: <c>Content-Disposition attachment; filename="specialCharsÆØÅ"</c><br/>
               To: <c>Content-Disposition attachment; filename*="ISO-8859-1'en-us'specialCharsC6D8C0"</c><br/>
               This encoding is almost the same as <see cref="T:OpenPop.Mime.Decode.EncodedWord"/> encoding, and is used to decode the value.<br/>
            </item>
            <item>
               <b>Continuation and Encoding</b><br/>
               Both Continuation and Encoding can be used on the same time.<br/>
               <br/>
               <b>Example</b><br/>
               From: <c>Content-Disposition attachment; filename="specialCharsÆØÅWhichIsSoLong"</c><br/>
               To: <c>Content-Disposition attachment; filename*0*="ISO-8859-1'en-us'specialCharsC6D8C0"; filename*1*="WhichIsSoLong"</c><br/>
               This could also be encoded as:<br/>
               To: <c>Content-Disposition attachment; filename*0*="ISO-8859-1'en-us'specialCharsC6D8C0"; filename*1="WhichIsSoLong"</c><br/>
               Notice that <c>filename*1</c> does not have an <c>*</c> after it - denoting it IS NOT encoded.<br/>
               There are some rules about this:<br/>
               <list type="number">
                 <item>The encoding must be mentioned in the first part (filename*0*), which has to be encoded.</item>
                 <item>No other part must specify an encoding, but if encoded it uses the encoding mentioned in the first part.</item>
                 <item>Parts may be encoded or not in any order.</item>
               </list>
               <br/>
            </item>
            </list>
            More information and the specification is available in <see href="http://tools.ietf.org/html/rfc2231">RFC 2231</see>.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Decode.Rfc2231Decoder.Decode(System.String)">
            <summary>
            Decodes a string of the form:<br/>
            <c>value0; key1=value1; key2=value2; key3=value3</c><br/>
            The returned List of key value pairs will have the key as key and the decoded value as value.<br/>
            The first value0 will have a key of <see cref="F:System.String.Empty"/>.<br/>
            <br/>
            If continuation is used, then multiple keys will be merged into one key with the different values
            decoded into on big value for that key.<br/>
            Example:<br/>
            <code>
            title*0=part1
            title*1=part2
            </code>
            will have key and value of:<br></br>
            <c>title=decode(part1)decode(part2)</c>
            </summary>
            <param name="toDecode">The string to decode.</param>
            <returns>A list of decoded key value pairs.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Decode.Rfc2231Decoder.DecodePairs(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Decodes the list of key value pairs into a decoded list of key value pairs.<br/>
            There may be less keys in the decoded list, but then the values for the lost keys will have been appended
            to the new key.
            </summary>
            <param name="pairs">The pairs to decode</param>
            <returns>A decoded list of pairs</returns>
        </member>
        <member name="M:OpenPop.Mime.Decode.Rfc2231Decoder.DecodeSingleValue(System.String,System.String@)">
            <summary>
            This will decode a single value of the form: <c>ISO-8859-1'en-us'%3D%3DIamHere</c><br/>
            Which is basically a <see cref="T:OpenPop.Mime.Decode.EncodedWord"/> form just using % instead of =<br/>
            Notice that 'en-us' part is not used for anything.<br/>
            <br/>
            If the single value given is not on the correct form, it will be returned without 
            being decoded and <paramref name="encodingUsed"/> will be set to <see langword="null"/>.
            </summary>
            <param name="encodingUsed">
            The encoding used to decode with - it is given back for later use.<br/>
            <see langword="null"/> if input was not in the correct form.
            </param>
            <param name="toDecode">The value to decode</param>
            <returns>
            The decoded value that corresponds to <paramref name="toDecode"/> or if
            <paramref name="toDecode"/> is not on the correct form, it will be non-decoded.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Decode.Rfc2231Decoder.DecodeSingleValue(System.String,System.String)">
            <summary>
            This will decode a single value of the form: %3D%3DIamHere
            Which is basically a <see cref="T:OpenPop.Mime.Decode.EncodedWord"/> form just using % instead of =
            </summary>
            <param name="valueToDecode">The value to decode</param>
            <param name="encoding">The encoding used to decode with</param>
            <returns>The decoded value that corresponds to <paramref name="valueToDecode"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="valueToDecode"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="encoding"/> is <see langword="null"/></exception>
        </member>
        <member name="T:OpenPop.Mime.Decode.Rfc2822DateTime">
            <summary>
            Class used to decode RFC 2822 Date header fields.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Decode.Rfc2822DateTime.StringToDate(System.String)">
            <summary>
            Converts a string in RFC 2822 format into a <see cref="T:System.DateTime"/> object
            </summary>
            <param name="inputDate">The date to convert</param>
            <returns>
            A valid <see cref="T:System.DateTime"/> object, which represents the same time as the string that was converted. 
            If <paramref name="inputDate"/> is not a valid date representation, then <see cref="F:System.DateTime.MinValue"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="inputDate"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="inputDate"/> could not be parsed into a <see cref="T:System.DateTime"/> object</exception>
        </member>
        <member name="M:OpenPop.Mime.Decode.Rfc2822DateTime.AdjustTimezone(System.DateTime,System.String)">
            <summary>
            Adjust the <paramref name="dateTime"/> object given according to the timezone specified in the <paramref name="dateInput"/>.
            </summary>
            <param name="dateTime">The date to alter</param>
            <param name="dateInput">The input date, in which the timezone can be found</param>
            <returns>An date altered according to the timezone</returns>
            <exception cref="T:System.ArgumentException">If no timezone was found in <paramref name="dateInput"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Decode.Rfc2822DateTime.MatchEvaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Convert timezones in older formats to [+-]dddd format.
            </summary>
            <param name="match">The match that was found</param>
            <returns>The string to replace the matched string with</returns>
        </member>
        <member name="M:OpenPop.Mime.Decode.Rfc2822DateTime.ExtractDateTime(System.String)">
            <summary>
            Extracts the date and time parts from the <paramref name="dateInput"/>
            </summary>
            <param name="dateInput">The date input string, from which to extract the date and time parts</param>
            <returns>The extracted date part or <see langword="DateTime.MinValue"/> if <paramref name="dateInput"/> is not recognized as a valid date.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="dateInput"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Decode.Rfc2822DateTime.ValidateDayNameIfAny(System.DateTime,System.String)">
            <summary>
            Validates that the given <paramref name="dateTime"/> agrees with a day-name specified
            in <paramref name="dateInput"/>.
            </summary>
            <param name="dateTime">The time to check</param>
            <param name="dateInput">The date input to extract the day-name from</param>
            <exception cref="T:System.ArgumentException">If <paramref name="dateTime"/> and <paramref name="dateInput"/> does not agree on the day</exception>
        </member>
        <member name="M:OpenPop.Mime.Decode.Rfc2822DateTime.StripCommentsAndExcessWhitespace(System.String)">
            <summary>
            Strips and removes all comments and excessive whitespace from the string
            </summary>
            <param name="input">The input to strip from</param>
            <returns>The stripped string</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
        </member>
        <member name="T:OpenPop.Mime.Decode.SizeParser">
            <summary>
            Thanks to http://stackoverflow.com/a/7333402/477854 for inspiration
            This class can convert from strings like "104 kB" (104 kilobytes) to bytes.
            It does not know about differences such as kilobits vs kilobytes.
            </summary>
        </member>
        <member name="T:OpenPop.Mime.Decode.Utility">
            <summary>
            Contains common operations needed while decoding.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Decode.Utility.RemoveQuotesIfAny(System.String)">
            <summary>
            Remove quotes, if found, around the string.
            </summary>
            <param name="text">Text with quotes or without quotes</param>
            <returns>Text without quotes</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="text"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Decode.Utility.SplitStringWithCharNotInsideQuotes(System.String,System.Char)">
            <summary>
            Split a string into a list of strings using a specified character.<br/>
            Everything inside quotes are ignored.
            </summary>
            <param name="input">A string to split</param>
            <param name="toSplitAt">The character to use to split with</param>
            <returns>A List of strings that was delimited by the <paramref name="toSplitAt"/> character</returns>
        </member>
        <member name="T:OpenPop.Mime.Header.ContentTransferEncoding">
            <summary>
            <see cref="T:System.Enum"/> that describes the ContentTransferEncoding header field
            </summary>
            <remarks>See <a href="http://tools.ietf.org/html/rfc2045#section-6">RFC 2045 section 6</a> for more details</remarks>
        </member>
        <member name="F:OpenPop.Mime.Header.ContentTransferEncoding.SevenBit">
            <summary>
            7 bit Encoding
            </summary>
        </member>
        <member name="F:OpenPop.Mime.Header.ContentTransferEncoding.EightBit">
            <summary>
            8 bit Encoding
            </summary>
        </member>
        <member name="F:OpenPop.Mime.Header.ContentTransferEncoding.QuotedPrintable">
            <summary>
            Quoted Printable Encoding
            </summary>
        </member>
        <member name="F:OpenPop.Mime.Header.ContentTransferEncoding.Base64">
            <summary>
            Base64 Encoding
            </summary>
        </member>
        <member name="F:OpenPop.Mime.Header.ContentTransferEncoding.Binary">
            <summary>
            Binary Encoding
            </summary>
        </member>
        <member name="T:OpenPop.Mime.Header.HeaderExtractor">
            <summary>
             Utility class that divides a message into a body and a header.<br/>
             The header is then parsed to a strongly typed <see cref="T:OpenPop.Mime.Header.MessageHeader"/> object.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Header.HeaderExtractor.FindHeaderEndPosition(System.Byte[])">
            <summary>
            Find the end of the header section in a byte array.<br/>
            The headers have ended when a blank line is found
            </summary>
            <param name="messageContent">The full message stored as a byte array</param>
            <returns>The position of the line just after the header end blank line</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="messageContent"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Header.HeaderExtractor.ExtractHeadersAndBody(System.Byte[],OpenPop.Mime.Header.MessageHeader@,System.Byte[]@)">
            <summary>
            Extract the header part and body part of a message.<br/>
            The headers are then parsed to a strongly typed <see cref="T:OpenPop.Mime.Header.MessageHeader"/> object.
            </summary>
            <param name="fullRawMessage">The full message in bytes where header and body needs to be extracted from</param>
            <param name="headers">The extracted header parts of the message</param>
            <param name="body">The body part of the message</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fullRawMessage"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Header.HeaderExtractor.ExtractHeaders(System.String)">
            <summary>
            Method that takes a full message and extract the headers from it.
            </summary>
            <param name="messageContent">The message to extract headers from. Does not need the body part. Needs the empty headers end line.</param>
            <returns>A collection of Name and Value pairs of headers</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="messageContent"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Header.HeaderExtractor.IsMoreLinesInHeaderValue(System.IO.TextReader)">
            <summary>
            Check if the next line is part of the current header value we are parsing by
            peeking on the next character of the <see cref="T:System.IO.TextReader"/>.<br/>
            This should only be called while parsing headers.
            </summary>
            <param name="reader">The reader from which the header is read from</param>
            <returns><see langword="true"/> if multi-line header. <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:OpenPop.Mime.Header.HeaderExtractor.SeparateHeaderNameAndValue(System.String)">
            <summary>
            Separate a full header line into a header name and a header value.
            </summary>
            <param name="rawHeader">The raw header line to be separated</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rawHeader"/> is <see langword="null"/></exception>
        </member>
        <member name="T:OpenPop.Mime.Header.HeaderFieldParser">
            <summary>
            Class that can parse different fields in the header sections of a MIME message.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Header.HeaderFieldParser.ParseContentTransferEncoding(System.String)">
            <summary>
            Parses the Content-Transfer-Encoding header.
            </summary>
            <param name="headerValue">The value for the header to be parsed</param>
            <returns>A <see cref="T:OpenPop.Mime.Header.ContentTransferEncoding"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="headerValue"/> could not be parsed to a <see cref="T:OpenPop.Mime.Header.ContentTransferEncoding"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Header.HeaderFieldParser.ParseImportance(System.String)">
            <summary>
            Parses an ImportanceType from a given Importance header value.
            </summary>
            <param name="headerValue">The value to be parsed</param>
            <returns>A <see cref="T:System.Net.Mail.MailPriority"/>. If the <paramref name="headerValue"/> is not recognized, Normal is returned.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Header.HeaderFieldParser.ParseContentType(System.String)">
            <summary>
            Parses a the value for the header Content-Type to 
            a <see cref="T:System.Net.Mime.ContentType"/> object.
            </summary>
            <param name="headerValue">The value to be parsed</param>
            <returns>A <see cref="T:System.Net.Mime.ContentType"/> object</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Header.HeaderFieldParser.ParseContentDisposition(System.String)">
            <summary>
            Parses a the value for the header Content-Disposition to a <see cref="T:System.Net.Mime.ContentDisposition"/> object.
            </summary>
            <param name="headerValue">The value to be parsed</param>
            <returns>A <see cref="T:System.Net.Mime.ContentDisposition"/> object</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Header.HeaderFieldParser.ParseId(System.String)">
            <summary>
            Parses an ID like Message-Id and Content-Id.<br/>
            Example:<br/>
            <c>&lt;test@test.com&gt;</c><br/>
            into<br/>
            <c>test@test.com</c>
            </summary>
            <param name="headerValue">The id to parse</param>
            <returns>A parsed ID</returns>
        </member>
        <member name="M:OpenPop.Mime.Header.HeaderFieldParser.ParseMultipleIDs(System.String)">
            <summary>
            Parses multiple IDs from a single string like In-Reply-To.
            </summary>
            <param name="headerValue">The value to parse</param>
            <returns>A list of IDs</returns>
        </member>
        <member name="T:OpenPop.Mime.Header.MessageHeader">
            <summary>
            Class that holds all headers for a message<br/>
            Headers which are unknown the the parser will be held in the <see cref="P:OpenPop.Mime.Header.MessageHeader.UnknownHeaders"/> collection.<br/>
            <br/>
            This class cannot be instantiated from outside the library.
            </summary>
            <remarks>
            See <a href="http://tools.ietf.org/html/rfc4021">RFC 4021</a> for a large list of headers.<br/>
            </remarks>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.UnknownHeaders">
            <summary>
            All headers which were not recognized and explicitly dealt with.<br/>
            This should mostly be custom headers, which are marked as X-[name].<br/>
            <br/>
            This list will be empty if all headers were recognized and parsed.
            </summary>
            <remarks>
            If you as a user, feels that a header in this collection should
            be parsed, feel free to notify the developers.
            </remarks>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.ContentDescription">
            <summary>
            A human readable description of the body<br/>
            <br/>
            <see langword="null"/> if no Content-Description header was present in the message.
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.ContentId">
            <summary>
            ID of the content part (like an attached image). Used with MultiPart messages.<br/>
            <br/>
            <see langword="null"/> if no Content-ID header field was present in the message.
            </summary>
            <see cref="P:OpenPop.Mime.Header.MessageHeader.MessageId">For an ID of the message</see>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.Keywords">
            <summary>
            Message keywords<br/>
            <br/>
            The list will be empty if no Keywords header was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.DispositionNotificationTo">
            <summary>
            A List of emails to people who wishes to be notified when some event happens.<br/>
            These events could be email:
            <list type="bullet">
              <item>deletion</item>
              <item>printing</item>
              <item>received</item>
              <item>...</item>
            </list>
            The list will be empty if no Disposition-Notification-To header was present in the message
            </summary>
            <remarks>See <a href="http://tools.ietf.org/html/rfc3798">RFC 3798</a> for details</remarks>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.Received">
            <summary>
            This is the Received headers. This tells the path that the email went.<br/>
            <br/>
            The list will be empty if no Received header was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.Importance">
            <summary>
            Importance of this email.<br/>
            <br/>
            The importance level is set to normal, if no Importance header field was mentioned or it contained
            unknown information. This is the expected behavior according to the RFC.
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.ContentTransferEncoding">
            <summary>
            This header describes the Content encoding during transfer.<br/>
            <br/>
            If no Content-Transfer-Encoding header was present in the message, it is set
            to the default of <see cref="F:OpenPop.Mime.Header.ContentTransferEncoding.SevenBit">SevenBit</see> in accordance to the RFC.
            </summary>
            <remarks>See <a href="http://tools.ietf.org/html/rfc2045#section-6">RFC 2045 section 6</a> for details</remarks>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.Cc">
            <summary>
            Carbon Copy. This specifies who got a copy of the message.<br/>
            <br/>
            The list will be empty if no Cc header was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.Bcc">
            <summary>
            Blind Carbon Copy. This specifies who got a copy of the message, but others
            cannot see who these persons are.<br/>
            <br/>
            The list will be empty if no Received Bcc was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.To">
            <summary>
            Specifies who this mail was for<br/>
            <br/>
            The list will be empty if no To header was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.From">
            <summary>
            Specifies who sent the email<br/>
            <br/>
            <see langword="null"/> if no From header field was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.ReplyTo">
            <summary>
            Specifies who a reply to the message should be sent to<br/>
            <br/>
            <see langword="null"/> if no Reply-To header field was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.InReplyTo">
            <summary>
            The message identifier(s) of the original message(s) to which the
            current message is a reply.<br/>
            <br/>
            The list will be empty if no In-Reply-To header was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.References">
            <summary>
            The message identifier(s) of other message(s) to which the current
            message is related to.<br/>
            <br/>
            The list will be empty if no References header was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.Sender">
            <summary>
            This is the sender of the email address.<br/>
            <br/>
            <see langword="null"/> if no Sender header field was present in the message
            </summary>
            <remarks>
            The RFC states that this field can be used if a secretary
            is sending an email for someone she is working for.
            The email here will then be the secretary's email, and
            the Reply-To field would hold the address of the person she works for.<br/>
            RFC states that if the Sender is the same as the From field,
            sender should not be included in the message.
            </remarks>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.ContentType">
            <summary>
            The Content-Type header field.<br/>
            <br/>
            If not set, the ContentType is created by the default "text/plain; charset=us-ascii" which is
            defined in <a href="http://tools.ietf.org/html/rfc2045#section-5.2">RFC 2045 section 5.2</a>.<br/>
            If set, the default is overridden.
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.ContentDisposition">
            <summary>
            Used to describe if a <see cref="T:OpenPop.Mime.MessagePart"/> is to be displayed or to be though of as an attachment.<br/>
            Also contains information about filename if such was sent.<br/>
            <br/>
            <see langword="null"/> if no Content-Disposition header field was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.Date">
            <summary>
            The Date when the email was sent.<br/>
            This is the raw value. <see cref="P:OpenPop.Mime.Header.MessageHeader.DateSent"/> for a parsed up <see cref="T:System.DateTime"/> value of this field.<br/>
            <br/>
            <see langword="DateTime.MinValue"/> if no Date header field was present in the message or if the date could not be parsed.
            </summary>
            <remarks>See <a href="http://tools.ietf.org/html/rfc5322#section-3.6.1">RFC 5322 section 3.6.1</a> for more details</remarks>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.DateSent">
            <summary>
            The Date when the email was sent.<br/>
            This is the parsed equivalent of <see cref="P:OpenPop.Mime.Header.MessageHeader.Date"/>.<br/>
            Notice that the <see cref="T:System.TimeZone"/> of the <see cref="T:System.DateTime"/> object is in UTC and has NOT been converted
            to local <see cref="T:System.TimeZone"/>.
            </summary>
            <remarks>See <a href="http://tools.ietf.org/html/rfc5322#section-3.6.1">RFC 5322 section 3.6.1</a> for more details</remarks>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.MessageId">
            <summary>
            An ID of the message that is SUPPOSED to be in every message according to the RFC.<br/>
            The ID is unique.<br/>
            <br/>
            <see langword="null"/> if no Message-ID header field was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.MimeVersion">
            <summary>
            The Mime Version.<br/>
            This field will almost always show 1.0<br/>
            <br/>
            <see langword="null"/> if no Mime-Version header field was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.ReturnPath">
            <summary>
            A single <see cref="T:OpenPop.Mime.Header.RfcMailAddress"/> with no username inside.<br/>
            This is a trace header field, that should be in all messages.<br/>
            Replies should be sent to this address.<br/>
            <br/>
            <see langword="null"/> if no Return-Path header field was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.MessageHeader.Subject">
            <summary>
            The subject line of the message in decoded, one line state.<br/>
            This should be in all messages.<br/>
            <br/>
            <see langword="null"/> if no Subject header field was present in the message
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Header.MessageHeader.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Parses a <see cref="T:System.Collections.Specialized.NameValueCollection"/> to a MessageHeader
            </summary>
            <param name="headers">The collection that should be traversed and parsed</param>
            <returns>A valid MessageHeader object</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headers"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Header.MessageHeader.ParseHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Parses a <see cref="T:System.Collections.Specialized.NameValueCollection"/> to a <see cref="T:OpenPop.Mime.Header.MessageHeader"/>
            </summary>
            <param name="headers">The collection that should be traversed and parsed</param>
            <returns>A valid <see cref="T:OpenPop.Mime.Header.MessageHeader"/> object</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headers"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Header.MessageHeader.ParseHeader(System.String,System.String)">
            <summary>
            Parses a single header and sets member variables according to it.
            </summary>
            <param name="headerName">The name of the header</param>
            <param name="headerValue">The value of the header in unfolded state (only one line)</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headerName"/> or <paramref name="headerValue"/> is <see langword="null"/></exception>
        </member>
        <member name="T:OpenPop.Mime.Header.Received">
            <summary>
            Class that hold information about one "Received:" header line.<br/>
            <br/>
            Visit these RFCs for more information:<br/>
            <see href="http://tools.ietf.org/html/rfc5321#section-4.4">RFC 5321 section 4.4</see><br/>
            <see href="http://tools.ietf.org/html/rfc4021#section-3.6.7">RFC 4021 section 3.6.7</see><br/>
            <see href="http://tools.ietf.org/html/rfc2822#section-3.6.7">RFC 2822 section 3.6.7</see><br/>
            <see href="http://tools.ietf.org/html/rfc2821#section-4.4">RFC 2821 section 4.4</see><br/>
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.Received.Date">
            <summary>
            The date of this received line.
            Is <see cref="F:System.DateTime.MinValue"/> if not present in the received header line.
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.Received.Names">
            <summary>
            A dictionary that contains the names and values of the
            received header line.<br/>
            If the received header is invalid and contained one name
            multiple times, the first one is used and the rest is ignored.
            </summary>
            <example>
            If the header lines looks like:
            <code>
            from sending.com (localMachine [127.0.0.1]) by test.net (Postfix)
            </code>
            then the dictionary will contain two keys: "from" and "by" with the values
            "sending.com (localMachine [127.0.0.1])" and "test.net (Postfix)".
            </example>
        </member>
        <member name="P:OpenPop.Mime.Header.Received.Raw">
            <summary>
            The raw input string that was parsed into this class.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Header.Received.#ctor(System.String)">
            <summary>
            Parses a Received header value.
            </summary>
            <param name="headerValue">The value for the header to be parsed</param>
            <exception cref="T:System.ArgumentNullException"><exception cref="T:System.ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception></exception>
        </member>
        <member name="M:OpenPop.Mime.Header.Received.ParseDictionary(System.String)">
            <summary>
            Parses the Received header name-value-list into a dictionary.
            </summary>
            <param name="headerValue">The full header value for the Received header</param>
            <returns>A dictionary where the name-value-list has been parsed into</returns>
        </member>
        <member name="T:OpenPop.Mime.Header.RfcMailAddress">
            <summary>
            This class is used for RFC compliant email addresses.<br/>
            <br/>
            The class cannot be instantiated from outside the library.
            </summary>
            <remarks>
            The <seealso cref="P:OpenPop.Mime.Header.RfcMailAddress.MailAddress"/> does not cover all the possible formats 
            for <a href="http://tools.ietf.org/html/rfc5322#section-3.4">RFC 5322 section 3.4</a> compliant email addresses.
            This class is used as an address wrapper to account for that deficiency.
            </remarks>
        </member>
        <member name="P:OpenPop.Mime.Header.RfcMailAddress.Address">
            <summary>
             The email address of this <see cref="T:OpenPop.Mime.Header.RfcMailAddress"/><br/>
             It is possibly string.Empty since RFC mail addresses does not require an email address specified.
            </summary>
            <example>
             Example header with email address:<br/>
             To: <c>Test test@mail.com</c><br/>
             Address will be <c>test@mail.com</c><br/>
            </example>
            <example>
             Example header without email address:<br/>
             To: <c>Test</c><br/>
             Address will be <see cref="F:System.String.Empty"/>.
            </example>
        </member>
        <member name="P:OpenPop.Mime.Header.RfcMailAddress.DisplayName">
            <summary>
             The display name of this <see cref="T:OpenPop.Mime.Header.RfcMailAddress"/><br/>
             It is possibly <see cref="F:System.String.Empty"/> since RFC mail addresses does not require a display name to be specified.
            </summary>
            <example>
             Example header with display name:<br/>
             To: <c>Test test@mail.com</c><br/>
             DisplayName will be <c>Test</c>
            </example>
            <example>
             Example header without display name:<br/>
             To: <c>test@test.com</c><br/>
             DisplayName will be <see cref="F:System.String.Empty"/>
            </example>
        </member>
        <member name="P:OpenPop.Mime.Header.RfcMailAddress.Raw">
            <summary>
            This is the Raw string used to describe the <see cref="T:OpenPop.Mime.Header.RfcMailAddress"/>.
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Header.RfcMailAddress.MailAddress">
            <summary>
            The <see cref="P:OpenPop.Mime.Header.RfcMailAddress.MailAddress"/> associated with the <see cref="T:OpenPop.Mime.Header.RfcMailAddress"/>. 
            </summary>
            <remarks>
            The value of this property can be <see lanword="null"/> in instances where the <see cref="P:OpenPop.Mime.Header.RfcMailAddress.MailAddress"/> cannot represent the address properly.<br/>
            Use <see cref="P:OpenPop.Mime.Header.RfcMailAddress.HasValidMailAddress"/> property to see if this property is valid.
            </remarks>
        </member>
        <member name="P:OpenPop.Mime.Header.RfcMailAddress.HasValidMailAddress">
            <summary>
            Specifies if the object contains a valid <see cref="P:OpenPop.Mime.Header.RfcMailAddress.MailAddress"/> reference.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Header.RfcMailAddress.#ctor(System.Net.Mail.MailAddress,System.String)">
            <summary>
            Constructs an <see cref="T:OpenPop.Mime.Header.RfcMailAddress"/> object from a <see cref="P:OpenPop.Mime.Header.RfcMailAddress.MailAddress"/> object.<br/>
            This constructor is used when we were able to construct a <see cref="P:OpenPop.Mime.Header.RfcMailAddress.MailAddress"/> from a string.
            </summary>
            <param name="mailAddress">The address that <paramref name="raw"/> was parsed into</param>
            <param name="raw">The raw unparsed input which was parsed into the <paramref name="mailAddress"/></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="mailAddress"/> or <paramref name="raw"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Header.RfcMailAddress.#ctor(System.String)">
            <summary>
            When we were unable to parse a string into a <see cref="P:OpenPop.Mime.Header.RfcMailAddress.MailAddress"/>, this constructor can be
            used. The Raw string is then used as the <see cref="P:OpenPop.Mime.Header.RfcMailAddress.DisplayName"/>.
            </summary>
            <param name="raw">The raw unparsed input which could not be parsed</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="raw"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Header.RfcMailAddress.ToString">
            <summary>
            A string representation of the <see cref="T:OpenPop.Mime.Header.RfcMailAddress"/> object
            </summary>
            <returns>Returns the string representation for the object</returns>
        </member>
        <member name="M:OpenPop.Mime.Header.RfcMailAddress.ParseMailAddress(System.String)">
            <summary>
            Parses an email address from a MIME header<br/>
            <br/>
            Examples of input:
            <c>Eksperten mailrobot &lt;noreply@mail.eksperten.dk&gt;</c><br/>
            <c>"Eksperten mailrobot" &lt;noreply@mail.eksperten.dk&gt;</c><br/>
            <c>&lt;noreply@mail.eksperten.dk&gt;</c><br/>
            <c>noreply@mail.eksperten.dk</c><br/>
            <br/>
            It might also contain encoded text, which will then be decoded.
            </summary>
            <param name="input">The value to parse out and email and/or a username</param>
            <returns>A <see cref="T:OpenPop.Mime.Header.RfcMailAddress"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
            <remarks>
            <see href="http://tools.ietf.org/html/rfc5322#section-3.4">RFC 5322 section 3.4</see> for more details on email syntax.<br/>
            <see cref="M:OpenPop.Mime.Decode.EncodedWord.Decode(System.String)">For more information about encoded text</see>.
            </remarks>
        </member>
        <member name="M:OpenPop.Mime.Header.RfcMailAddress.ParseMailAddresses(System.String)">
            <summary>
            Parses input of the form<br/>
            <c>Eksperten mailrobot &lt;noreply@mail.eksperten.dk&gt;, ...</c><br/>
            to a list of RFCMailAddresses
            </summary>
            <param name="input">The input that is a comma-separated list of EmailAddresses to parse</param>
            <returns>A List of <seealso cref="T:OpenPop.Mime.Header.RfcMailAddress"/> objects extracted from the <paramref name="input"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
        </member>
        <member name="T:OpenPop.Mime.Message">
            <summary>
            This is the root of the email tree structure.<br/>
            <see cref="T:OpenPop.Mime.MessagePart"/> for a description about the structure.<br/>
            <br/>
            A Message (this class) contains the headers of an email message such as:
            <code>
             - To
             - From
             - Subject
             - Content-Type
             - Message-ID
            </code>
            which are located in the <see cref="P:OpenPop.Mime.Message.Headers"/> property.<br/>
            <br/>
            Use the <see cref="P:OpenPop.Mime.Message.MessagePart"/> property to find the actual content of the email message.
            </summary>
            <example>
            Examples are available on the <a href="http://hpop.sourceforge.net/">project homepage</a>.
            </example>
        </member>
        <member name="P:OpenPop.Mime.Message.Headers">
            <summary>
            Headers of the Message.
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Message.MessagePart">
            <summary>
            This is the body of the email Message.<br/>
            <br/>
            If the body was parsed for this Message, this property will never be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:OpenPop.Mime.Message.RawMessage">
            <summary>
            The raw content from which this message has been constructed.<br/>
            These bytes can be persisted and later used to recreate the Message.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Message.#ctor(System.Byte[])">
            <summary>
            Convenience constructor for <see cref="M:OpenPop.Mime.Message.#ctor(System.Byte[],System.Boolean)"/>.<br/>
            <br/>
            Creates a message from a byte array. The full message including its body is parsed.
            </summary>
            <param name="rawMessageContent">The byte array which is the message contents to parse</param>
        </member>
        <member name="M:OpenPop.Mime.Message.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Constructs a message from a byte array.<br/>
            <br/>
            The headers are always parsed, but if <paramref name="parseBody"/> is <see langword="false"/>, the body is not parsed.
            </summary>
            <param name="rawMessageContent">The byte array which is the message contents to parse</param>
            <param name="parseBody">
            <see langword="true"/> if the body should be parsed,
            <see langword="false"/> if only headers should be parsed out of the <paramref name="rawMessageContent"/> byte array
            </param>
        </member>
        <member name="M:OpenPop.Mime.Message.ToMailMessage">
            <summary>
            This method will convert this <see cref="T:OpenPop.Mime.Message"/> into a <see cref="T:System.Net.Mail.MailMessage"/> equivalent.<br/>
            The returned <see cref="T:System.Net.Mail.MailMessage"/> can be used with <see cref="T:System.Net.Mail.SmtpClient"/> to forward the email.<br/>
            <br/>
            You should be aware of the following about this method:
            <list type="bullet">
            <item>
               All sender and receiver mail addresses are set.
               If you send this email using a <see cref="T:System.Net.Mail.SmtpClient"/> then all
               receivers in To, From, Cc and Bcc will receive the email once again.
            </item>
            <item>
               If you view the source code of this Message and looks at the source code of the forwarded
               <see cref="T:System.Net.Mail.MailMessage"/> returned by this method, you will notice that the source codes are not the same.
               The content that is presented by a mail client reading the forwarded <see cref="T:System.Net.Mail.MailMessage"/> should be the
               same as the original, though.
            </item>
            <item>
               Content-Disposition headers will not be copied to the <see cref="T:System.Net.Mail.MailMessage"/>.
               It is simply not possible to set these on Attachments.
            </item>
            <item>
               HTML content will be treated as the preferred view for the <see cref="P:System.Net.Mail.MailMessage.Body"/>. Plain text content will be used for the
               <see cref="P:System.Net.Mail.MailMessage.Body"/> when HTML is not available.
            </item>
            </list>
            </summary>
            <returns>A <see cref="T:System.Net.Mail.MailMessage"/> object that contains the same information that this Message does</returns>
        </member>
        <member name="M:OpenPop.Mime.Message.FindFirstPlainTextVersion">
            <summary>
            Finds the first text/plain <see cref="P:OpenPop.Mime.Message.MessagePart"/> in this message.<br/>
            This is a convenience method - it simply propagates the call to <see cref="M:OpenPop.Mime.Message.FindFirstMessagePartWithMediaType(System.String)"/>.<br/>
            <br/>
            If no text/plain version is found, <see langword="null"/> is returned.
            </summary>
            <returns>
            <see cref="P:OpenPop.Mime.Message.MessagePart"/> which has a MediaType of text/plain or <see langword="null"/>
            if such <see cref="P:OpenPop.Mime.Message.MessagePart"/> could not be found.
            </returns>
        </member>
        <member name="M:OpenPop.Mime.Message.FindFirstHtmlVersion">
            <summary>
            Finds the first text/html <see cref="P:OpenPop.Mime.Message.MessagePart"/> in this message.<br/>
            This is a convenience method - it simply propagates the call to <see cref="M:OpenPop.Mime.Message.FindFirstMessagePartWithMediaType(System.String)"/>.<br/>
            <br/>
            If no text/html version is found, <see langword="null"/> is returned.
            </summary>
            <returns>
            <see cref="P:OpenPop.Mime.Message.MessagePart"/> which has a MediaType of text/html or <see langword="null"/>
            if such <see cref="P:OpenPop.Mime.Message.MessagePart"/> could not be found.
            </returns>
        </member>
        <member name="M:OpenPop.Mime.Message.FindAllTextVersions">
            <summary>
            Finds all the <see cref="P:OpenPop.Mime.Message.MessagePart"/>'s which contains a text version.<br/>
            <br/>
            <see cref="P:OpenPop.Mime.MessagePart.IsText"/> for MessageParts which are considered to be text versions.<br/>
            <br/>
            Examples of MessageParts media types are:
            <list type="bullet">
               <item>text/plain</item>
               <item>text/html</item>
               <item>text/xml</item>
            </list>
            </summary>
            <returns>A List of MessageParts where each part is a text version</returns>
        </member>
        <member name="M:OpenPop.Mime.Message.FindAllAttachments">
            <summary>
            Finds all the <see cref="P:OpenPop.Mime.Message.MessagePart"/>'s which are attachments to this message.<br/>
            <br/>
            <see cref="P:OpenPop.Mime.MessagePart.IsAttachment"/> for MessageParts which are considered to be attachments.
            </summary>
            <returns>A List of MessageParts where each is considered an attachment</returns>
        </member>
        <member name="M:OpenPop.Mime.Message.FindFirstMessagePartWithMediaType(System.String)">
            <summary>
            Finds the first <see cref="P:OpenPop.Mime.Message.MessagePart"/> in the <see cref="T:OpenPop.Mime.Message"/> hierarchy with the given MediaType.<br/>
            <br/>
            The search in the hierarchy is a depth-first traversal.
            </summary>
            <param name="mediaType">The MediaType to search for. Case is ignored.</param>
            <returns>
            A <see cref="P:OpenPop.Mime.Message.MessagePart"/> with the given MediaType or <see langword="null"/> if no such <see cref="P:OpenPop.Mime.Message.MessagePart"/> was found
            </returns>
        </member>
        <member name="M:OpenPop.Mime.Message.FindAllMessagePartsWithMediaType(System.String)">
            <summary>
            Finds all the <see cref="P:OpenPop.Mime.Message.MessagePart"/>s in the <see cref="T:OpenPop.Mime.Message"/> hierarchy with the given MediaType.
            </summary>
            <param name="mediaType">The MediaType to search for. Case is ignored.</param>
            <returns>
            A List of <see cref="P:OpenPop.Mime.Message.MessagePart"/>s with the given MediaType.<br/>
            The List might be empty if no such <see cref="P:OpenPop.Mime.Message.MessagePart"/>s were found.<br/>
            The order of the elements in the list is the order which they are found using
            a depth first traversal of the <see cref="T:OpenPop.Mime.Message"/> hierarchy.
            </returns>
        </member>
        <member name="M:OpenPop.Mime.Message.Save(System.IO.FileInfo)">
            <summary>
            Save this <see cref="T:OpenPop.Mime.Message"/> to a file.<br/>
            <br/>
            Can be loaded at a later time using the <see cref="M:OpenPop.Mime.Message.Load(System.IO.FileInfo)"/> method.
            </summary>
            <param name="file">The File location to save the <see cref="T:OpenPop.Mime.Message"/> to. Existent files will be overwritten.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="file"/> is <see langword="null"/></exception>
            <exception>Other exceptions relevant to using a <see cref="T:System.IO.FileStream"/> might be thrown as well</exception>
        </member>
        <member name="M:OpenPop.Mime.Message.Save(System.IO.Stream)">
            <summary>
            Save this <see cref="T:OpenPop.Mime.Message"/> to a stream.<br/>
            </summary>
            <param name="messageStream">The stream to write to</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="messageStream"/> is <see langword="null"/></exception>
            <exception>Other exceptions relevant to <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/> might be thrown as well</exception>
        </member>
        <member name="M:OpenPop.Mime.Message.Load(System.IO.FileInfo)">
            <summary>
            Loads a <see cref="T:OpenPop.Mime.Message"/> from a file containing a raw email.
            </summary>
            <param name="file">The File location to load the <see cref="T:OpenPop.Mime.Message"/> from. The file must exist.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="file"/> is <see langword="null"/></exception>
            <exception cref="T:System.IO.FileNotFoundException">If <paramref name="file"/> does not exist</exception>
            <exception>Other exceptions relevant to a <see cref="T:System.IO.FileStream"/> might be thrown as well</exception>
            <returns>A <see cref="T:OpenPop.Mime.Message"/> with the content loaded from the <paramref name="file"/></returns>
        </member>
        <member name="M:OpenPop.Mime.Message.Load(System.IO.Stream)">
            <summary>
            Loads a <see cref="T:OpenPop.Mime.Message"/> from a <see cref="T:System.IO.Stream"/> containing a raw email.
            </summary>
            <param name="messageStream">The <see cref="T:System.IO.Stream"/> from which to load the raw <see cref="T:OpenPop.Mime.Message"/></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="messageStream"/> is <see langword="null"/></exception>
            <exception>Other exceptions relevant to <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> might be thrown as well</exception>
            <returns>A <see cref="T:OpenPop.Mime.Message"/> with the content loaded from the <paramref name="messageStream"/></returns>
        </member>
        <member name="T:OpenPop.Mime.MessagePart">
            <summary>
            A MessagePart is a part of an email message used to describe the whole email parse tree.<br/>
            <br/>
            <b>Email messages are tree structures</b>:<br/>
            Email messages may contain large tree structures, and the MessagePart are the nodes of the this structure.<br/>
            A MessagePart may either be a leaf in the structure or a internal node with links to other MessageParts.<br/>
            The root of the message tree is the <see cref="T:OpenPop.Mime.Message"/> class.<br/>
            <br/>
            <b>Leafs</b>:<br/>
            If a MessagePart is a leaf, the part is not a <see cref="P:OpenPop.Mime.MessagePart.IsMultiPart">MultiPart</see> message.<br/>
            Leafs are where the contents of an email are placed.<br/>
            This includes, but is not limited to: attachments, text or images referenced from HTML.<br/>
            The content of an attachment can be fetched by using the <see cref="P:OpenPop.Mime.MessagePart.Body"/> property.<br/>
            If you want to have the text version of a MessagePart, use the <see cref="M:OpenPop.Mime.MessagePart.GetBodyAsText"/> method which will<br/>
            convert the <see cref="P:OpenPop.Mime.MessagePart.Body"/> into a string using the encoding the message was sent with.<br/>
            <br/>
            <b>Internal nodes</b>:<br/>
            If a MessagePart is an internal node in the email tree structure, then the part is a <see cref="P:OpenPop.Mime.MessagePart.IsMultiPart">MultiPart</see> message.<br/>
            The <see cref="P:OpenPop.Mime.MessagePart.MessageParts"/> property will then contain links to the parts it contain.<br/>
            The <see cref="P:OpenPop.Mime.MessagePart.Body"/> property of the MessagePart will not be set.<br/>
            <br/>
            See the example for a parsing example.<br/>
            This class cannot be instantiated from outside the library.
            </summary>
            <example>
            This example illustrates how the message parse tree looks like given a specific message<br/>
            <br/>
            The message source in this example is:<br/>
            <code>
            MIME-Version: 1.0
            Content-Type: multipart/mixed; boundary="frontier"
            
            This is a message with multiple parts in MIME format.
            --frontier
            Content-Type: text/plain
            
            This is the body of the message.
            --frontier
            Content-Type: application/octet-stream
            Content-Transfer-Encoding: base64
            
            PGh0bWw+CiAgPGHLYWQ+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPHA+VGhpcyBpcyB0aGUg
            Ym9keSBvZiB0aGUgbWVzc2FnZS48L3A+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==
            --frontier--
            </code>
            The tree will look as follows, where the content-type media type of the message is listed<br/>
            <code>
            - Message root
              - multipart/mixed MessagePart
                - text/plain MessagePart
                - application/octet-stream MessagePart
            </code>
            It is possible to have more complex message trees like the following:<br/>
            <code>
            - Message root
              - multipart/mixed MessagePart
                - text/plain MessagePart
                - text/plain MessagePart
                - multipart/parallel
                  - audio/basic
                  - image/tiff
                - text/enriched
                - message/rfc822
            </code>
            But it is also possible to have very simple message trees like:<br/>
            <code>
            - Message root
              - text/plain
            </code>
            </example>
        </member>
        <member name="P:OpenPop.Mime.MessagePart.ContentType">
            <summary>
            The Content-Type header field.<br/>
            <br/>
            If not set, the ContentType is created by the default "text/plain; charset=us-ascii" which is
            defined in <a href="http://tools.ietf.org/html/rfc2045#section-5.2">RFC 2045 section 5.2</a>.<br/>
            <br/>
            If set, the default is overridden.
            </summary>
        </member>
        <member name="P:OpenPop.Mime.MessagePart.ContentDescription">
            <summary>
            A human readable description of the body<br/>
            <br/>
            <see langword="null"/> if no Content-Description header was present in the message.<br/>
            </summary>
        </member>
        <member name="P:OpenPop.Mime.MessagePart.ContentTransferEncoding">
            <summary>
            This header describes the Content encoding during transfer.<br/>
            <br/>
            If no Content-Transfer-Encoding header was present in the message, it is set
            to the default of <see cref="F:OpenPop.Mime.Header.ContentTransferEncoding.SevenBit">SevenBit</see> in accordance to the RFC.
            </summary>
            <remarks>See <a href="http://tools.ietf.org/html/rfc2045#section-6">RFC 2045 section 6</a> for details</remarks>
        </member>
        <member name="P:OpenPop.Mime.MessagePart.ContentId">
            <summary>
            ID of the content part (like an attached image). Used with MultiPart messages.<br/>
            <br/>
            <see langword="null"/> if no Content-ID header field was present in the message.
            </summary>
        </member>
        <member name="P:OpenPop.Mime.MessagePart.ContentDisposition">
            <summary>
            Used to describe if a <see cref="T:OpenPop.Mime.MessagePart"/> is to be displayed or to be though of as an attachment.<br/>
            Also contains information about filename if such was sent.<br/>
            <br/>
            <see langword="null"/> if no Content-Disposition header field was present in the message
            </summary>
        </member>
        <member name="P:OpenPop.Mime.MessagePart.BodyEncoding">
            <summary>
            This is the encoding used to parse the message body if the <see cref="T:OpenPop.Mime.MessagePart"/><br/>
            is not a MultiPart message. It is derived from the <see cref="P:OpenPop.Mime.MessagePart.ContentType"/> character set property.
            </summary>
        </member>
        <member name="P:OpenPop.Mime.MessagePart.Body">
            <summary>
            This is the parsed body of this <see cref="T:OpenPop.Mime.MessagePart"/>.<br/>
            It is parsed in that way, if the body was ContentTransferEncoded, it has been decoded to the
            correct bytes.<br/>
            <br/>
            It will be <see langword="null"/> if this <see cref="T:OpenPop.Mime.MessagePart"/> is a MultiPart message.<br/>
            Use <see cref="P:OpenPop.Mime.MessagePart.IsMultiPart"/> to check if this <see cref="T:OpenPop.Mime.MessagePart"/> is a MultiPart message.
            </summary>
        </member>
        <member name="P:OpenPop.Mime.MessagePart.IsMultiPart">
            <summary>
            Describes if this <see cref="T:OpenPop.Mime.MessagePart"/> is a MultiPart message<br/>
            <br/>
            The <see cref="T:OpenPop.Mime.MessagePart"/> is a MultiPart message if the <see cref="P:OpenPop.Mime.MessagePart.ContentType"/> media type property starts with "multipart/"
            </summary>
        </member>
        <member name="P:OpenPop.Mime.MessagePart.IsText">
            <summary>
            A <see cref="T:OpenPop.Mime.MessagePart"/> is considered to be holding text in it's body if the MediaType
            starts either "text/" or is equal to "message/rfc822"
            </summary>
        </member>
        <member name="P:OpenPop.Mime.MessagePart.IsAttachment">
            <summary>
            A <see cref="T:OpenPop.Mime.MessagePart"/> is considered to be an attachment, if<br/>
            - it is not holding <see cref="P:OpenPop.Mime.MessagePart.IsText">text</see> and is not a <see cref="P:OpenPop.Mime.MessagePart.IsMultiPart">MultiPart</see> message<br/>
            or<br/>
            - it has a Content-Disposition header that says it is an attachment
            </summary>
        </member>
        <member name="P:OpenPop.Mime.MessagePart.FileName">
            <summary>
            This is a convenient-property for figuring out a FileName for this <see cref="T:OpenPop.Mime.MessagePart"/>.<br/>
            If the <see cref="T:OpenPop.Mime.MessagePart"/> is a MultiPart message, then it makes no sense to try to find a FileName.<br/>
            <br/>
            The FileName can be specified in the <see cref="P:OpenPop.Mime.MessagePart.ContentDisposition"/> or in the <see cref="P:OpenPop.Mime.MessagePart.ContentType"/> properties.<br/>
            If none of these places two places tells about the FileName, a default "(no name)" is returned.
            </summary>
        </member>
        <member name="P:OpenPop.Mime.MessagePart.MessageParts">
            <summary>
            If this <see cref="T:OpenPop.Mime.MessagePart"/> is a MultiPart message, then this property
            has a list of each of the Multiple parts that the message consists of.<br/>
            <br/>
            It is <see langword="null"/> if it is not a MultiPart message.<br/>
            Use <see cref="P:OpenPop.Mime.MessagePart.IsMultiPart"/> to check if this <see cref="T:OpenPop.Mime.MessagePart"/> is a MultiPart message.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.MessagePart.#ctor(System.Byte[],OpenPop.Mime.Header.MessageHeader)">
            <summary>
            Used to construct the topmost message part
            </summary>
            <param name="rawBody">The body that needs to be parsed</param>
            <param name="headers">The headers that should be used from the message</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rawBody"/> or <paramref name="headers"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.MessagePart.ParseBodyEncoding(System.String)">
            <summary>
            Parses a character set into an encoding
            </summary>
            <param name="characterSet">The character set that needs to be parsed. <see langword="null"/> is allowed.</param>
            <returns>The encoding specified by the <paramref name="characterSet"/> parameter, or ASCII if the character set was <see langword="null"/> or empty</returns>
        </member>
        <member name="M:OpenPop.Mime.MessagePart.FindFileName(System.Net.Mime.ContentType,System.Net.Mime.ContentDisposition,System.String)">
            <summary>
            Figures out the filename of this message part from some headers.
            <see cref="P:OpenPop.Mime.MessagePart.FileName"/> property.
            </summary>
            <param name="contentType">The Content-Type header</param>
            <param name="contentDisposition">The Content-Disposition header</param>
            <param name="defaultName">The default filename to use, if no other could be found</param>
            <returns>The filename found, or the default one if not such filename could be found in the headers</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="contentType"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.MessagePart.ParseBody(System.Byte[])">
            <summary>
            Parses a byte array as a body of an email message.
            </summary>
            <param name="rawBody">The byte array to parse as body of an email message. This array may not contain headers.</param>
        </member>
        <member name="M:OpenPop.Mime.MessagePart.ParseMultiPartBody(System.Byte[])">
            <summary>
            Parses the <paramref name="rawBody"/> byte array as a MultiPart message.<br/>
            It is not valid to call this method if <see cref="P:OpenPop.Mime.MessagePart.IsMultiPart"/> returned <see langword="false"/>.<br/>
            Fills the <see cref="P:OpenPop.Mime.MessagePart.MessageParts"/> property of this <see cref="T:OpenPop.Mime.MessagePart"/>.
            </summary>
            <param name="rawBody">The byte array which is to be parsed as a MultiPart message</param>
        </member>
        <member name="M:OpenPop.Mime.MessagePart.GetMessagePart(System.Byte[])">
            <summary>
            Given a byte array describing a full message.<br/>
            Parses the byte array into a <see cref="T:OpenPop.Mime.MessagePart"/>.
            </summary>
            <param name="rawMessageContent">The byte array containing both headers and body of a message</param>
            <returns>A <see cref="T:OpenPop.Mime.MessagePart"/> which was described by the <paramref name="rawMessageContent"/> byte array</returns>
        </member>
        <member name="M:OpenPop.Mime.MessagePart.GetMultiPartParts(System.Byte[],System.String)">
            <summary>
            Gets a list of byte arrays where each entry in the list is a full message of a message part
            </summary>
            <param name="rawBody">The raw byte array describing the body of a message which is a MultiPart message</param>
            <param name="multipPartBoundary">The delimiter that splits the different MultiPart bodies from each other</param>
            <returns>A list of byte arrays, each a full message of a <see cref="T:OpenPop.Mime.MessagePart"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rawBody"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.MessagePart.FindPositionOfNextMultiPartBoundary(System.IO.Stream,System.String,System.Boolean@)">
            <summary>
            Method that is able to find a specific MultiPart boundary in a Stream.<br/>
            The Stream passed should not be used for anything else then for looking for MultiPart boundaries
            <param name="stream">The stream to find the next MultiPart boundary in. Do not use it for anything else then with this method.</param>
            <param name="multiPartBoundary">The MultiPart boundary to look for. This should be found in the <see cref="P:OpenPop.Mime.MessagePart.ContentType"/> header</param>
            <param name="lastMultipartBoundaryFound">Is set to <see langword="true"/> if the next MultiPart boundary was indicated to be the last one, by having -- appended to it. Otherwise set to <see langword="false"/></param>
            </summary>
            <returns>The position of the first character of the line that contained MultiPartBoundary or -1 if no (more) MultiPart boundaries was found</returns>
        </member>
        <member name="M:OpenPop.Mime.MessagePart.DecodeBody(System.Byte[],OpenPop.Mime.Header.ContentTransferEncoding)">
            <summary>
            Decodes a byte array into another byte array based upon the Content Transfer encoding
            </summary>
            <param name="messageBody">The byte array to decode into another byte array</param>
            <param name="contentTransferEncoding">The <see cref="P:OpenPop.Mime.MessagePart.ContentTransferEncoding"/> of the byte array</param>
            <returns>A byte array which comes from the <paramref name="contentTransferEncoding"/> being used on the <paramref name="messageBody"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="messageBody"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="contentTransferEncoding"/> is unsupported</exception>
        </member>
        <member name="M:OpenPop.Mime.MessagePart.GetBodyAsText">
            <summary>
            Gets this MessagePart's <see cref="P:OpenPop.Mime.MessagePart.Body"/> as text.<br/>
            This is simply the <see cref="P:OpenPop.Mime.MessagePart.BodyEncoding"/> being used on the raw bytes of the <see cref="P:OpenPop.Mime.MessagePart.Body"/> property.<br/>
            This method is only valid to call if it is not a MultiPart message and therefore contains a body.<br/>
            </summary>
            <returns>The <see cref="P:OpenPop.Mime.MessagePart.Body"/> property as a string</returns>
        </member>
        <member name="M:OpenPop.Mime.MessagePart.Save(System.IO.FileInfo)">
            <summary>
            Save this <see cref="T:OpenPop.Mime.MessagePart"/>'s contents to a file.<br/>
            There are no methods to reload the file.
            </summary>
            <param name="file">The File location to save the <see cref="T:OpenPop.Mime.MessagePart"/> to. Existent files will be overwritten.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="file"/> is <see langword="null"/></exception>
            <exception>Other exceptions relevant to using a <see cref="T:System.IO.FileStream"/> might be thrown as well</exception>
        </member>
        <member name="M:OpenPop.Mime.MessagePart.Save(System.IO.Stream)">
            <summary>
            Save this <see cref="T:OpenPop.Mime.MessagePart"/>'s contents to a stream.<br/>
            </summary>
            <param name="messageStream">The stream to write to</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="messageStream"/> is <see langword="null"/></exception>
            <exception>Other exceptions relevant to <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/> might be thrown as well</exception>
        </member>
        <member name="T:OpenPop.Mime.Traverse.AnswerMessageTraverser`1">
            <summary>
            This is an abstract class which handles traversing of a <see cref="T:OpenPop.Mime.Message"/> tree structure.<br/>
            It runs through the message structure using a depth-first traversal.
            </summary>
            <typeparam name="TAnswer">The answer you want from traversing the message tree structure</typeparam>
        </member>
        <member name="M:OpenPop.Mime.Traverse.AnswerMessageTraverser`1.VisitMessage(OpenPop.Mime.Message)">
            <summary>
            Call this when you want an answer for a full message.
            </summary>
            <param name="message">The message you want to traverse</param>
            <returns>An answer</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="message"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Traverse.AnswerMessageTraverser`1.VisitMessagePart(OpenPop.Mime.MessagePart)">
            <summary>
            Call this method when you want to find an answer for a <see cref="T:OpenPop.Mime.MessagePart"/>
            </summary>
            <param name="messagePart">The <see cref="T:OpenPop.Mime.MessagePart"/> part you want an answer from.</param>
            <returns>An answer</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="messagePart"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Mime.Traverse.AnswerMessageTraverser`1.CaseLeaf(OpenPop.Mime.MessagePart)">
            <summary>
            For a concrete implementation an answer must be returned for a leaf <see cref="T:OpenPop.Mime.MessagePart"/>, which are
            MessageParts that are not <see cref="P:OpenPop.Mime.MessagePart.IsMultiPart">MultiParts.</see>
            </summary>
            <param name="messagePart">The message part which is a leaf and thereby not a MultiPart</param>
            <returns>An answer</returns>
        </member>
        <member name="M:OpenPop.Mime.Traverse.AnswerMessageTraverser`1.MergeLeafAnswers(System.Collections.Generic.List{`0})">
            <summary>
            For a concrete implementation, when a MultiPart <see cref="T:OpenPop.Mime.MessagePart"/> has fetched it's answers from it's children, these
            answers needs to be merged. This is the responsibility of this method.
            </summary>
            <param name="leafAnswers">The answer that the leafs gave</param>
            <returns>A merged answer</returns>
        </member>
        <member name="T:OpenPop.Mime.Traverse.AttachmentFinder">
            <summary>
            Finds all <see cref="T:OpenPop.Mime.MessagePart"/>s which are considered to be attachments
            </summary>
        </member>
        <member name="T:OpenPop.Mime.Traverse.FindAllMessagePartsWithMediaType">
            <summary>
             Finds all the <see cref="T:OpenPop.Mime.MessagePart"/>s which have a given MediaType using a depth first traversal.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Traverse.FindAllMessagePartsWithMediaType.VisitMessage(OpenPop.Mime.Message,System.String)">
            <summary>
            Finds all the <see cref="T:OpenPop.Mime.MessagePart"/>s with the given MediaType
            </summary>
            <param name="message">The <see cref="T:OpenPop.Mime.Message"/> to start looking in</param>
            <param name="question">The MediaType to look for. Case is ignored.</param>
            <returns>
            A List of <see cref="T:OpenPop.Mime.MessagePart"/>s with the given MediaType.<br/>
            <br/>
            The List might be empty if no such <see cref="T:OpenPop.Mime.MessagePart"/>s were found.<br/>
            The order of the elements in the list is the order which they are found using
            a depth first traversal of the <see cref="T:OpenPop.Mime.Message"/> hierarchy.
            </returns>
        </member>
        <member name="M:OpenPop.Mime.Traverse.FindAllMessagePartsWithMediaType.VisitMessagePart(OpenPop.Mime.MessagePart,System.String)">
            <summary>
            Finds all the <see cref="T:OpenPop.Mime.MessagePart"/>s with the given MediaType
            </summary>
            <param name="messagePart">The <see cref="T:OpenPop.Mime.MessagePart"/> to start looking in</param>
            <param name="question">The MediaType to look for. Case is ignored.</param>
            <returns>
            A List of <see cref="T:OpenPop.Mime.MessagePart"/>s with the given MediaType.<br/>
            <br/>
            The List might be empty if no such <see cref="T:OpenPop.Mime.MessagePart"/>s were found.<br/>
            The order of the elements in the list is the order which they are found using
            a depth first traversal of the <see cref="T:OpenPop.Mime.Message"/> hierarchy.
            </returns>
        </member>
        <member name="T:OpenPop.Mime.Traverse.FindFirstMessagePartWithMediaType">
            <summary>
             Finds the first <see cref="T:OpenPop.Mime.MessagePart"/> which have a given MediaType in a depth first traversal.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Traverse.FindFirstMessagePartWithMediaType.VisitMessage(OpenPop.Mime.Message,System.String)">
            <summary>
            Finds the first <see cref="T:OpenPop.Mime.MessagePart"/> with the given MediaType
            </summary>
            <param name="message">The <see cref="T:OpenPop.Mime.Message"/> to start looking in</param>
            <param name="question">The MediaType to look for. Case is ignored.</param>
            <returns>A <see cref="T:OpenPop.Mime.MessagePart"/> with the given MediaType or <see langword="null"/> if no such <see cref="T:OpenPop.Mime.MessagePart"/> was found</returns>
        </member>
        <member name="M:OpenPop.Mime.Traverse.FindFirstMessagePartWithMediaType.VisitMessagePart(OpenPop.Mime.MessagePart,System.String)">
            <summary>
            Finds the first <see cref="T:OpenPop.Mime.MessagePart"/> with the given MediaType
            </summary>
            <param name="messagePart">The <see cref="T:OpenPop.Mime.MessagePart"/> to start looking in</param>
            <param name="question">The MediaType to look for. Case is ignored.</param>
            <returns>A <see cref="T:OpenPop.Mime.MessagePart"/> with the given MediaType or <see langword="null"/> if no such <see cref="T:OpenPop.Mime.MessagePart"/> was found</returns>
        </member>
        <member name="T:OpenPop.Mime.Traverse.IAnswerMessageTraverser`1">
            <summary>
            This interface describes a MessageTraverser which is able to traverse a Message hierarchy structure
            and deliver some answer.
            </summary>
            <typeparam name="TAnswer">This is the type of the answer you want to have delivered.</typeparam>
        </member>
        <member name="M:OpenPop.Mime.Traverse.IAnswerMessageTraverser`1.VisitMessage(OpenPop.Mime.Message)">
            <summary>
            Call this when you want to apply this traverser on a <see cref="T:OpenPop.Mime.Message"/>.
            </summary>
            <param name="message">The <see cref="T:OpenPop.Mime.Message"/> which you want to traverse. Must not be <see langword="null"/>.</param>
            <returns>An answer</returns>
        </member>
        <member name="M:OpenPop.Mime.Traverse.IAnswerMessageTraverser`1.VisitMessagePart(OpenPop.Mime.MessagePart)">
            <summary>
            Call this when you want to apply this traverser on a <see cref="T:OpenPop.Mime.MessagePart"/>.
            </summary>
            <param name="messagePart">The <see cref="T:OpenPop.Mime.MessagePart"/> which you want to traverse. Must not be <see langword="null"/>.</param>
            <returns>An answer</returns>
        </member>
        <member name="T:OpenPop.Mime.Traverse.IQuestionAnswerMessageTraverser`2">
            <summary>
            This interface describes a MessageTraverser which is able to traverse a Message structure
            and deliver some answer given some question.
            </summary>
            <typeparam name="TAnswer">This is the type of the answer you want to have delivered.</typeparam>
            <typeparam name="TQuestion">This is the type of the question you want to have answered.</typeparam>
        </member>
        <member name="M:OpenPop.Mime.Traverse.IQuestionAnswerMessageTraverser`2.VisitMessage(OpenPop.Mime.Message,`0)">
            <summary>
            Call this when you want to apply this traverser on a <see cref="T:OpenPop.Mime.Message"/>.
            </summary>
            <param name="message">The <see cref="T:OpenPop.Mime.Message"/> which you want to traverse. Must not be <see langword="null"/>.</param>
            <param name="question">The question</param>
            <returns>An answer</returns>
        </member>
        <member name="M:OpenPop.Mime.Traverse.IQuestionAnswerMessageTraverser`2.VisitMessagePart(OpenPop.Mime.MessagePart,`0)">
            <summary>
            Call this when you want to apply this traverser on a <see cref="T:OpenPop.Mime.MessagePart"/>.
            </summary>
            <param name="messagePart">The <see cref="T:OpenPop.Mime.MessagePart"/> which you want to traverse. Must not be <see langword="null"/>.</param>
            <param name="question">The question</param>
            <returns>An answer</returns>
        </member>
        <member name="T:OpenPop.Mime.Traverse.MultipleMessagePartFinder">
            <summary>
             An abstract class that implements the MergeLeafAnswers method.<br/>
             The method simply returns the union of all answers from the leaves.
            </summary>
        </member>
        <member name="M:OpenPop.Mime.Traverse.MultipleMessagePartFinder.MergeLeafAnswers(System.Collections.Generic.List{System.Collections.Generic.List{OpenPop.Mime.MessagePart}})">
            <summary>
            Adds all the <paramref name="leafAnswers"/> in one big answer
            </summary>
            <param name="leafAnswers">The answers to merge</param>
            <returns>A list with has all the elements in the <paramref name="leafAnswers"/> lists</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="leafAnswers"/> is <see langword="null"/></exception>
        </member>
        <member name="T:OpenPop.Mime.Traverse.TextVersionFinder">
            <summary>
            Finds all text/[something] versions in a Message hierarchy
            </summary>
        </member>
        <member name="T:OpenPop.Pop3.Apop">
            <summary>
            Class for computing the digest needed when issuing the APOP command to a POP3 server.
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Apop.ComputeDigest(System.String,System.String)">
            <summary>
            Create the digest for the APOP command so that the server can validate
            we know the password for some user.
            </summary>
            <param name="password">The password for the user</param>
            <param name="serverTimestamp">The timestamp advertised in the server greeting to the POP3 client</param>
            <returns>The password and timestamp hashed with the MD5 algorithm outputted as a HEX string</returns>
        </member>
        <member name="T:OpenPop.Pop3.AuthenticationMethod">
            <summary>
            Describes the authentication method to use when authenticating towards a POP3 server.
            </summary>
        </member>
        <member name="F:OpenPop.Pop3.AuthenticationMethod.UsernameAndPassword">
            <summary>
            Authenticate using the UsernameAndPassword method.<br/>
            This will pass the username and password to the server in cleartext.<br/>
            <see cref="F:OpenPop.Pop3.AuthenticationMethod.Apop"/> is more secure but might not be supported on a server.<br/>
            This method is not recommended. Use <see cref="F:OpenPop.Pop3.AuthenticationMethod.Auto"/> instead.
            <br/>
            If SSL is used, there is no loss of security by using this authentication method.
            </summary>
        </member>
        <member name="F:OpenPop.Pop3.AuthenticationMethod.Apop">
            <summary>
            Authenticate using the Authenticated Post Office Protocol method, which is more secure then
            <see cref="F:OpenPop.Pop3.AuthenticationMethod.UsernameAndPassword"/> since it is a request-response protocol where server checks if the
             client knows a shared secret, which is the password, without the password itself being transmitted.<br/>
            This authentication method uses MD5 under its hood.<br/>
            <br/>
            This authentication method is not supported by many servers.<br/>
            Choose this option if you want maximum security.
            </summary>
        </member>
        <member name="F:OpenPop.Pop3.AuthenticationMethod.Auto">
            <summary>
            This is the recomended method to authenticate with.<br/>
            If <see cref="F:OpenPop.Pop3.AuthenticationMethod.Apop"/> is supported by the server, <see cref="F:OpenPop.Pop3.AuthenticationMethod.Apop"/> is used for authentication.<br/>
            If <see cref="F:OpenPop.Pop3.AuthenticationMethod.Apop"/> is not supported, Auto will fall back to <see cref="F:OpenPop.Pop3.AuthenticationMethod.UsernameAndPassword"/> authentication.
            </summary>
        </member>
        <member name="F:OpenPop.Pop3.AuthenticationMethod.CramMd5">
            <summary>
            Logs in the the POP3 server using CRAM-MD5 authentication scheme.<br/>
            This in essence uses the MD5 hashing algorithm on the user password and a server challenge.
            </summary>
        </member>
        <member name="T:OpenPop.Pop3.ConnectionState">
            <summary>
            Some of these states are defined by <a href="http://tools.ietf.org/html/rfc1939">RFC 1939</a>.<br/>
            Which commands that are allowed in which state can be seen in the same RFC.<br/>
            <br/>
            Used to keep track of which state the <see cref="T:OpenPop.Pop3.Pop3Client"/> is in.
            </summary>
        </member>
        <member name="F:OpenPop.Pop3.ConnectionState.Disconnected">
            <summary>
            This is when the Pop3Client is not even connected to the server
            </summary>
        </member>
        <member name="F:OpenPop.Pop3.ConnectionState.Authorization">
            <summary>
            This is when the server is awaiting user credentials
            </summary>
        </member>
        <member name="F:OpenPop.Pop3.ConnectionState.Transaction">
            <summary>
            This is when the server has been given the user credentials, and we are allowed
            to use commands specific to this users mail drop
            </summary>
        </member>
        <member name="T:OpenPop.Pop3.CramMd5">
            <summary>
            Implements the CRAM-MD5 algorithm as specified in <a href="http://tools.ietf.org/html/rfc2195">RFC 2195</a>.
            </summary>
        </member>
        <member name="F:OpenPop.Pop3.CramMd5.ipad">
            <summary>
            Defined by <a href="http://tools.ietf.org/html/rfc2104#section-2">RFC 2104</a>
            Is a 64 byte array with all entries set to 0x36.
            </summary>
        </member>
        <member name="F:OpenPop.Pop3.CramMd5.opad">
            <summary>
            Defined by <a href="http://tools.ietf.org/html/rfc2104#section-2">RFC 2104</a>
            Is a 64 byte array with all entries set to 0x5C.
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.CramMd5.#cctor">
            <summary>
            Initializes the static fields
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.CramMd5.ComputeDigest(System.String,System.String,System.String)">
            <summary>
            Computes the digest needed to login to a server using CRAM-MD5.<br/>
            <br/>
            This computes:<br/>
            MD5((password XOR opad), MD5((password XOR ipad), challenge))
            </summary>
            <param name="username">The username of the user who wants to log in</param>
            <param name="password">The password for the <paramref name="username"/></param>
            <param name="challenge">
            The challenge received from the server when telling it CRAM-MD5 authenticated is wanted.
            Is a base64 encoded string.
            </param>
            <returns>The response to the challenge, which the server can validate and log in the user if correct</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="username"/>, 
            <paramref name="password"/> or 
            <paramref name="challenge"/> is <see langword="null"/>
            </exception>
        </member>
        <member name="M:OpenPop.Pop3.CramMd5.Hash(System.Byte[])">
            <summary>
            Hashes a byte array using the MD5 algorithm.
            </summary>
            <param name="toHash">The byte array to hash</param>
            <returns>The result of hashing the <paramref name="toHash"/> bytes with the MD5 algorithm</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="toHash"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Pop3.CramMd5.Concatenate(System.Byte[],System.Byte[])">
            <summary>
            Concatenates two byte arrays into one
            </summary>
            <param name="one">The first byte array</param>
            <param name="two">The second byte array</param>
            <returns>A concatenated byte array</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="one"/> or <paramref name="two"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Pop3.CramMd5.Xor(System.Byte[],System.Byte[])">
            <summary>
            XORs a byte array with another.<br/>
            Each byte in <paramref name="toXor"/> is XORed with the corresponding byte
            in <paramref name="toXorWith"/> until the end of <paramref name="toXor"/> is encountered.
            </summary>
            <param name="toXor">The byte array to XOR</param>
            <param name="toXorWith">The byte array to XOR with</param>
            <returns>A new byte array with the XORed results</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="toXor"/> or <paramref name="toXorWith"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the lengths of the arrays are not equal</exception>
        </member>
        <member name="M:OpenPop.Pop3.CramMd5.GetSharedSecretInBytes(System.String)">
            <summary>
            This method is responsible to generate the byte array needed
            from the shared secret - the password.<br/>
            
            RFC 2195 says:<br/>
            The shared secret is null-padded to a length of 64 bytes. If the
            shared secret is longer than 64 bytes, the MD5 digest of the
            shared secret is used as a 16 byte input to the keyed MD5
            calculation.
            </summary>
            <param name="password">This is the shared secret</param>
            <returns>The 64 bytes that is to be used from the shared secret</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="password"/> is <see langword="null"/></exception>
        </member>
        <member name="T:OpenPop.Pop3.Disposable">
            <summary>
            Utility class that simplifies the usage of <see cref="T:System.IDisposable"/>
            </summary>
        </member>
        <member name="P:OpenPop.Pop3.Disposable.IsDisposed">
            <summary>
            Returns <see langword="true"/> if this instance has been disposed of, <see langword="false"/> otherwise
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Disposable.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:OpenPop.Pop3.Disposable"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Disposable.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Disposable.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources. Remember to call this method from your derived classes.
            </summary>
            <param name="disposing">
            Set to <c>true</c> to release both managed and unmanaged resources.<br/>
            Set to <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:OpenPop.Pop3.Disposable.AssertDisposed">
            <summary>
            Used to assert that the object has not been disposed
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object is in a disposed state.</exception>
            <remarks>
            The method is to be used by the subclasses in order to provide a simple method for checking the 
            disposal state of the object.
            </remarks>
        </member>
        <member name="T:OpenPop.Pop3.Exceptions.InvalidLoginException">
            <summary>
            Thrown when the supplied username or password is not accepted by the POP3 server.
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Exceptions.InvalidLoginException.#ctor(System.Exception)">
            <summary>
             Creates a InvalidLoginException with the given message and InnerException
            </summary>
            <param name="innerException">The exception that is the cause of this exception</param>
        </member>
        <member name="T:OpenPop.Pop3.Exceptions.InvalidUseException">
            <summary>
            Thrown when the <see cref="T:OpenPop.Pop3.Pop3Client"/> is being used in an invalid way.<br/>
            This could for example happen if a someone tries to fetch a message without authenticating.
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Exceptions.InvalidUseException.#ctor(System.String)">
            <summary>
             Creates a InvalidUseException with the given message
            </summary>
            <param name="message">The message to include in the exception</param>
        </member>
        <member name="T:OpenPop.Pop3.Exceptions.LoginDelayException">
            <summary>
            This exception indicates that the user has logged in recently and
            will not be allowed to login again until the login delay period has expired.
            Check the parameter to the LOGIN-DELAY capability, that the server responds with when
            <see cref="M:OpenPop.Pop3.Pop3Client.Capabilities"/> is called, to see what the delay is.
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Exceptions.LoginDelayException.#ctor(OpenPop.Pop3.Exceptions.PopServerException)">
            <summary>
             Creates a LoginDelayException with the given inner exception
            </summary>
            <param name="innerException">The exception that is the cause of this exception</param>
        </member>
        <member name="T:OpenPop.Pop3.Exceptions.PopClientException">
            <summary>
            This is the base exception for all <see cref="T:OpenPop.Pop3.Pop3Client"/> exceptions.
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Exceptions.PopClientException.#ctor(System.String,System.Exception)">
            <summary>
             Creates a PopClientException with the given message and InnerException
            </summary>
            <param name="message">The message to include in the exception</param>
            <param name="innerException">The exception that is the cause of this exception</param>
        </member>
        <member name="M:OpenPop.Pop3.Exceptions.PopClientException.#ctor(System.String)">
            <summary>
             Creates a PopClientException with the given message
            </summary>
            <param name="message">The message to include in the exception</param>
        </member>
        <member name="T:OpenPop.Pop3.Exceptions.PopServerException">
            <summary>
            Thrown when the server does not return "+" to a command.<br/>
            The server response is then placed inside.
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Exceptions.PopServerException.#ctor(System.String)">
            <summary>
             Creates a PopServerException with the given message
            </summary>
            <param name="message">The message to include in the exception</param>
        </member>
        <member name="T:OpenPop.Pop3.Exceptions.PopServerLockedException">
            <summary>
            Thrown when the user mailbox is locked or in-use.<br/>
            </summary>
            <remarks>
            The mail boxes are locked when an existing session is open on the POP3 server.<br/>
            Only one POP3 client can use a POP3 account at a time.
            </remarks>
        </member>
        <member name="M:OpenPop.Pop3.Exceptions.PopServerLockedException.#ctor(OpenPop.Pop3.Exceptions.PopServerException)">
            <summary>
             Creates a PopServerLockedException with the given inner exception
            </summary>
            <param name="innerException">The exception that is the cause of this exception</param>
        </member>
        <member name="T:OpenPop.Pop3.Exceptions.PopServerNotAvailableException">
            <summary>
            Thrown when the POP3 server sends an error "-ERR" during initial handshake "HELO".
            </summary>	
        </member>
        <member name="M:OpenPop.Pop3.Exceptions.PopServerNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
             Creates a PopServerNotAvailableException with the given message and InnerException
            </summary>
            <param name="message">The message to include in the exception</param>
            <param name="innerException">The exception that is the cause of this exception</param>
        </member>
        <member name="T:OpenPop.Pop3.Exceptions.PopServerNotFoundException">
            <summary>
            Thrown when the specified POP3 server can not be found or connected to.
            </summary>	
        </member>
        <member name="M:OpenPop.Pop3.Exceptions.PopServerNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
             Creates a PopServerNotFoundException with the given message and InnerException
            </summary>
            <param name="message">The message to include in the exception</param>
            <param name="innerException">The exception that is the cause of this exception</param>
        </member>
        <member name="T:OpenPop.Pop3.Pop3Client">
            <summary>
            POP3 compliant POP Client<br/>
            <br/>	
            If you want to override where logging is sent, look at <see cref="T:OpenPop.Common.Logging.DefaultLogger"/>
            </summary>
            <example>
            Examples are available on the <a href="http://hpop.sourceforge.net/">project homepage</a>.
            </example>
        </member>
        <member name="P:OpenPop.Pop3.Pop3Client.Stream">
            <summary>
            The stream used to communicate with the server
            </summary>
        </member>
        <member name="P:OpenPop.Pop3.Pop3Client.LastServerResponse">
            <summary>
            This is the last response the server sent back when a command was issued to it
            </summary>
        </member>
        <member name="P:OpenPop.Pop3.Pop3Client.ApopTimeStamp">
            <summary>
            The APOP time stamp sent by the server in it's welcome message if APOP is supported.
            </summary>
        </member>
        <member name="P:OpenPop.Pop3.Pop3Client.State">
            <summary>
            Describes what state the <see cref="T:OpenPop.Pop3.Pop3Client"/> is in
            </summary>
        </member>
        <member name="P:OpenPop.Pop3.Pop3Client.Connected">
            <summary>
            Tells whether the <see cref="T:OpenPop.Pop3.Pop3Client"/> is connected to a POP server or not
            </summary>
        </member>
        <member name="P:OpenPop.Pop3.Pop3Client.ApopSupported">
            <summary>
            Allows you to check if the server supports
            the <see cref="F:OpenPop.Pop3.AuthenticationMethod.Apop"/> authentication method.<br/>
            <br/>
            This value is filled when the connect method has returned,
            as the server tells in its welcome message if APOP is supported.
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.#ctor">
            <summary>
            Constructs a new Pop3Client for you to use.
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:OpenPop.Pop3.Pop3Client"/>.<br/>
            This is the implementation of the <see cref="T:System.IDisposable"/> interface.<br/>
            Sends the QUIT command to the server before closing the streams.
            </summary>
            <param name="disposing"><see langword="true"/> if managed and unmanaged code should be disposed, <see langword="false"/> if only managed code should be disposed</param>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.Connect(System.IO.Stream)">
            <summary>
            Connect to the server using user supplied stream
            </summary>
            <param name="stream">The stream used to communicate with the server</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to a remote POP3 server using default timeouts of 60.000 milliseconds
            </summary>
            <param name="hostname">The <paramref name="hostname"/> of the POP3 server</param>
            <param name="port">The port of the POP3 server</param>
            <param name="useSsl"><see langword="true"/> if SSL should be used. <see langword="false"/> if plain TCP should be used.</param>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerNotAvailableException">If the server did not send an OK message when a connection was established</exception>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerNotFoundException">If it was not possible to connect to the server</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="hostname"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If port is not in the range [<see cref="F:System.Net.IPEndPoint.MinPort"/>, <see cref="F:System.Net.IPEndPoint.MaxPort"/></exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.Connect(System.String,System.Int32,System.Boolean,System.Int32,System.Int32,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Connects to a remote POP3 server
            </summary>
            <param name="hostname">The <paramref name="hostname"/> of the POP3 server</param>
            <param name="port">The port of the POP3 server</param>
            <param name="useSsl"><see langword="true"/> if SSL should be used. <see langword="false"/> if plain TCP should be used.</param>
            <param name="receiveTimeout">Timeout in milliseconds before a socket should time out from reading. Set to 0 or -1 to specify infinite timeout.</param>
            <param name="sendTimeout">Timeout in milliseconds before a socket should time out from sending. Set to 0 or -1 to specify infinite timeout.</param>
            <param name="certificateValidator">If you want to validate the certificate in a SSL connection, pass a reference to your validator. Supply <see langword="null"/> if default should be used.</param>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerNotAvailableException">If the server did not send an OK message when a connection was established</exception>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerNotFoundException">If it was not possible to connect to the server</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="hostname"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If port is not in the range [<see cref="F:System.Net.IPEndPoint.MinPort"/>, <see cref="F:System.Net.IPEndPoint.MaxPort"/> or if any of the timeouts is less than -1.</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.Disconnect">
            <summary>
            Disconnects from POP3 server.
            Sends the QUIT command before closing the connection, which deletes all the messages that was marked as such.
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.Authenticate(System.String,System.String)">
            <summary>
            Authenticates a user towards the POP server using <see cref="F:OpenPop.Pop3.AuthenticationMethod.Auto"/>.<br/>
            If this authentication fails but you are sure that the username and password is correct, it might
            be that that the POP3 server is wrongly telling the client it supports <see cref="F:OpenPop.Pop3.AuthenticationMethod.Apop"/>.
            You should try using <see cref="M:OpenPop.Pop3.Pop3Client.Authenticate(System.String,System.String,OpenPop.Pop3.AuthenticationMethod)"/> while passing <see cref="F:OpenPop.Pop3.AuthenticationMethod.UsernameAndPassword"/> to the method.
            </summary>
            <param name="username">The username</param>
            <param name="password">The user password</param>
            <exception cref="T:OpenPop.Pop3.Exceptions.InvalidLoginException">If the user credentials was not accepted</exception>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerLockedException">If the server said the the mailbox was locked</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="username"/> or <paramref name="password"/> is <see langword="null"/></exception>
            <exception cref="T:OpenPop.Pop3.Exceptions.LoginDelayException">If the server rejects the login because of too recent logins</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.Authenticate(System.String,System.String,OpenPop.Pop3.AuthenticationMethod)">
            <summary>
            Authenticates a user towards the POP server using some <see cref="T:OpenPop.Pop3.AuthenticationMethod"/>.
            </summary>
            <param name="username">The username</param>
            <param name="password">The user password</param>
            <param name="authenticationMethod">The way that the client should authenticate towards the server</param>
            <exception cref="T:System.NotSupportedException">If <see cref="F:OpenPop.Pop3.AuthenticationMethod.Apop"/> is used, but not supported by the server</exception>
            <exception cref="T:OpenPop.Pop3.Exceptions.InvalidLoginException">If the user credentials was not accepted</exception>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerLockedException">If the server said the the mailbox was locked</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="username"/> or <paramref name="password"/> is <see langword="null"/></exception>
            <exception cref="T:OpenPop.Pop3.Exceptions.LoginDelayException">If the server rejects the login because of too recent logins</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.AuthenticateUsingUserAndPassword(System.String,System.String)">
            <summary>
            Authenticates a user towards the POP server using the USER and PASSWORD commands
            </summary>
            <param name="username">The username</param>
            <param name="password">The user password</param>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server responded with -ERR</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.AuthenticateUsingApop(System.String,System.String)">
            <summary>
            Authenticates a user towards the POP server using APOP
            </summary>
            <param name="username">The username</param>
            <param name="password">The user password</param>
            <exception cref="T:System.NotSupportedException">Thrown when the server does not support APOP</exception>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server responded with -ERR</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.AuthenticateUsingCramMd5(System.String,System.String)">
            <summary>
            Authenticates using the CRAM-MD5 authentication method
            </summary>
            <param name="username">The username</param>
            <param name="password">The user password</param>
            <exception cref="T:System.NotSupportedException">Thrown when the server does not support AUTH CRAM-MD5</exception>
            <exception cref="T:OpenPop.Pop3.Exceptions.InvalidLoginException">If the user credentials was not accepted</exception>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerLockedException">If the server said the the mailbox was locked</exception>
            <exception cref="T:OpenPop.Pop3.Exceptions.LoginDelayException">If the server rejects the login because of too recent logins</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.GetMessageCount">
            <summary>
            Get the number of messages on the server using a STAT command
            </summary>
            <returns>The message count on the server</returns>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the STAT command</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.DeleteMessage(System.Int32)">
            <summary>
            Marks the message with the given message number as deleted.<br/>
            <br/>
            The message will not be deleted until a QUIT command is sent to the server.<br/>
            This is done when you call <see cref="M:OpenPop.Pop3.Pop3Client.Disconnect"/> or when the Pop3Client is <see cref="M:OpenPop.Pop3.Pop3Client.Dispose(System.Boolean)">Disposed</see>.
            </summary>
            <param name="messageNumber">
            The number of the message to be deleted. This message may not already have been deleted.<br/>
            The <paramref name="messageNumber"/> must be inside the range [1, messageCount]
            </param>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the delete command</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.DeleteAllMessages">
            <summary>
            Marks all messages as deleted.<br/>
            <br/>
            The messages will not be deleted until a QUIT command is sent to the server.<br/>
            This is done when you call <see cref="M:OpenPop.Pop3.Pop3Client.Disconnect"/> or when the Pop3Client is <see cref="M:OpenPop.Pop3.Pop3Client.Dispose(System.Boolean)">Disposed</see>.<br/>
            The method assumes that no prior message has been marked as deleted, and is not valid to call if this is wrong.
            </summary>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept one of the delete commands. All prior marked messages will still be marked.</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.NoOperation">
            <summary>
            Keep server active by sending a NOOP command.<br/>
            This might keep the server from closing the connection due to inactivity.<br/>
            <br/>
            RFC:<br/>
            The POP3 server does nothing, it merely replies with a positive response.
            </summary>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the NOOP command</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.Reset">
            <summary>
            Send a reset command to the server.<br/>
            <br/>
            RFC:<br/>
            If any messages have been marked as deleted by the POP3
            server, they are unmarked. The POP3 server then replies
            with a positive response.
            </summary>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the RSET command</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.GetMessageUid(System.Int32)">
            <summary>
            Get a unique ID for a single message.<br/>
            </summary>
            <param name="messageNumber">
            Message number, which may not be marked as deleted.<br/>
            The <paramref name="messageNumber"/> must be inside the range [1, messageCount]
            </param>
            <returns>The unique ID for the message</returns>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the UIDL command. This could happen if the <paramref name="messageNumber"/> does not exist</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.GetMessageUids">
            <summary>
            Gets a list of unique IDs for all messages.<br/>
            Messages marked as deleted are not listed.
            </summary>
            <returns>
            A list containing the unique IDs in sorted order from message number 1 and upwards.
            </returns>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the UIDL command</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.GetMessageSize(System.Int32)">
            <summary>
            Gets the size in bytes of a single message
            </summary>
            <param name="messageNumber">
            The number of a message which may not be a message marked as deleted.<br/>
            The <paramref name="messageNumber"/> must be inside the range [1, messageCount]
            </param>
            <returns>Size of the message</returns>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the LIST command</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.GetMessageSizes">
            <summary>
            Get the sizes in bytes of all the messages.<br/>
            Messages marked as deleted are not listed.
            </summary>
            <returns>Size of each message excluding deleted ones</returns>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the LIST command</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.GetMessage(System.Int32)">
            <summary>
            Fetches a message from the server and parses it
            </summary>
            <param name="messageNumber">
            Message number on server, which may not be marked as deleted.<br/>
            Must be inside the range [1, messageCount]
            </param>
            <returns>The message, containing the email message</returns>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the command sent to fetch the message</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.GetMessageAsBytes(System.Int32)">
            <summary>
            Fetches a message in raw form from the server
            </summary>
            <param name="messageNumber">
            Message number on server, which may not be marked as deleted.<br/>
            Must be inside the range [1, messageCount]
            </param>
            <returns>The raw bytes of the message</returns>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the command sent to fetch the message</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.GetMessageHeaders(System.Int32)">
            <summary>
            Get all the headers for a message.<br/>
            The server will not need to send the body of the message.
            </summary>
            <param name="messageNumber">
            Message number, which may not be marked as deleted.<br/>
            Must be inside the range [1, messageCount]
            </param>
            <returns>MessageHeaders object</returns>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the command sent to fetch the message</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.Capabilities">
            <summary>
            Asks the server to return it's capability listing.<br/>
            This is an optional command, which a server is not enforced to accept.
            </summary>
            <returns>
            The returned Dictionary keys are the capability names.<br/>
            The Lists pointed to are the capability parameters fitting that certain capability name.
            See <a href="http://tools.ietf.org/html/rfc2449#section-6">RFC section 6</a> for explanation for some of the capabilities.
            </returns>
            <remarks>
            Capabilities are case-insensitive.<br/>
            The dictionary uses case-insensitive searching, but the Lists inside
            does not. Therefore you will have to use something like the code below
            to search for a capability parameter.<br/>
            foo is the capability name and bar is the capability parameter.
            <code>
            List&lt;string&gt; arguments = capabilities["foo"];
            bool contains = null != arguments.Find(delegate(string str)
            			{
            				return String.Compare(str, "bar", true) == 0;
            			});
            </code>
            If we were running on .NET framework >= 3.5, a HashSet could have been used.
            </remarks>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the capability command</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.ExtractApopTimestamp(System.String)">
            <summary>
            Examines string to see if it contains a time stamp to use with the APOP command.<br/>
            If it does, sets the <see cref="P:OpenPop.Pop3.Pop3Client.ApopTimeStamp"/> property to this value.
            </summary>
            <param name="response">The string to examine</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="response"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.IsOkResponse(System.String)">
            <summary>
            Tests a string to see if it is a "+" string.<br/>
            An "+" string should be returned by a compliant POP3
            server if the request could be served.<br/>
            <br/>
            The method does only check if it starts with "+".
            </summary>
            <param name="response">The string to examine</param>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">Thrown if server did not respond with "+" message</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.SendCommand(System.String)">
            <summary>
            Sends a command to the POP server.<br/>
            If this fails, an exception is thrown.
            </summary>
            <param name="command">The command to send to server</param>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not send an OK message to the command</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.SendCommandIntResponse(System.String,System.Int32)">
            <summary>
            Sends a command to the POP server, expects an integer reply in the response
            </summary>
            <param name="command">command to send to server</param>
            <param name="location">
            The location of the int to return.<br/>
            Example:<br/>
            <c>S: +OK 2 200</c><br/>
            Set <paramref name="location"/>=1 to get 2<br/>
            Set <paramref name="location"/>=2 to get 200<br/>
            </param>
            <returns>Integer value in the reply</returns>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the command</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.GetMessageAsBytes(System.Int32,System.Boolean)">
            <summary>
            Asks the server for a message and returns the message response as a byte array.
            </summary>
            <param name="messageNumber">
            Message number on server, which may not be marked as deleted.<br/>
            Must be inside the range [1, messageCount]
            </param>
            <param name="askOnlyForHeaders">If <see langword="true"/> only the header part of the message is requested from the server. If <see langword="false"/> the full message is requested</param>
            <returns>A byte array that the message requested consists of</returns>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerException">If the server did not accept the command sent to fetch the message</exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.IsLastLineInMultiLineResponse(System.Byte[])">
            <summary>
            Check if the bytes received is the last line in a multi line response
            from the pop3 server. It is the last line if the line contains only a "."
            </summary>
            <param name="bytesReceived">The last line received from the server, which could be the last response line</param>
            <returns><see langword="true"/> if last line in a multi line response, <see langword="false"/> otherwise</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="bytesReceived"/> is <see langword="null"/></exception>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.IsLastLineInMultiLineResponse(System.String)">
            <see cref="M:OpenPop.Pop3.Pop3Client.IsLastLineInMultiLineResponse(System.Byte[])"> for documentation</see>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.ValidateMessageNumber(System.Int32)">
            <summary>
            Method for checking that a <paramref name="messageNumber"/> argument given to some method
            is indeed valid. If not, <see cref="T:OpenPop.Pop3.Exceptions.InvalidUseException"/> will be thrown.
            </summary>
            <param name="messageNumber">The message number to validate</param>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.DisconnectStreams">
            <summary>
            Closes down the streams and sets the Pop3Client into the initial configuration
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.SetInitialValues">
            <summary>
            Sets the initial values on the public properties of this Pop3Client.
            </summary>
        </member>
        <member name="M:OpenPop.Pop3.Pop3Client.CheckFailedLoginServerResponse(System.String,OpenPop.Pop3.Exceptions.PopServerException)">
            <summary>
            Checks for extra response codes when an authentication has failed and throws
            the correct exception.
            If no such response codes is found, nothing happens.
            </summary>
            <param name="serverErrorResponse">The server response string</param>
            <param name="e">The exception thrown because the server responded with -ERR</param>
            <exception cref="T:OpenPop.Pop3.Exceptions.PopServerLockedException">If the account is locked or in use</exception>
            <exception cref="T:OpenPop.Pop3.Exceptions.LoginDelayException">If the server rejects the login because of too recent logins</exception>
        </member>
        <member name="T:BKSystem.IO.BitStream">
            <summary>
            	Creates a stream for reading and writing variable-length data.
            </summary>
            <remarks>
            	<b><font color="red">Notes to Callers:</font></b> Make sure to
            	include the "BitStream.resx" resource file in projects using the
            	<see cref="T:BKSystem.IO.BitStream"/> class.<br></br>
            	<br></br>
            	[20051201]: Fixed problem with <c>public virtual void Write(ulong bits, int bitIndex, int count)</c>
            	and <c>public virtual int Read(out ulong bits, int bitIndex, int count)</c> methods.<br></br>
            	<br></br>
            	[20051127]: Added <c>public virtual void WriteTo(Stream bits);</c> to write
            	the contents of the current <b>bit</b> stream to another stream.<br></br>
            	<br></br>
            	[20051125]: Added the following implicit operators to allow type casting
            	instances of the <see cref="T:BKSystem.IO.BitStream"/> class to and from other types
            	of <see cref="T:System.IO.Stream"/> objects:<br></br>
            	<br></br>
            	<c>public static implicit operator BitStream(MemoryStream bits);</c><br></br>
            	<c>public static implicit operator MemoryStream(BitStream bits);</c><br></br>
            	<c>public static implicit operator BitStream(FileStream bits);</c><br></br>
            	<c>public static implicit operator BitStream(BufferedStream bits);</c><br></br>
            	<c>public static implicit operator BufferedStream(BitStream bits);</c><br></br>
            	<c>public static implicit operator BitStream(NetworkStream bits);</c><br></br>
            	<c>public static implicit operator BitStream(CryptoStream bits);</c><br></br>
            	<br></br>
            	[20051124]: Added <c>public virtual <see cref="T:System.Byte"/> [] ToByteArray();</c> method.<br></br>
            	<br></br>
            	[20051124]: The <c>public override <see cref="T:System.Int32"/> ReadByte();</c> and
            	<c>public override void WriteByte(<see cref="T:System.Byte"/> value)</c> method are now
            	supported by the <see cref="T:BKSystem.IO.BitStream"/> class.<br></br>
            	<br></br>
            	[20051123]: Added <c>public BitStream(<see cref="T:System.IO.Stream"/> bits);</c> contructor.<br></br>
            	<br></br>
            </remarks>
            <seealso cref="T:BKSystem.IO.BitStream"/>
            <seealso cref="T:System.IO.Stream"/>
            <seealso cref="T:System.Int32"/>
            <seealso cref="T:System.Byte"/>
        </member>
        <member name="T:BKSystem.IO.BitStream.BitStreamResources">
            <summary>
            	Manages reading resources on behalf of the <see cref="T:BKSystem.IO.BitStream"/>
            	class.
            </summary>
            <remarks>
            	<b><font color="red">Notes to Callers:</font></b> Make sure to
            	include the "BitStream.resx" resource file in projects using the
            	<see cref="T:BKSystem.IO.BitStream"/> class.
            </remarks>
        </member>
        <member name="F:BKSystem.IO.BitStream.BitStreamResources._resman">
            <summary>
            	The <see cref="T:System.Resources.ResourceManager"/> object.
            </summary>
            <remarks>
            	.
            </remarks>
        </member>
        <member name="F:BKSystem.IO.BitStream.BitStreamResources._oResManLock">
            <summary>
            	An <see cref="T:System.Object"/> used to lock access to
            	<see cref="T:BKSystem.IO.BitStream"/> resources while the current
            	<see cref="T:System.Resources.ResourceManager"/> is busy.
            </summary>
            <remarks>
            	.
            </remarks>
        </member>
        <member name="F:BKSystem.IO.BitStream.BitStreamResources._blnLoadingResource">
            <summary>
            	A <see cref="T:System.Boolean"/> value specifying whether a resource is
            	currently being loaded.
            </summary>
            <remarks>
            	.
            </remarks>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.BitStreamResources.InitialiseResourceManager">
            <summary>
            	Initialises the resource manager.
            </summary>
            <remarks>
            	.
            </remarks>
        </member>
        <member name="M:BKSystem.IO.BitStream.BitStreamResources.GetString(System.String)">
            <summary>
            	Gets the specified string resource.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="name">
            	A <see cref="T:System.String"/> representing the specified resource.
            </param>
            <returns>
            	A <see cref="T:System.String"/> representing the contents of the specified
            	resource.
            </returns>
            <seealso cref="T:System.String"/>
        </member>
        <member name="F:BKSystem.IO.BitStream.SizeOfByte">
            <summary>
            	An <see cref="T:System.Int32"/> value defining the number of bits
            	in a <see cref="T:System.Byte"/> value type.
            </summary>
            <remarks>
            	This field is constant.
            </remarks>
            <seealso cref="T:System.Int32"/>
            <seealso cref="T:System.Byte"/>
        </member>
        <member name="F:BKSystem.IO.BitStream.SizeOfChar">
            <summary>
            	An <see cref="T:System.Int32"/> value defining the number of bits
            	in a <see cref="T:System.Char"/> value type.
            </summary>
            <remarks>
            	This field is constant.
            </remarks>
            <seealso cref="T:System.Int32"/>
            <seealso cref="T:System.Char"/>
        </member>
        <member name="F:BKSystem.IO.BitStream.SizeOfUInt16">
            <summary>
            	An <see cref="T:System.Int32"/> value defining the number of bits
            	in a <see cref="T:System.UInt16"/> value type.
            </summary>
            <remarks>
            	This field is constant.
            </remarks>
            <seealso cref="T:System.Int32"/>
            <seealso cref="T:System.UInt16"/>
        </member>
        <member name="F:BKSystem.IO.BitStream.SizeOfUInt32">
            <summary>
            	An <see cref="T:System.Int32"/> value defining the number of bits
            	in a <see cref="T:System.UInt32"/> value type.
            </summary>
            <remarks>
            	This field is constant.
            </remarks>
            <seealso cref="T:System.Int32"/>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="F:BKSystem.IO.BitStream.SizeOfSingle">
            <summary>
            	An <see cref="T:System.Int32"/> value defining the number of bits
            	in a <see cref="T:System.Single"/> value type.
            </summary>
            <remarks>
            	This field is constant.
            </remarks>
            <seealso cref="T:System.Int32"/>
            <seealso cref="T:System.Single"/>
        </member>
        <member name="F:BKSystem.IO.BitStream.SizeOfUInt64">
            <summary>
            	An <see cref="T:System.Int32"/> value defining the number of bits
            	in a <see cref="T:System.UInt64"/> value type.
            </summary>
            <remarks>
            	This field is constant.
            </remarks>
            <seealso cref="T:System.Int32"/>
            <seealso cref="T:System.UInt64"/>
        </member>
        <member name="F:BKSystem.IO.BitStream.SizeOfDouble">
            <summary>
            	An <see cref="T:System.Int32"/> value defining the number of bits
            	in a <see cref="T:System.Double"/> value type.
            </summary>
            <remarks>
            	This field is constant.
            </remarks>
            <seealso cref="T:System.Int32"/>
            <seealso cref="T:System.Double"/>
        </member>
        <member name="F:BKSystem.IO.BitStream.BitBuffer_SizeOfElement">
            <summary>
            	An <see cref="T:System.UInt32"/> value defining the number of bits
            	per element in the internal buffer.
            </summary>
            <remarks>
            	This field is constant.
            </remarks>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="F:BKSystem.IO.BitStream.BitBuffer_SizeOfElement_Shift">
            <summary>
            	An <see cref="T:System.Int32"/> value defining the number of bit
            	shifts equivalent to the number of bits per element in the
            	internal buffer.
            </summary>
            <remarks>
            	This field is constant.
            </remarks>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="F:BKSystem.IO.BitStream.BitBuffer_SizeOfElement_Mod">
            <summary>
            	An <see cref="T:System.UInt32"/> value defining the equivalent of
            	a divisor in bitwise <b>AND</b> operations emulating
            	modulo calculations.
            </summary>
            <remarks>
            	This field is constant.
            </remarks>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="F:BKSystem.IO.BitStream.BitMaskHelperLUT">
            <summary>
            	An <see cref="T:System.UInt32"/> array defining a series of values
            	useful in generating bit masks in read and write operations.
            </summary>
            <remarks>
            	This field is static.
            </remarks>
        </member>
        <member name="F:BKSystem.IO.BitStream._blnIsOpen">
            <summary>
            	A <see cref="T:System.Boolean"/> value specifying whether the current
            	stream is able to process data.
            </summary>
            <remarks>
            	This field is set to <b>true</b> by default.
            </remarks>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="F:BKSystem.IO.BitStream._auiBitBuffer">
            <summary>
            	An array of <see cref="T:System.UInt32"/> values specifying the internal
            	bit buffer for the current stream.
            </summary>
            <remarks>
            	.
            </remarks>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="F:BKSystem.IO.BitStream._uiBitBuffer_Length">
            <summary>
            	An <see cref="T:System.UInt32"/> value specifying the current length of the
            	internal bit buffer for the current stream.
            </summary>
            <remarks>
            	.
            </remarks>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="F:BKSystem.IO.BitStream._uiBitBuffer_Index">
            <summary>
            	An <see cref="T:System.UInt32"/> value specifying the current elemental index
            	of the internal bit buffer for the current stream.
            </summary>
            <remarks>
            	.
            </remarks>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="F:BKSystem.IO.BitStream._uiBitBuffer_BitIndex">
            <summary>
            	An <see cref="T:System.UInt32"/> value specifying the current bit index for the
            	current element of the internal bit buffer for the current stream.
            </summary>
            <remarks>
            	.
            </remarks>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="F:BKSystem.IO.BitStream._ifp">
            <summary>
            	An <see cref="T:System.IFormatProvider"/> object specifying the format specifier
            	for the current stream.
            </summary>
            <remarks>
            	This field is set to <b><see cref="P:System.Globalization.CultureInfo.InvariantCulture"/></b>
            	by default.
            </remarks>
            <see cref="T:System.IFormatProvider"/>
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
        </member>
        <member name="P:BKSystem.IO.BitStream.Length">
            <summary>
            	Gets the length of this stream in <b>bits</b>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <remarks>
            	.
            </remarks>
            <value>
            	An <see cref="T:System.Int64"/> value specifying the length of this stream in
            	<b>bits</b>.
            </value>
            <seealso cref="T:System.Int64"/>
        </member>
        <member name="P:BKSystem.IO.BitStream.Length8">
            <summary>
            	Gets the maximum number of <b>8-bit</b> values required to store this
            	stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <remarks>
            	.
            </remarks>
            <example>
            	<font face="Courier New">
            	<font color="green">
            	// This property can be used in conjunction with the <see cref="M:BKSystem.IO.BitStream.Read(System.Byte[],System.Int32,System.Int32)"/> method<br></br>
            	// to read the entire stream into a <see cref="T:System.Byte"/> array.<br></br>
            	</font>
            	:<br></br>
            	BitStream bstrm = <font color="blue">new</font> BitStream();<br></br>
            	:<br></br>
            	:<br></br>
            	<font color="blue">byte</font> [] abytBuffer = <font color="blue">new byte</font> [bstrm.Length8];<br></br>
            	<font color="blue">int</font> iBitsRead = Read(abytBuffer, 0, (<font color="blue">int</font>)bstrm.Length8);<br></br>
            	:<br></br>
            	</font>
            </example>
            <value>
            	An <see cref="T:System.Int64"/> value specifying the maximum number of
            	<b>8-bit</b> values required to store this stream.
            </value>
            <seealso cref="M:BKSystem.IO.BitStream.Read(System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="T:System.Byte"/>
            <seealso cref="T:System.Int64"/>
        </member>
        <member name="P:BKSystem.IO.BitStream.Length16">
            <summary>
            	Gets the maximum number of <b>16-bit</b> values required to store this
            	stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <remarks>
            	.
            </remarks>
            <example>
            	<font face="Courier New">
            	<font color="green">
            	// This property can be used in conjunction with the <see cref="M:BKSystem.IO.BitStream.Read(System.Int16[],System.Int32,System.Int32)"/> method<br></br>
            	// to read the entire stream into an <see cref="T:System.Int16"/> array.<br></br>
            	</font>
            	:<br></br>
            	BitStream bstrm = <font color="blue">new</font> BitStream();<br></br>
            	:<br></br>
            	:<br></br>
            	<font color="blue">short</font> [] asBuffer = <font color="blue">new short</font> [bstrm.Length16];<br></br>
            	<font color="blue">int</font> iBitsRead = Read(asBuffer, 0, (<font color="blue">int</font>)bstrm.Length16);<br></br>
            	:<br></br>
            	</font>
            </example>
            <value>
            	An <see cref="T:System.Int64"/> value specifying the maximum number of
            	<b>16-bit</b> values required to store this stream.
            </value>
            <seealso cref="M:BKSystem.IO.BitStream.Read(System.Int16[],System.Int32,System.Int32)"/>
            <seealso cref="T:System.Int16"/>
            <seealso cref="T:System.Int64"/>
        </member>
        <member name="P:BKSystem.IO.BitStream.Length32">
            <summary>
            	Gets the maximum number of <b>32-bit</b> values required to store this
            	stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <remarks>
            	.
            </remarks>
            <example>
            	<font face="Courier New">
            	<font color="green">
            	// This property can be used in conjunction with the <see cref="M:BKSystem.IO.BitStream.Read(System.Int32[],System.Int32,System.Int32)"/> method<br></br>
            	// to read the entire stream into an <see cref="T:System.Int32"/> array.<br></br>
            	</font>
            	:<br></br>
            	BitStream bstrm = <font color="blue">new</font> BitStream();<br></br>
            	:<br></br>
            	:<br></br>
            	<font color="blue">int</font> [] aiBuffer = <font color="blue">new int</font> [bstrm.Length32];<br></br>
            	<font color="blue">int</font> iBitsRead = Read(aiBuffer, 0, (<font color="blue">int</font>)bstrm.Length32);<br></br>
            	:<br></br>
            	</font>
            </example>
            <value>
            	An <see cref="T:System.Int64"/> value specifying the maximum number of
            	<b>32-bit</b> values required to store this stream.
            </value>
            <seealso cref="M:BKSystem.IO.BitStream.Read(System.Int32[],System.Int32,System.Int32)"/>
            <seealso cref="T:System.Int32"/>
            <seealso cref="T:System.Int64"/>
        </member>
        <member name="P:BKSystem.IO.BitStream.Length64">
            <summary>
            	Gets the maximum number of <b>64-bit</b> values required to store this
            	stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <remarks>
            	.
            </remarks>
            <example>
            	<font face="Courier New">
            	<font color="green">
            	// This property can be used in conjunction with the <see cref="M:BKSystem.IO.BitStream.Read(System.Int64[],System.Int32,System.Int32)"/> method<br></br>
            	// to read the entire stream into an <see cref="T:System.Int64"/> array.<br></br>
            	</font>
            	:<br></br>
            	BitStream bstrm = <font color="blue">new</font> BitStream();<br></br>
            	:<br></br>
            	:<br></br>
            	<font color="blue">long</font> [] alBuffer = <font color="blue">new long</font> [bstrm.Length64];<br></br>
            	<font color="blue">int</font> iBitsRead = Read(alBuffer, 0, (<font color="blue">int</font>)bstrm.Length64);<br></br>
            	:<br></br>
            	</font>
            </example>
            <value>
            	An <see cref="T:System.Int64"/> value specifying the maximum number of
            	<b>64-bit</b> values required to store this stream.
            </value>
            <seealso cref="M:BKSystem.IO.BitStream.Read(System.Int64[],System.Int32,System.Int32)"/>
            <seealso cref="T:System.Int64"/>
        </member>
        <member name="P:BKSystem.IO.BitStream.Capacity">
            <summary>
            	Gets the number of <b>bits</b> allocatated to this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <remarks>
            	.
            </remarks>
            <value>
            	An <see cref="T:System.Int64"/> value specifying the number of <b>bits</b>
            	allocated to this stream.
            </value>
        </member>
        <member name="P:BKSystem.IO.BitStream.Position">
            <summary>
            	Gets or sets the current <b>bit</b> position within this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	The position is set to a negative value or position + 1 is geater than
            	<see cref="P:BKSystem.IO.BitStream.Length"/>.
            </exception>
            <remarks>
            	.
            </remarks>
            <value>
            	An <see cref="T:System.Int64"/> value specifying the current <b>position</b>
            	within this stream.
            </value>
            <seealso cref="P:BKSystem.IO.BitStream.Length"/>
            <seealso cref="T:System.Int64"/>
        </member>
        <member name="P:BKSystem.IO.BitStream.CanRead">
            <summary>
            	Gets a value indicating whether the current stream supports reading.
            </summary>
            <remarks>
            	.
            </remarks>
            <value>
            	A <see cref="T:System.Boolean"/> value indicating whether the current stream
            	supports reading.
            </value>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="P:BKSystem.IO.BitStream.CanSeek">
            <summary>
            	Gets a value indicating whether the current stream supports seeking.
            </summary>
            <remarks>
            	This method always returns <b>false</b>. To set the position within
            	the current stream use the <see cref="P:BKSystem.IO.BitStream.Position"/> property instead.
            </remarks>
            <value>
            	A <see cref="T:System.Boolean"/> value indicating whether the current stream
            	supports seeking.
            </value>
            <seealso cref="P:BKSystem.IO.BitStream.Position"/>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="P:BKSystem.IO.BitStream.CanWrite">
            <summary>
            	Gets a value indicating whether the current stream supports writing.
            </summary>
            <remarks>
            	.
            </remarks>
            <value>
            	A <see cref="T:System.Boolean"/> value indicating whether the current stream
            	supports writing.
            </value>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="P:BKSystem.IO.BitStream.CanSetLength">
            <summary>
            	Gets a value indicating whether the current stream supports setting
            	its length.
            </summary>
            <remarks>
            	This field always returns <b>false</b>. All write operations at the
            	end of the <b>BitStream</b> expand the <b>BitStream</b> automatically.
            </remarks>
            <value>
            	A <see cref="T:System.Boolean"/> value indicating whether the current stream
            	supports setting its length.
            </value>
            <see cref="T:System.Boolean"/>
        </member>
        <member name="P:BKSystem.IO.BitStream.CanFlush">
            <summary>
            	Gets a value indicating whether the current stream supports the flush
            	operation.
            </summary>
            <remarks>
            	This field always returns <b>false</b>. Since any data written to a
            	<b>BitStream</b> is written into RAM, flush operations become
            	redundant.
            </remarks>
            <value>
            	A <see cref="T:System.Boolean"/> value indicating whether the current stream
            	supports the flush operation.
            </value>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.#ctor">
            <summary>
            	Initialises a new instance of the <see cref="T:BKSystem.IO.BitStream"/> class
            	with an expandable capacity initialised to one.
            </summary>
            <remarks>
            	.
            </remarks>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.#ctor(System.Int64)">
            <summary>
            	Initialises a new instance of the <see cref="T:BKSystem.IO.BitStream"/> class
            	with an expandable capacity initialised to the specified capacity in
            	<b>bits</b>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>capacity</i> is negative or zero.
            </exception>
            <remarks>
            	.
            </remarks>
            <param name="capacity">
            	An <see cref="T:System.Int64"/> specifying the initial size of the internal
            	bit buffer in <b>bits</b>.
            </param>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.#ctor(System.IO.Stream)">
            <summary>
            	Initialises a new instance of the <see cref="T:BKSystem.IO.BitStream"/> class
            	with the <b>bits</b> provided by the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	Added [20051122].
            </remarks>
            <param name="bits">
            	A <see cref="T:System.IO.Stream"/> object containing the specified <b>bits</b>.
            </param>
            <seealso cref="T:BKSystem.IO.BitStream"/>
            <seealso cref="T:System.IO.Stream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt32"/> value to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>bitIndex</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>bitIndex</i> subtracted from the number of <b>bits</b> in a
            	<see cref="T:System.UInt32"/> is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt32"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.UInt32"/> value specifying the little-endian <b>bit</b>
            	index to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.UInt32"/> value specifying the maximum number of
            	<b>bits</b> to write.
            </param>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Boolean)">
            <summary>
            	Writes the <b>bit</b> represented by a <see cref="T:System.Boolean"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bit">
            	A <see cref="T:System.Boolean"/> value representing the <b>bit</b> to write data
            	from.
            </param>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Boolean[])">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Boolean"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Boolean"/> array specifying the buffer to write data from.
            </param>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Boolean[],System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Boolean"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Boolean"/> array specifying the buffer to write data from.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Boolean"/>
            	offset to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Boolean"/> values to write.
            </param>
            <seealso cref="T:System.Boolean"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Byte)">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Byte"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Byte"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <seealso cref="T:System.Byte"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Byte,System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Byte"/> value to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>bitIndex</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>bitIndex</i> subtracted from the number of <b>bits</b> in a
            	<see cref="T:System.Byte"/> is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Byte"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the little-endian <b>bit</b>
            	index to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<b>bits</b> to write.
            </param>
            <seealso cref="T:System.Byte"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Byte[])">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Byte"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Byte"/> array specifying the buffer to write data from.
            </param>
            <seealso cref="T:System.Byte"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Byte"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Byte"/> array specifying the buffer to write data from.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Byte"/> offset
            	to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Byte"/> values to write.
            </param>
            <seealso cref="T:System.Byte"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.SByte)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.SByte"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.SByte"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <seealso cref="T:System.SByte"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.SByte,System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.SByte"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.SByte"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the little-endian <b>bit</b>
            	index to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<b>bits</b> to write.
            </param>
            <seealso cref="T:System.SByte"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.SByte[])">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.SByte"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.SByte"/> array specifying the buffer to write data from.
            </param>
            <seealso cref="T:System.SByte"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.SByte[],System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.SByte"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.SByte"/> array specifying the buffer to write data from.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.SByte"/> offset
            	to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.SByte"/> values to write.
            </param>
            <seealso cref="T:System.SByte"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.WriteByte(System.Byte)">
            <summary>
            	Writes a byte to the current stream at the current position.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.<br></br>
            	<br></br>
            	Modified [20051124]
            </remarks>
            <param name="value">
            	The byte to write.
            </param>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Char)">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Char"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Char"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <seealso cref="T:System.Char"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Char,System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Char"/> value to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>bitIndex</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>bitIndex</i> subtracted from the number of <b>bits</b> in a
            	<see cref="T:System.Char"/> is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Char"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the little-endian <b>bit</b>
            	index to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<b>bits</b> to write.
            </param>
            <seealso cref="T:System.Char"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Char[])">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Char"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Char"/> array specifying the buffer to write data from.
            </param>
            <seealso cref="T:System.Char"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Char"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Char"/> array specifying the buffer to write data from.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Char"/> offset
            	to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Char"/> values to write.
            </param>
            <seealso cref="T:System.Char"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.UInt16)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt16"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt16"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <seealso cref="T:System.UInt16"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.UInt16,System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt16"/> value to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>bitIndex</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>bitIndex</i> subtracted from the number of <b>bits</b> in a
            	<see cref="T:System.UInt16"/> is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt16"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the little-endian <b>bit</b>
            	index to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<b>bits</b> to write.
            </param>
            <seealso cref="T:System.UInt16"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.UInt16[])">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt16"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt16"/> array specifying the buffer to write data from.
            </param>
            <seealso cref="T:System.UInt16"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.UInt16[],System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt16"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt16"/> array specifying the buffer to write data from.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.UInt16"/> offset
            	to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.UInt16"/> values to write.
            </param>
            <seealso cref="T:System.UInt16"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Int16)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.Int16"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Int16"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <seealso cref="T:System.Int16"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Int16,System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.Int16"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Int16"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the little-endian <b>bit</b>
            	index to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<b>bits</b> to write.
            </param>
            <seealso cref="T:System.Int16"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Int16[])">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.Int16"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Int16"/> array specifying the buffer to write data from.
            </param>
            <seealso cref="T:System.Int16"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Int16[],System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.Int16"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Int16"/> array specifying the buffer to write data from.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Int16"/> offset
            	to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Int16"/> values to write.
            </param>
            <seealso cref="T:System.Int16"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.UInt32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt32"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt32"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.UInt32,System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt32"/> value to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>bitIndex</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>bitIndex</i> subtracted from the number of <b>bits</b> in a
            	<see cref="T:System.UInt32"/> is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt32"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the little-endian <b>bit</b>
            	index to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<b>bits</b> to write.
            </param>
            <seealso cref="T:System.UInt32"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.UInt32[])">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt32"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt32"/> array specifying the buffer to write data from.
            </param>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt32"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt32"/> array specifying the buffer to write data from.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.UInt32"/> offset
            	to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.UInt32"/> values to write.
            </param>
            <seealso cref="T:System.UInt32"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.Int32"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Int32"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.Int32"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Int32"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the little-endian <b>bit</b>
            	index to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<b>bits</b> to write.
            </param>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Int32[])">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.Int32"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Int32"/> array specifying the buffer to write data from.
            </param>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Int32[],System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.Int32"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Int32"/> array specifying the buffer to write data from.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Int32"/> offset
            	to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Int32"/> values to write.
            </param>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Single)">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Single"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Single"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <seealso cref="T:System.Single"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Single,System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Single"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Single"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the little-endian <b>bit</b>
            	index to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<b>bits</b> to write.
            </param>
            <seealso cref="T:System.Single"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Single[])">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Single"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Single"/> array specifying the buffer to write data from.
            </param>
            <seealso cref="T:System.Single"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Single[],System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Single"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Single"/> array specifying the buffer to write data from.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Single"/> offset
            	to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Single"/> values to write.
            </param>
            <seealso cref="T:System.Single"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.UInt64)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt64"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt64"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <seealso cref="T:System.UInt64"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.UInt64,System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt64"/> value to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>bitIndex</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>bitIndex</i> subtracted from the number of <b>bits</b> in a
            	<see cref="T:System.UInt64"/> is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.<br></br>
            	<br></br>
            	Fixed [20051201].
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt64"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the little-endian <b>bit</b>
            	index to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<b>bits</b> to write.
            </param>
            <seealso cref="T:System.UInt64"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.UInt64[])">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt64"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt64"/> array specifying the buffer to write data from.
            </param>
            <seealso cref="T:System.UInt64"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt64"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt64"/> array specifying the buffer to write data from.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.UInt64"/> offset
            	to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.UInt64"/> values to write.
            </param>
            <seealso cref="T:System.UInt64"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Int64)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.Int64"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Int64"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <seealso cref="T:System.Int64"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Int64,System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.UInt16"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Int64"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the little-endian <b>bit</b>
            	index to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<b>bits</b> to write.
            </param>
            <seealso cref="T:System.Int64"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Int64[])">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.Int64"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Int64"/> array specifying the buffer to write data from.
            </param>
            <seealso cref="T:System.Int64"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Int64[],System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.Int64"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.Int64"/> array specifying the buffer to write data from.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Int64"/> offset
            	to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Int64"/> values to write.
            </param>
            <seealso cref="T:System.Int64"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Double)">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Double"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Double"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <seealso cref="T:System.Double"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Double,System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in an <see cref="T:System.Double"/> value to
            	the current stream.
            </summary>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Double"/> value specifying the <b>bits</b> to write data
            	from.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the little-endian <b>bit</b>
            	index to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<b>bits</b> to write.
            </param>
            <seealso cref="T:System.Double"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Double[])">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Double"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Double"/> array specifying the buffer to write data from.
            </param>
            <seealso cref="T:System.Double"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Write(System.Double[],System.Int32,System.Int32)">
            <summary>
            	Writes the <b>bits</b> contained in a <see cref="T:System.Double"/> buffer to
            	the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Double"/> array specifying the buffer to write data from.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Double"/> offset
            	to begin writing from.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Double"/> values to write.
            </param>
        </member>
        <member name="M:BKSystem.IO.BitStream.WriteTo(System.IO.Stream)">
            <summary>
            	Writes the entire contents of this <b>bit</b> stream to another stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	Added [20051127]<br></br>
            	<br></br>
            	All write operations at the end of the <b>BitStream</b> expand the
            	<b>BitStream</b>.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.IO.Stream"/> object specifying the stream to write this
            	<b>bit</b> stream to.
            </param>
            <seealso cref="T:System.IO.Stream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.UInt32"/> value.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>bitIndex</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>bitIndex</i> subtracted from the number of <b>bits</b> in a
            	<see cref="T:System.UInt32"/> is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.UInt32"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.UInt32"/> value specifying the <b>bit</b> index at which to
            	begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.UInt32"/> value specifying the maximum number of <b>bits</b>
            	to read.
            </param>
            <returns>
            	An <see cref="T:System.UInt32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Boolean@)">
            <summary>
            	Reads the <b>bit</b> contained in the current stream to a
            	<see cref="T:System.Boolean"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bit">
            	When this method returns, contains the specified <see cref="T:System.Boolean"/>
            	value with the <b>bit</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bit</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be 1 or zero if the end of the
            	current stream is reached before the <b>bit</b> is read.
            </returns>
            <seealso cref="T:System.Boolean"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Boolean[])">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Boolean"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Boolean"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Boolean"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Boolean[],System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Boolean"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Boolean"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Boolean"/> offset
            	at which to begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Boolean"/> values to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Boolean"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Byte@)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Byte"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Byte"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Byte"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Byte@,System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Byte"/> value.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>bitIndex</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>bitIndex</i> subtracted from the number of <b>bits</b> in a
            	<see cref="T:System.Byte"/> is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Byte"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the <b>bit</b> index at which to
            	begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of <b>bits</b>
            	to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Byte"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Byte[])">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Byte"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Byte"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Byte"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Byte"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Byte"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Byte"/> offset
            	at which to begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Byte"/> values to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Byte"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.SByte@)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.SByte"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.SByte"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.SByte"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.SByte@,System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.SByte"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.SByte"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the <b>bit</b> index at which to
            	begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of <b>bits</b>
            	to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.SByte"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.SByte[])">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.SByte"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.SByte"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.SByte"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.SByte[],System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.SByte"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.SByte"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.SByte"/> offset
            	at which to begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.SByte"/> values to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.SByte"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ReadByte">
            <summary>
            	Reads a byte from the stream and advances the position within the
            	stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <remarks>
            	Modified [20051124]
            </remarks>
            <returns>
            	The unsigned byte cast to an <b>Int32</b>, or -1 if at the end of the
            	stream.
            </returns>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToByteArray">
            <summary>
            </summary>
            <remarks>
            	Added [20051124].
            </remarks>
            <returns>
            </returns>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Char@)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Char"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Char"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Char"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Char@,System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Char"/> value.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>bitIndex</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>bitIndex</i> subtracted from the number of <b>bits</b> in a
            	<see cref="T:System.Char"/> is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Char"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the <b>bit</b> index at which to
            	begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of <b>bits</b>
            	to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Char"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Char[])">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.Char"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Char"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Char"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.Char"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Char"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Char"/> offset
            	at which to begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Char"/> values to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Char"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.UInt16@)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.UInt16"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.UInt16"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.UInt16"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.UInt16@,System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.UInt16"/> value.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>bitIndex</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>bitIndex</i> subtracted from the number of <b>bits</b> in a
            	<see cref="T:System.UInt16"/> is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.UInt16"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the <b>bit</b> index at which to
            	begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of <b>bits</b>
            	to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.UInt16"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.UInt16[])">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.UInt16"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.UInt16"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.UInt16"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.UInt16[],System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.UInt16"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.UInt16"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.UInt16"/> offset
            	at which to begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.UInt16"/> values to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.UInt16"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Int16@)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Int16"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Int16"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Int16"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Int16@,System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Int16"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Int16"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the <b>bit</b> index at which to
            	begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of <b>bits</b>
            	to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Int16"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Int16[])">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.Int16"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Int16"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Int16"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Int16[],System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.Int16"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Int16"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Int16"/> offset
            	at which to begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Int16"/> values to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Int16"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.UInt32@)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.UInt32"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.UInt32"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.UInt32"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.UInt32@,System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.UInt32"/> value.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>bitIndex</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>bitIndex</i> subtracted from the number of <b>bits</b> in a
            	<see cref="T:System.UInt32"/> is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.UInt32"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the <b>bit</b> index at which to
            	begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of <b>bits</b>
            	to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.UInt32"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.UInt32[])">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.UInt32"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.UInt32"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.UInt32"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.UInt32"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.UInt32"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.UInt32"/> offset
            	at which to begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.UInt32"/> values to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.UInt32"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Int32@)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Int32"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Int32"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Int32@,System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Int32"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Int32"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the <b>bit</b> index at which to
            	begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of <b>bits</b>
            	to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Int32[])">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.Int32"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Int32"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Int32[],System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Int32"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Int32"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Int32"/> offset
            	at which to begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Int32"/> values to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Single@)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Single"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Single"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Single"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Single@,System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Single"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Single"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the <b>bit</b> index at which to
            	begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of <b>bits</b>
            	to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Single"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Single[])">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Single"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Single"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Single"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Single"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Single"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Single"/> offset
            	at which to begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Single"/> values to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Single"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.UInt64@)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.UInt64"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.<br></br>
            	<br></br>
            	Fixed [20051201].
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.UInt64"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.UInt64"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.UInt64@,System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.UInt64"/> value.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>bitIndex</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>bitIndex</i> subtracted from the number of <b>bits</b> in a
            	<see cref="T:System.UInt64"/> is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.UInt64"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the <b>bit</b> index at which to
            	begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of <b>bits</b>
            	to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.UInt64"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.UInt64[])">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.UInt64"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.UInt64"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.UInt64"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.UInt64"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.UInt64"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.UInt64"/> offset
            	at which to begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.UInt64"/> values to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.UInt64"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Int64@)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Int64"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Int64"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Int64"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Int64@,System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Int64"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Int64"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the <b>bit</b> index at which to
            	begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of <b>bits</b>
            	to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Int64"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Int64[])">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.Int64"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Int64"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Int64"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Int64[],System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to an
            	<see cref="T:System.Int64"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Int64"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Int64"/> offset
            	at which to begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Int64"/> values to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Int64"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Double@)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Double"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Double"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Double"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Double@,System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Double"/> value.
            </summary>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Double"/>
            	value with the <b>bits</b> between bitIndex and (bitIndex + count - 1)
            	replaced by the <b>bits</b> read from the current stream.
            </param>
            <param name="bitIndex">
            	An <see cref="T:System.Int32"/> value specifying the <b>bit</b> index at which to
            	begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of <b>bits</b>
            	to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the value. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Double"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Double[])">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Double"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Double"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Double"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Read(System.Double[],System.Int32,System.Int32)">
            <summary>
            	Reads the <b>bits</b> contained in the current stream to a
            	<see cref="T:System.Double"/> buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<i>offset</i> or <i>count</i> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<i>offset</i> subtracted from the buffer length is less than <i>count</i>.
            </exception>
            <remarks>
            	The <b>Read</b> method returns zero if the end of the current stream
            	is reached. In all other cases, <b>Read</b> always reads at least one
            	<b>bit</b> from the current stream before returning.
            </remarks>
            <param name="bits">
            	When this method returns, contains the specified <see cref="T:System.Double"/>
            	array with the values between offset and (offset + count - 1) replaced
            	by the <b>bits</b> read from the current stream.
            </param>
            <param name="offset">
            	An <see cref="T:System.Int32"/> value specifying the <see cref="T:System.Double"/> offset
            	at which to begin reading.
            </param>
            <param name="count">
            	An <see cref="T:System.Int32"/> value specifying the maximum number of
            	<see cref="T:System.Double"/> values to read.
            </param>
            <returns>
            	An <see cref="T:System.Int32"/> value specifying the number of <b>bits</b>
            	written into the buffer. This can be less than the number of <b>bits</b>
            	requested if that number of <b>bits</b> are not currently available,
            	or zero if the end of the current stream is reached before any
            	<b>bits</b> are read.
            </returns>
            <seealso cref="T:System.Double"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.And(BKSystem.IO.BitStream)">
            <summary>
            	Performs a bitwise <b>AND</b> operation on the <b>bits</b> in the
            	current stream against the corresponding <b>bits</b> in the specified
            	stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            	The stream specified by the <i>bits</i> parameter and the current
            	stream do not have the same number of <b>bits</b>.
            </exception>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:BKSystem.IO.BitStream"/> object with which to perform the bitwise
            	<b>AND</b> operation.
            </param>
            <returns>
            	A <see cref="T:BKSystem.IO.BitStream"/> object containing the result of the bitwise
            	<b>AND</b> operation on the <b>bits</b> in the current stream against
            	the corresponding <b>bits</b> in the specified stream.
            </returns>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Or(BKSystem.IO.BitStream)">
            <summary>
            	Performs a bitwise <b>OR</b> operation on the <b>bits</b> in the
            	current stream against the corresponding <b>bits</b> in the specified
            	stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            	The stream specified by the <i>bits</i> parameter and the current
            	stream do not have the same number of <b>bits</b>.
            </exception>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:BKSystem.IO.BitStream"/> object with which to perform the bitwise
            	<b>OR</b> operation.
            </param>
            <returns>
            	A <see cref="T:BKSystem.IO.BitStream"/> object containing the result of the bitwise
            	<b>OR</b> operation on the <b>bits</b> in the current stream against
            	the corresponding <b>bits</b> in the specified stream.
            </returns>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Xor(BKSystem.IO.BitStream)">
            <summary>
            	Performs a bitwise e<b>X</b>clusive <b>OR</b> operation on the
            	<b>bits</b> in the current stream against the corresponding <b>bits</b>
            	in the specified stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            	The stream specified by the <i>bits</i> parameter and the current
            	stream do not have the same number of <b>bits</b>.
            </exception>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:BKSystem.IO.BitStream"/> object with which to perform the bitwise
            	e<b>X</b>clusive <b>OR</b> operation.
            </param>
            <returns>
            	A <see cref="T:BKSystem.IO.BitStream"/> object containing the result of the bitwise
            	e<b>X</b>clusive <b>OR</b> operation on the <b>bits</b> in the current
            	stream against the corresponding <b>bits</b> in the specified stream.
            </returns>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Not">
            <summary>
            	Performs a bitwise <b>NOT</b> operation on the <b>bits</b> in the
            	current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <remarks>
            	.
            </remarks>
            <returns>
            	A <see cref="T:BKSystem.IO.BitStream"/> object containing the result of the bitwise
            	<b>NOT</b> operation on the <b>bits</b> in the current stream.
            </returns>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ShiftLeft(System.Int64)">
            <summary>
            	Moves the <b>bits</b> of the current stream to the left
            	by the specified number places.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <remarks>
            	.
            </remarks>
            <param name="count">
            	An <see cref="T:System.UInt64"/> that represents the specified number of places.
            </param>
            <returns>
            	A <see cref="T:BKSystem.IO.BitStream"/> object containing the result of left shift
            	operation on the <b>bits</b> in the current stream.
            </returns>
        </member>
        <member name="M:BKSystem.IO.BitStream.ShiftRight(System.Int64)">
            <summary>
            	Moves the <b>bits</b> of the current stream to the right
            	by the specified number places.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            	The current stream is closed.
            </exception>
            <remarks>
            	.
            </remarks>
            <param name="count">
            	An <see cref="T:System.UInt64"/> that represents the specified number of places.
            </param>
            <returns>
            	A <see cref="T:BKSystem.IO.BitStream"/> object containing the result of right shift
            	operation on the <b>bits</b> in the current stream.
            </returns>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToString">
            <summary>
            	Returns a <see cref="T:System.String"/> that represents the current stream
            	in binary notation.
            </summary>
            <remarks>
            	.
            </remarks>
            <returns>
            	A <see cref="T:System.String"/> object representing the current stream
            	in binary notation.
            </returns>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToString(System.Boolean)">
            <summary>
            	Returns a <see cref="T:System.String"/> that represents the specified
            	value in binary notation.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="bit">
            	A <see cref="T:System.Boolean"/> value representing the specified value.
            </param>
            <returns>
            	A <see cref="T:System.String"/> object representing the specified value
            	in binary notation.
            </returns>
            <seealso cref="T:System.String"/>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToString(System.Byte)">
            <summary>
            	Returns a <see cref="T:System.String"/> that represents the specified
            	value in binary notation.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Byte"/> value representing the specified value.
            </param>
            <returns>
            	A <see cref="T:System.String"/> object representing the specified value
            	in binary notation.
            </returns>
            <seealso cref="T:System.String"/>
            <seealso cref="T:System.Byte"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToString(System.SByte)">
            <summary>
            	Returns a <see cref="T:System.String"/> that represents the specified
            	value in binary notation.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.SByte"/> value representing the specified value.
            </param>
            <returns>
            	A <see cref="T:System.String"/> object representing the specified value
            	in binary notation.
            </returns>
            <seealso cref="T:System.String"/>
            <seealso cref="T:System.SByte"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToString(System.Char)">
            <summary>
            	Returns a <see cref="T:System.String"/> that represents the specified
            	value in binary notation.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Char"/> value representing the specified value.
            </param>
            <returns>
            	A <see cref="T:System.String"/> object representing the specified value
            	in binary notation.
            </returns>
            <seealso cref="T:System.String"/>
            <seealso cref="T:System.Char"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToString(System.UInt16)">
            <summary>
            	Returns a <see cref="T:System.String"/> that represents the specified
            	value in binary notation.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.UInt16"/> value representing the specified value.
            </param>
            <returns>
            	A <see cref="T:System.String"/> object representing the specified value
            	in binary notation.
            </returns>
            <seealso cref="T:System.String"/>
            <seealso cref="T:System.UInt16"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToString(System.Int16)">
            <summary>
            	Returns a <see cref="T:System.String"/> that represents the specified
            	value in binary notation.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Int16"/> value representing the specified value.
            </param>
            <returns>
            	A <see cref="T:System.String"/> object representing the specified value
            	in binary notation.
            </returns>
            <seealso cref="T:System.String"/>
            <seealso cref="T:System.Int16"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToString(System.UInt32)">
            <summary>
            	Returns a <see cref="T:System.String"/> that represents the specified
            	value in binary notation.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.UInt32"/> value representing the specified value.
            </param>
            <returns>
            	A <see cref="T:System.String"/> object representing the specified value
            	in binary notation.
            </returns>
            <seealso cref="T:System.String"/>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToString(System.Int32)">
            <summary>
            	Returns a <see cref="T:System.String"/> that represents the specified
            	value in binary notation.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Int32"/> value representing the specified value.
            </param>
            <returns>
            	A <see cref="T:System.String"/> object representing the specified value
            	in binary notation.
            </returns>
            <seealso cref="T:System.String"/>
            <seealso cref="T:System.Int32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToString(System.UInt64)">
            <summary>
            	Returns a <see cref="T:System.String"/> that represents the specified
            	value in binary notation.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.UInt64"/> value representing the specified value.
            </param>
            <returns>
            	A <see cref="T:System.String"/> object representing the specified value
            	in binary notation.
            </returns>
            <seealso cref="T:System.String"/>
            <seealso cref="T:System.UInt64"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToString(System.Int64)">
            <summary>
            	Returns a <see cref="T:System.String"/> that represents the specified
            	value in binary notation.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Int64"/> value representing the specified value.
            </param>
            <returns>
            	A <see cref="T:System.String"/> object representing the specified value
            	in binary notation.
            </returns>
            <seealso cref="T:System.String"/>
            <seealso cref="T:System.Int64"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToString(System.Single)">
            <summary>
            	Returns a <see cref="T:System.String"/> that represents the specified
            	value in binary notation.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Single"/> value representing the specified value.
            </param>
            <returns>
            	A <see cref="T:System.String"/> object representing the specified value
            	in binary notation.
            </returns>
            <seealso cref="T:System.String"/>
            <seealso cref="T:System.Single"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ToString(System.Double)">
            <summary>
            	Returns a <see cref="T:System.String"/> that represents the specified
            	value in binary notation.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Double"/> value representing the specified value.
            </param>
            <returns>
            	A <see cref="T:System.String"/> object representing the specified value
            	in binary notation.
            </returns>
            <seealso cref="T:System.String"/>
            <seealso cref="T:System.Double"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.UpdateLengthForWrite(System.UInt32)">
            <summary>
            	Updates the length of the internal buffer after wrinting to the
            	current stream by the specified number of <b>bits</b>.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt32"/> value defining the specified
            	number of <b>bits</b>.
            </param>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.UpdateIndicesForWrite(System.UInt32)">
            <summary>
            	Updates the internal buffer's <b>bit</b> indices after writing to the
            	current stream by the specified number of <b>bits</b>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The internal buffer's <b>bit</b> index is greater than 32.
            </exception>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt32"/> value defining the specified
            	number of <b>bits</b>.
            </param>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.UpdateIndicesForRead(System.UInt32)">
            <summary>
            	Updates the internal buffer's <b>bit</b> indices after reading to the
            	current stream by the specified number of <b>bits</b>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The internal buffer's <b>bit</b> index is greater than 32.
            </exception>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	An <see cref="T:System.UInt32"/> value defining the specified
            	number of <b>bits</b>.
            </param>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.ReDimPreserve(System.UInt32[],System.UInt32)">
            <summary>
            	Re-dimensions and preserves the contents of a buffer by the specified
            	amount.
            </summary>
            <remarks>
            	.
            </remarks>
            <param name="buffer">
            	An <see cref="T:System.UInt32"/> array specifying the buffer to re-dimension.
            </param>
            <param name="newLength">
            	An <see cref="T:System.UInt32"/> value specifying the new length of the buffer.
            </param>
            <returns>
            	An <see cref="T:System.UInt32"/> array secifying the re-dimensioned array.
            </returns>
            <seealso cref="T:System.UInt32"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Close">
            <summary>
            	Closes the current stream for reading and writing.
            </summary>
            <remarks>
            	.
            </remarks>
        </member>
        <member name="M:BKSystem.IO.BitStream.GetBuffer">
            <summary>
            	Returns the array of unsigned integers from which this stream was
            	created.
            </summary>
            <remarks>
            	This method works even when the current stream is closed.
            </remarks>
            <returns>
            	The integer array from which this stream was created.
            </returns>
        </member>
        <member name="M:BKSystem.IO.BitStream.Copy">
            <summary>
            	Creates a copy of the current stream.
            </summary>
            <remarks>
            	This method works even when the current stream is closed.
            </remarks>
            <returns>
            	A <see cref="T:BKSystem.IO.BitStream"/> object representing the copy of the current
            	stream.
            </returns>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            	Begins an asynchronous read operation.
            </summary>
            <exception cref="T:System.NotSupportedException">
            	This method is not supported.
            </exception>
            <remarks>
            	<b><font color="red">Notes to Callers:</font></b> This method is not
            	supported, and cannot be used. Asynchronous operations are not
            	supported by the <see cref="T:BKSystem.IO.BitStream"/> class.
            </remarks>
            <param name="buffer">
            	The buffer to read the data into.
            </param>
            <param name="offset">
            	The byte offset in <i>buffer</i> at which to begin writing data read
            	from the stream.
            </param>
            <param name="count">
            	The maximum number of bytes to read.
            </param>
            <param name="callback">
            	An optional asynchronous callback, to be called when the read is
            	complete.
            </param>
            <param name="state">
            	A user-provided object that distinguishes this particular asynchronous
            	read request from other requests.
            </param>
            <returns>
            	An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read,
            	which could still be pending.
            </returns>
            <seealso cref="T:BKSystem.IO.BitStream"/>
            <seealso cref="T:System.IAsyncResult"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            	Begins an asynchronous write operation.
            </summary>
            <exception cref="T:System.NotSupportedException">
            	This method is not supported.
            </exception>
            <remarks>
            	<b><font color="red">Notes to Callers:</font></b> This method is not
            	supported, and cannot be used. Asynchronous operations are not
            	supported by the <see cref="T:BKSystem.IO.BitStream"/> class.
            </remarks>
            <param name="buffer">
            	The buffer to write data from.
            </param>
            <param name="offset">
            	The byte offset in <i>buffer</i> from which to begin writing.
            </param>
            <param name="count">
            	The maximum number of bytes to write.
            </param>
            <param name="callback">
            	An optional asynchronous callback, to be called when the write is
            	complete.
            </param>
            <param name="state">
            	A user-provided object that distinguishes this particular asynchronous
            	write request from other requests.
            </param>
            <returns>
            	An <see cref="T:System.IAsyncResult"/> that represents the asynchronous write,
            	which could still be pending.
            </returns>
            <seealso cref="T:BKSystem.IO.BitStream"/>
            <seealso cref="T:System.IAsyncResult"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.EndRead(System.IAsyncResult)">
            <summary>
            	Waits for the pending asynchronous read to complete.
            </summary>
            <exception cref="T:System.NotSupportedException">
            	This method is not supported.
            </exception>
            <remarks>
            	<b><font color="red">Notes to Callers:</font></b> This method is not
            	supported, and cannot be used. Asynchronous operations are not
            	supported by the <see cref="T:BKSystem.IO.BitStream"/> class.
            </remarks>
            <param name="asyncResult">
            	The reference to the pending asynchronous request to finish.
            </param>
            <returns>
            	The number of bytes read from the stream, between zero (0) and the
            	number of bytes you requested. Streams only return zero (0) at the
            	end of the stream, otherwise, they should block until at least one
            	byte is available.
            </returns>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.EndWrite(System.IAsyncResult)">
            <summary>
            	Ends an asynchronous write operation.
            </summary>
            <exception cref="T:System.NotSupportedException">
            	This method is not supported.
            </exception>
            <remarks>
            	<b><font color="red">Notes to Callers:</font></b> This method is not
            	supported, and cannot be used. Asynchronous operations are not
            	supported by the <see cref="T:BKSystem.IO.BitStream"/> class.
            </remarks>
            <param name="asyncResult">
            	A reference to the outstanding asynchronous I/O request.
            </param>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            	When overridden in a derived class, sets the position within the
            	current stream.
            </summary>
            <exception cref="T:System.NotSupportedException">
            	This method is not supported.
            </exception>
            <remarks>
            	<b><font color="red">Notes to Callers:</font></b> This method is not
            	supported, and cannot be used. To set the position within the current
            	stream use the <see cref="P:BKSystem.IO.BitStream.Position"/> property instead.
            </remarks>
            <param name="offset">
            	A byte offset relative to the origin parameter.
            </param>
            <param name="origin">
            	A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point
            	used to obtain the new position.
            </param>
            <returns>
            	The new position within the current stream.
            </returns>
            <seealso cref="P:BKSystem.IO.BitStream.Position"/>
            <seealso cref="T:System.IO.SeekOrigin"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.SetLength(System.Int64)">
            <summary>
            	When overridden in a derived class, sets the length of the current
            	stream.
            </summary>
            <exception cref="T:System.NotSupportedException">
            	This method is not supported.
            </exception>
            <remarks>
            	<b><font color="red">Notes to Callers:</font></b> This method is not
            	supported, and cannot be used. All write operations at the end of the
            	<b>BitStream</b> expand the <b>BitStream</b> automatically.
            </remarks>
            <param name="value">
            	The desired length of the current stream in bytes.
            </param>
        </member>
        <member name="M:BKSystem.IO.BitStream.Flush">
            <summary>
            	When overridden in a derived class, clears all buffers for this stream
            	and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.NotSupportedException">
            	This method is not supported. Since any data written to a
            	<see cref="T:BKSystem.IO.BitStream"/> is written into RAM, this method is
            	redundant.
            </exception>
            <remarks>
            	<b><font color="red">Notes to Callers:</font></b> This method is not
            	supported, and cannot be used.
            </remarks>
        </member>
        <member name="M:BKSystem.IO.BitStream.op_Implicit(System.IO.MemoryStream)~BKSystem.IO.BitStream">
            <summary>
            	Converts a <see cref="T:System.IO.MemoryStream"/> object to a new instance of the
            	<see cref="T:BKSystem.IO.BitStream"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.IO.MemoryStream"/> object to convert.
            </param>
            <returns>
            	A <see cref="T:BKSystem.IO.BitStream"/> object representing the new instance of the
            	<see cref="T:BKSystem.IO.BitStream"/> class.
            </returns>
            <seealso cref="T:System.IO.MemoryStream"/>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.op_Implicit(BKSystem.IO.BitStream)~System.IO.MemoryStream">
            <summary>
            	Converts a <see cref="T:BKSystem.IO.BitStream"/> object to a new instance of the
            	<see cref="T:System.IO.MemoryStream"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:BKSystem.IO.BitStream"/> object to convert.
            </param>
            <returns>
            	A <see cref="T:System.IO.MemoryStream"/> object representing the new instance of
            	the <see cref="T:System.IO.MemoryStream"/> class.
            </returns>
            <seealso cref="T:BKSystem.IO.BitStream"/>
            <seealso cref="T:System.IO.MemoryStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.op_Implicit(System.IO.FileStream)~BKSystem.IO.BitStream">
            <summary>
            	Converts a <see cref="T:System.IO.FileStream"/> object to a new instance of the
            	<see cref="T:BKSystem.IO.BitStream"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	This operator allows implicit casting from an instance of a
            	<see cref="T:System.IO.FileStream"/> object to a new instance of a
            	<see cref="T:BKSystem.IO.BitStream"/> object. No equivalent operator has been made
            	available that allows implicit casting from an instance of a
            	<see cref="T:BKSystem.IO.BitStream"/> object to a new instance of a
            	<see cref="T:System.IO.FileStream"/> object.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.IO.FileStream"/> object to convert.
            </param>
            <returns>
            	A <see cref="T:BKSystem.IO.BitStream"/> object representing the new instance of the
            	<see cref="T:BKSystem.IO.BitStream"/> class.
            </returns>
            <seealso cref="T:System.IO.FileStream"/>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.op_Implicit(System.IO.BufferedStream)~BKSystem.IO.BitStream">
            <summary>
            	Converts a <see cref="T:System.IO.BufferedStream"/> object to a new instance of the
            	<see cref="T:BKSystem.IO.BitStream"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.IO.BufferedStream"/> object to convert.
            </param>
            <returns>
            	A <see cref="T:BKSystem.IO.BitStream"/> object representing the new instance of the
            	<see cref="T:BKSystem.IO.BitStream"/> class.
            </returns>
            <seealso cref="T:System.IO.BufferedStream"/>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.op_Implicit(BKSystem.IO.BitStream)~System.IO.BufferedStream">
            <summary>
            	Converts a <see cref="T:BKSystem.IO.BitStream"/> object to a new instance of the
            	<see cref="T:System.IO.BufferedStream"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	.
            </remarks>
            <param name="bits">
            	A <see cref="T:BKSystem.IO.BitStream"/> object to convert.
            </param>
            <returns>
            	A <see cref="T:System.IO.MemoryStream"/> object representing the new instance of
            	the <see cref="T:System.IO.BufferedStream"/> class.
            </returns>
            <seealso cref="T:BKSystem.IO.BitStream"/>
            <seealso cref="T:System.IO.BufferedStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.op_Implicit(System.Net.Sockets.NetworkStream)~BKSystem.IO.BitStream">
            <summary>
            	Converts a <see cref="T:System.Net.Sockets.NetworkStream"/> object to a new instance of the
            	<see cref="T:BKSystem.IO.BitStream"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	This operator allows implicit casting from an instance of a
            	<see cref="T:System.Net.Sockets.NetworkStream"/> object to a new instance of a
            	<see cref="T:BKSystem.IO.BitStream"/> object. No equivalent operator has been made
            	available that allows implicit casting from an instance of a
            	<see cref="T:BKSystem.IO.BitStream"/> object to a new instance of a
            	<see cref="T:System.Net.Sockets.NetworkStream"/> object.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Net.Sockets.NetworkStream"/> object to convert.
            </param>
            <returns>
            	A <see cref="T:BKSystem.IO.BitStream"/> object representing the new instance of the
            	<see cref="T:BKSystem.IO.BitStream"/> class.
            </returns>
            <seealso cref="T:System.Net.Sockets.NetworkStream"/>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
        <member name="M:BKSystem.IO.BitStream.op_Implicit(System.Security.Cryptography.CryptoStream)~BKSystem.IO.BitStream">
            <summary>
            	Converts a <see cref="T:System.Security.Cryptography.CryptoStream"/> object to a new instance of the
            	<see cref="T:BKSystem.IO.BitStream"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            	<i>bits</i> is a null reference (<b>Nothing</b> in Visual Basic).
            </exception>
            <remarks>
            	This operator allows implicit casting from an instance of a
            	<see cref="T:System.Security.Cryptography.CryptoStream"/> object to a new instance of a
            	<see cref="T:BKSystem.IO.BitStream"/> object. No equivalent operator has been made
            	available that allows implicit casting from an instance of a
            	<see cref="T:BKSystem.IO.BitStream"/> object to a new instance of a
            	<see cref="T:System.Security.Cryptography.CryptoStream"/> object.
            </remarks>
            <param name="bits">
            	A <see cref="T:System.Security.Cryptography.CryptoStream"/> object to convert.
            </param>
            <returns>
            	A <see cref="T:BKSystem.IO.BitStream"/> object representing the new instance of the
            	<see cref="T:BKSystem.IO.BitStream"/> class.
            </returns>
            <seealso cref="T:System.Security.Cryptography.CryptoStream"/>
            <seealso cref="T:BKSystem.IO.BitStream"/>
        </member>
    </members>
</doc>
