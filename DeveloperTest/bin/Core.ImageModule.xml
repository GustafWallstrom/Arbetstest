<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core.ImageModule</name>
    </assembly>
    <members>
        <member name="T:Core.ImageModule.DefResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Core.ImageModule.DefResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Core.ImageModule.DefResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Core.ImageModule.DefResource.empori_logo_white">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Core.ImageModule.DefResource.empori_symbol">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Core.ImageModule.DefResource.empori_symbol_green">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Core.ImageModule.DefResource.image_symbol">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Core.ImageModule.DefResource.image_symbol_gray">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Core.ImageModule.DefResource.logo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Core.ImageModule.Helpers.OctreeQuantizer">
            <summary>
            Quantize using an Octree
            </summary>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the octree quantizer
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the octree,
            the second pass quantizes a color based on the nodes in the tree
            </remarks>
            <param name="maxColors">The maximum number of colors to return</param>
            <param name="maxColorBits">The number of significant bits</param>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.InitialQuantizePixel(Core.ImageModule.Helpers.Quantizer.Color32*)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.QuantizePixel(Core.ImageModule.Helpers.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer._octree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer._maxColors">
            <summary>
            Maximum allowed color depth
            </summary>
        </member>
        <member name="T:Core.ImageModule.Helpers.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization
            </summary>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            Construct the octree
            </summary>
            <param name="maxColorBits">The maximum number of significant bits in the image</param>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.Octree.AddColor(Core.ImageModule.Helpers.Quantizer.Color32*)">
            <summary>
            Add a given color value to the octree
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="P:Core.ImageModule.Helpers.OctreeQuantizer.Octree.Leaves">
            <summary>
            Get/Set the number of leaves in the tree
            </summary>
        </member>
        <member name="P:Core.ImageModule.Helpers.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            Return the array of reducible nodes
            </summary>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.Octree.TrackPrevious(Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">The node last quantized</param>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the octree to a palette with a maximum of colorCount colors
            </summary>
            <param name="colorCount">The maximum number of colors</param>
            <returns>An arraylist with the palettized colors</returns>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.Octree.GetPaletteIndex(Core.ImageModule.Helpers.Quantizer.Color32*)">
            <summary>
            Get the palette index for the passed color
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree.mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree._root">
            <summary>
            The root of the octree
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree._leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree._reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree._maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree._previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree._previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="T:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree
            </summary>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,Core.ImageModule.Helpers.OctreeQuantizer.Octree)">
            <summary>
            Construct the node
            </summary>
            <param name="level">The level in the tree = 0 - 7</param>
            <param name="colorBits">The number of significant color bits in the image</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode.AddColor(Core.ImageModule.Helpers.Quantizer.Color32*,System.Int32,System.Int32,Core.ImageModule.Helpers.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">The color</param>
            <param name="colorBits">The number of significant color bits</param>
            <param name="level">The level in the tree</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="P:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Get/Set the next reducible node
            </summary>
        </member>
        <member name="P:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode.Children">
            <summary>
            Return the child nodes
            </summary>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">The palette</param>
            <param name="paletteIndex">The current palette index</param>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(Core.ImageModule.Helpers.Quantizer.Color32*,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
        </member>
        <member name="M:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode.Increment(Core.ImageModule.Helpers.Quantizer.Color32*)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode._leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode._pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode._red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode._green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode._blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode._children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode._nextReducible">
            <summary>
            Pointer to next reducible node
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.OctreeQuantizer.Octree.OctreeNode._paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="T:Core.ImageModule.Helpers.PaletteQuantizer">
            <summary>
            Summary description for PaletteQuantizer.
            </summary>
        </member>
        <member name="M:Core.ImageModule.Helpers.PaletteQuantizer.#ctor(System.Collections.ArrayList)">
            <summary>
            Construct the palette quantizer
            </summary>
            <param name="palette">The color palette to quantize to</param>
            <remarks>
            Palette quantization only requires a single quantization step
            </remarks>
        </member>
        <member name="M:Core.ImageModule.Helpers.PaletteQuantizer.QuantizePixel(Core.ImageModule.Helpers.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:Core.ImageModule.Helpers.PaletteQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="palette">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:Core.ImageModule.Helpers.PaletteQuantizer._colorMap">
            <summary>
            Lookup table for colors
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.PaletteQuantizer._colors">
            <summary>
            List of all colors in the palette
            </summary>
        </member>
        <member name="T:Core.ImageModule.Helpers.Quantizer">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:Core.ImageModule.Helpers.Quantizer.#ctor(System.Boolean)">
            <summary>
            Construct the quantizer
            </summary>
            <param name="singlePass">If true, the quantization only needs to loop through the source pixels once</param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:Core.ImageModule.Helpers.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">The image to quantize</param>
            <returns>A quantized version of the image</returns>
        </member>
        <member name="M:Core.ImageModule.Helpers.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:Core.ImageModule.Helpers.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap
            </summary>
            <param name="sourceData">The source bitmap, locked into memory</param>
            <param name="output">The output bitmap</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="bounds">The bounding rectangle</param>
        </member>
        <member name="M:Core.ImageModule.Helpers.Quantizer.InitialQuantizePixel(Core.ImageModule.Helpers.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:Core.ImageModule.Helpers.Quantizer.QuantizePixel(Core.ImageModule.Helpers.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:Core.ImageModule.Helpers.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:Core.ImageModule.Helpers.Quantizer._singlePass">
            <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
        </member>
        <member name="T:Core.ImageModule.Helpers.Quantizer.Color32">
            <summary>
            Struct that defines a 32 bpp colour
            </summary>
            <remarks>
            This struct is used to read data from a 32 bits per pixel image
            in memory, and is ordered in this manner as this is the way that
            the data is layed out in memory
            </remarks>
        </member>
        <member name="F:Core.ImageModule.Helpers.Quantizer.Color32.Blue">
            <summary>
            Holds the blue component of the colour
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.Quantizer.Color32.Green">
            <summary>
            Holds the green component of the colour
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.Quantizer.Color32.Red">
            <summary>
            Holds the red component of the colour
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.Quantizer.Color32.Alpha">
            <summary>
            Holds the alpha component of the colour
            </summary>
        </member>
        <member name="F:Core.ImageModule.Helpers.Quantizer.Color32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32
            </summary>
        </member>
        <member name="P:Core.ImageModule.Helpers.Quantizer.Color32.Color">
            <summary>
            Return the color for this Color32 object
            </summary>
        </member>
        <member name="M:Core.ImageModule.Utilities.Skin9Grid(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Skins an bitmap onto another bitmap, stretching only the top/bottom/right/left and center-parts, keeping the corners untouched, often referred to as GRID9 or 9-GRID skinning, please ensure that both bitmaps are of the same DPI 
            </summary>
            <param name="target">Target/output bitmap</param>
            <param name="skin">Skin bitmap</param>
            <param name="leftmargin">Margin size, Left</param>
            <param name="topmargin">Margin size, Top</param>
            <param name="rightmargin">Margin size, Right</param>
            <param name="bottommargin">Margin size, Bottom</param>
            <param name="outputleft">Output origin, Left</param>
            <param name="outputtop">Output origin, Top</param>
            <param name="outputwidth">Output size, Width</param>
            <param name="outputheight">Output size, Height</param>
        </member>
        <member name="M:Core.ImageModule.Utilities.IsBackgroundOnly(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Check if bitmap is only background in specific area, for cropping etc.
            </summary>
            <param name="img"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="bg"></param>
            <returns></returns>
        </member>
        <member name="M:Core.ImageModule.Utilities.RenderString(System.Single,System.String,System.Drawing.Color,System.Byte[],System.String,System.Drawing.FontStyle)">
            <summary>
            Render a text string into a transparent bitmap, using the specific font
            </summary>
            <param name="fontsizepixels"></param>
            <param name="text"></param>
            <param name="color"></param>
            <param name="fontfile"></param>
            <param name="fontname"></param>
            <returns></returns>
        </member>
        <member name="M:Core.ImageModule.Utilities.RenderString(System.Single,System.String,System.Drawing.Color,System.Byte[],System.String,System.Drawing.FontStyle,System.Int32)">
            <summary>
            Render a text string into a transparent bitmap, using the specific font
            </summary>
            <param name="fontsizepixels"></param>
            <param name="text"></param>
            <param name="color"></param>
            <param name="fontfile"></param>
            <param name="fontname"></param>
            <returns></returns>
        </member>
        <member name="M:Core.ImageModule.Utilities.RenderString(System.Single,System.String,System.Drawing.Color,System.String,System.String,System.Drawing.FontStyle)">
            <summary>
            Render a text string into a transparent bitmap, using the specific font
            </summary>
            <param name="fontsizepixels"></param>
            <param name="text"></param>
            <param name="color"></param>
            <param name="fontfile"></param>
            <param name="fontname"></param>
            <returns></returns>
        </member>
        <member name="M:Core.ImageModule.Utilities.RenderString(System.Single,System.String,System.Drawing.Color,System.String,System.String,System.Drawing.FontStyle,System.Int32)">
            <summary>
            Render a text string into a transparent bitmap, using the specific font
            </summary>
            <param name="fontsizepixels"></param>
            <param name="text"></param>
            <param name="color"></param>
            <param name="fontfile"></param>
            <param name="fontname"></param>
            <returns></returns>
        </member>
        <member name="M:Core.ImageModule.Utilities.RenderString(System.String,System.Drawing.Color,System.Drawing.Font,System.Int32)">
            <summary>
            Render a text string into a transparent bitmap, using the specific font
            </summary>
            <param name="fontsizepixels"></param>
            <param name="text"></param>
            <param name="color"></param>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Core.ImageModule.Utilities.ParseInt(System.Object)">
            <summary>
            Try to parse numeric (integer) value, returns 0 if parsing fails.
            </summary>
            <param name="obj">Object to parse</param>
            <returns>Parsed value</returns>
        </member>
        <member name="M:Core.ImageModule.Utilities.ParseInt(System.Object,System.Int32)">
            <summary>
            Try to parse numeric (integer) value, returns a default value if parsing fails.
            </summary>
            <param name="obj">Object to parse</param>
            <param name="defaultvalue">Default value if parser fails</param>
            <returns>Parsed value</returns>
        </member>
        <member name="M:Core.ImageModule.Utilities.ParseHtmlColor(System.String)">
            <summary>
            Parse an HTML-Color code into a System.Drawing.Color object, reads these formats:
            RRGGBB
            RRGGBBAA
            RGB
            RGBA
            #RRGGBB
            #RRGGBBAA
            #RGB
            #RGBA
            rrr,ggg,bbb
            rrr,ggg,bbb,aaa
            </summary>
            <param name="input">color code</param>
            <returns>Color object, white if parser fails</returns>
        </member>
        <member name="M:Core.ImageModule.Utilities.ParseHtmlColor(System.String,System.Drawing.Color)">
            <summary>
            Parse an HTML-Color code into a System.Drawing.Color object, reads these formats:
            RRGGBB
            RRGGBBAA
            RGB
            RGBA
            #RRGGBB
            #RRGGBBAA
            #RGB
            #RGBA
            rrr,ggg,bbb
            rrr,ggg,bbb,aaa
            </summary>
            <param name="input">color code</param>
            <param name="defaultvalue">default value if parser error</param>
            <returns>Color object, or default value</returns>
        </member>
        <member name="P:Core.Filters.Common.ImageOverlayLang.GlobalLanguageId">
            <summary>
            GlobalLanguageId set in a cookie
            </summary>
        </member>
        <member name="T:Core.ImageModul.Filters.Levels">
            <summary>
            Change contrast and/or brightess of an image
            </summary>
        </member>
        <member name="T:Core.ImageModul.Filters.IBaseFilter">
            <summary>
            A bitmap filter
            </summary>
        </member>
        <member name="P:Core.ImageModul.Filters.IBaseFilter.ParameterDefinition">
            <summary>
            Returns the parameter definition, could have been done thru reflection but i think a embedded xml-definition is faster, can return null if no definition is available
            </summary>
        </member>
        <member name="M:Core.ImageModul.Filters.IBaseFilter.Filter(System.Drawing.Bitmap)">
            <summary>
            Apply filter, 
            </summary>
            <param name="input">Input bitmap</param>
            <returns>Modified bitmap</returns>
        </member>
        <member name="M:Core.ImageModules.Helpers.Buttons.GenerateStandardButtonLayout(System.String,System.Drawing.Font,System.String,System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit,System.String,System.Int32,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Generate a bitmap image
            </summary>
            <param name="flags">Button viewmode</param>
            <param name="templatename">Bitmap template name</param>
            <param name="iconsize">Icon size</param>
            <param name="fontsize">Font size</param>
            <param name="fontcolor">Font color</param>
            <param name="skin9left">Skin left padding</param>
            <param name="skin9top">Skin top padding</param>
            <param name="skin9right">Skin right padding</param>
            <param name="skin9bottom">Skin bottom padding</param>
            <param name="pad1">Padding before leftmost item</param>
            <param name="pad2">Padding between inner items</param>
            <param name="pad3">Padding after rightmost item</param>
            <param name="yoffset">Inner content Y-offset</param>
            <param name="icon_on_right">Render icon after the text</param>
            <returns>The bitmap</returns>
        </member>
    </members>
</doc>
